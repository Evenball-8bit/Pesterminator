;.COMMAND -w142
;		NES QUEST GAME STATE MACHINE
;
;COPYRIGHT 1990 BY DANIEL LAWTON, ALL RIGHTS RESERVED.
;LAST UPDATE 4/11/90
;CA65 port by Evenball
.feature force_range

;DEFINE( ROMVER,-1)		;REMOVE COMMENT TO MAKE ROM VERSION.
ROMVER = -1
.include 	"MEMORY.ASM"
;INCLUDE( MEMORY.ASM)		;USED ONLY IF YOU WANT 2 32K PAGES.  PUT
				;BACKGROUNDS INTO ASSEMBLY MEMORY.ASM
				;(BUT CHANGE THE NAME OF THE FILE AND CHANGE
				;THE NAME IN THIS ASSEMBLY TO YOUR OWN).

;.CODE				;SPECIFY CODE SEGMENT IN CASE OF PAGEING
.segment "BANK_00"


;THIS BEGINS YOUR CODE.  YOU MAY CHANGE THE ORG BUT IF YOU USE THE EXTRA
;MEMORY PAGE OF MEMORY.ASM YOU SHOULD ORG AT 8000.

;.ORG	$8000		;CODE ROM PROGRAM ORIGIN.
			;32K=$8000
			;16K=$C000
			; 8K=$E000

	REPRATE = 2		;KEY REPEAT RATE IN 1/60 SECONDS. 

	J1REPENA = %10001111	;REPEAT ENABLE FLAG BITS FOR EACH J1 BUTTON
	J2REPENA = %10001111	;REPEAT ENABLE FLAG BITS FOR EACH J2 BUTTON

	SPSLOTS = 17		;MAX ALLOWED ACTIVE SPRITE OR ANIMATION BLOCKS

	SNDSLOTS = 7		;MAX ALLOWED ACTIVE SOUND STRUCTURES

;;	SPRITE_BAR,$FF		;IF YOU WANT TO USE A STATUS BAR, THIS
				;VALUE MUST POINT TO A CHARACTER WITH
				;2 DOTS IN ITS LOWER RIGHT CORNER ON THE
				;BOTTOMMOST SCAN LINE AND THE REST EMPTY 
				;(BACKGROUND COLOR).  HERE'S A MAP OF
				;THE DOTS:
				;		00000000
				;		00000000
				;		00000000
				;		00000000
				;		00000000
				;		00000000
				;		00000000
				;		00000011
				;
				;IF YOUR SPRITES ARE 2 HIGH THEN THE NEXT
				;CHAR MUST BE EMPTY.  THIS CHAR MUST
				;BE IN THE ACTIVE SPRITE PALETTE AT ALL
				;TIMES.  

;;	DOT_CHAR,$FF		;IF YOU WANT TO USE A STATUS BAR, THIS
				;VALUE MUST POINT TO A CHARACTER LIKE
				;SPRITE_BAR BUT IN THE BACKGROUND PALETTE.

;;	GUNDELAY,60		;1/60 SECOND PAUSE BEFORE ALLOWING A NEW
				;LIGHT GUN SHOT.  255 MAX.  

;;DEFINE( TOPBAR,2)		;FOR WORLD WITH TOP OF SCREEN STATUS BAR,
				;SET THIS TO 4.  FOR WORLD WITH NO TOP
				;OF SCREEN STATUS BAR, SET THIS TO 2.

;;DEFINE( TTYFLG,-1)		

;		EQUATES (NOT FROM USERASM.ASM)

;HERE ARE THE SOUND SLOTS.  EACH PARTICULAR FUNCTION HAS A DEDICATED
;SLOT.

	MSLOT1 = 0		;SOUND SLOT TO USE FOR MUSICS FIRST TRACK
	MSLOT2 = 1		;SOUND SLOT TO USE FOR MUSICS SECOND TRACK
	ENGINESLOT = 2		;ENGINE SOUND FOR EACH HERO
	GUNSLOT = 3		;SOUND SLOT TO USE FOR HERO'S SHOT
	HSOUNDSLOT = 4		;SOUND SLOT FOR NOISES FROM HERO FLAGS TESTING
				;AND BULLET HITS ON THINGS.
	ENEMYNOISE = 5		;SOUND SLOT FOR ENEMY SHOT NOISES
	DINGSLOT = 6		;FOR THE PAUSE DING OR JUMP BOING.

;THESE ARE THE SPRITE/ANIMATION SLOTS.  FOR EACH PARTICULAR FUNCTION
;THERE IS A RESERVED SLOT.  THE TIMING IS CALCULATED SO THAT THE SLOT
;IS ALWAYS FREE BY THE TIME ITS NEEDED AGAIN.


;SLOTS FROM HERE TO NEXT COMMENT WILL CAUSE HEALTH LOSS IN HERO IF COLLISION.

;WARNING!!!!!! THE CODE ASSUMES THAT ENEMY0SLOT STARTS AT 0 AND IS
;FOLLOWED BY ENEMYSHOT.  THIS SAVES TIME.  

	ENEMY0SLOT = 0		;ENEMY AND SPRITE TARGET SLOTS.  MUST
                                ;HAVE 6 AVAILABLE.
    ENEMYSHOT = 6             ;ENEMY'S SHOTS SLOT.  ENEMY CAN ONLY SHOOT 1.
                                ;MUST HAVE 6 AVAILABLE AND MUST FOLLOW
				;ENEMY0SLOT.

;SLOTS FROM HERE ON DO NOT MATTER IF THERE IS A COLLISION WITH THE HERO.
;WE USE HEROSLOT AS A TEST TO SEE IF THE COLLISION MATTERS.

    HEROSLOT = 12             ;ANIMATION SLOT TO USE FOR THE HERO
    HEROSHOT = 13             ;HERO'S BULLET SLOTS (1 MAX)

    ELEVSLOT = 14             ;ELEVATOR DOOR CLOSING

    COLIDESLOT = 15           ;TO SHOW AN EXPLOSION

    LIFESLOT = 16             ;LIFE FORCE SLOT

;THIS IS THE ANIMATION TO USE WHEN THE HERO IS HIT.

	HERO_HIT = HEROHIT
	HERO_HHIT = HELIHIT
	HERO_WHIT = HEROWHIT
.include "PSUBS.ASM"
.include "WORLDTAB.ASM"	;Starts at $1C2E 
.include "DRAWDATA.ASM"	;Starts at $3905
;INCLUDE( PSUBS.ASM)		;Moved from line 196.	-KHB
;INCLUDE( WORLDTAB.ASM)		;THIS IS THE WORLD FLAGS AND CONTROL DATA
;INCLUDE( DRAWDATA.ASM)		;THIS IS THE SPRITE AND PALETTE DEFFINITIONS
				;AND OTHER DRAWING PROGRAM OUTPUT.  
				;BACKGROUNDS ARE USUALLY IN YOURBACK.ASM BUT
				;IF THERE'S ROOM SOME CAN BE PUT HERE TOO.

;			STATE MACHINE LOGIC
;
;1. AT BOOT WE SET WORLD_REQUEST TO -1 TO REQUEST THE BOOT WORLD (0).
;
;2. IN THE MAINLINE WE CHECK WORLD_REQUEST AND IF TRUE WE PROCEED TO
;INIT THAT WORLD BY CALLING THE SUB FOR THE APPROPRIATE WORLD.  WORLDS
;1 TO $7F ARE PLAYABLE WORLDS.  WORLDS $80 TO $FE ARE INSTRUCTIONS
;SCREENS.
;
;3. DURING NMI WE SIMPLY RETURN IF WORLD_REQUEST IS TRUE.  OTHERWISE
;WE DO THE PROCESSING FOR THAT WORLD.  ALL WORLDS PROCESS THE SAME WAY.
;WHEN THE HERO MOVES ONTO A NEW COLUMN ON THE SCREEN IT CAUSES THE
;TESTING OF THE COMMAND FOR THAT COLUMN.  
;
;4. JOYSTICK CALLS CAUSE THE HERO TO MOVE OR JUMP OR SHOOT.  ALL THE JOYSTICK
;DOES IS CHANGE THE HERO'S MOMENTUM IN A GIVEN AXIS.  THE MAIN LINE MOVES
;THE HERO. 
;
;TO CHANGE WORLDS AT ANY TIME, SET WORLD_REQUEST TO THE DESIRED WORLD.  
;THE MAINLINE CODE  WILL CHANGE WORLDS.   PLAYABLE WORLDS ARE 1 TO 7F.
;INSTRUCTIONS ARE $80 TO $FE.
;
;
;			WORLD FLAGS DESCRIPTION
;
;THE WORLD FLAGS ARE 4 BYTES PER SCREEN COLUMN LOCATION.  WHEN THE
;HERO TOUCHES A NEW ROW OR COLUMN POSITION, THE FLAGS FOR THE COLUMN TOUCHED
;BY THE CENTER OF THE HERO ARE TESTED AND THE FLAG IS ACTED ON.
;IF BIT $80 IS SET IN A LEADING FLAG BYTE, THE TARGET ALSO IS SHOOTABLE 
;BY THE HERO'S BULLETS.  SOME TARGETS BEHAVE DIFFERENTLY WHEN SHOT. 

;NOT ALL FLAG TYPES RESPOND TO THE HERO STEPPING ON THEM OR SHOOTING THEM.
;SOME SUCH AS THE ENEMY LAUNCH AND SCREEN BORDER COMMANDS RESPOND TO THE
;SCREEN SCROLLING ONTO THEM.  WHEN THE HERO STEPS ONTO THEM NOTHING WILL
;HAPPEN.

;HERE IS A "PICTURE" SHOWING THE "HOT SPOT" OF THE HERO (Xs REPRESENT HERO):
;
;
;           XXX	<
;	    XXX	<	COMPLETELY ACTIVE VERTICALLY
;	    XXX	<
;	     ^
;	     ONLY THE CENTER IS ACTIVE HORIZONTALLY

;THE FLAGS HAVE A 4 BYTE FORMAT.  THE MEANINGS ARE:
;
;1 BYTE TYPE:
;		0-7F = TYPE
;		80H SET IF TARGET FOR HERO TO SHOOT.
;
;1 BYTE ROW AND AUX FLAG BITS (THE FLAG BITS ARE RARELY USED):
;
;		1F = ROW WITHIN BACKGROUND OF SCREEN WHERE TARGET IS ACTIVE.
;		     IF SET TO 0, THE TARGET IS ACTIVE FOR ANY ROW.  DON'T USE
;		     A VALUE OF 0 FOR TARGETS THAT REQUIRE ERASING.
;		80H = AUX FLAG BIT 1
;		40H = AUX FLAG BIT 2
;		20H = ERASE/DON'T ERASE.  IF TRUE, TARGET IS NOT ERASED
;		      WHEN ENCOUNTERED.  SOME TARGET TYPES ERASE, SOME DON'T
;		      BUT ALL RESPOND TO THIS BIT BEING SET.  THIS CAN BE
;		      USED FOR TRICKY FEATURES.  FOR INSTANCE, A LIFE FORCE
;		      SYMBOL THAT DOESN'T ERASE WILL ALSO BE AVAILBLE FOR
;                     THE HERO TO KEEP STEPPING ON TILL HE GETS HIS MAX LOAD.
;                     IF IT ERASES, HE CAN ONLY GET IT ONCE.
;
;1 BYTE AUX FLAG BYTE 1 (AUX1).  MEANING IS SPECIFIC TO TYPE.  A COMMONLY
;		NEEDED VALUE IS ONE THAT SPECIFIES IN 1 BYTE A SCREEN
;		TEXT ROW AND COLUMN.  SINCE THE 1 BYTE CANNOT HOLD THE
;		FULL REQUIRED VALUE, ITS ALIGNED TO EVEN ROWS AND COLUMNS.
;		IT WILL BE REFFERED TO AS  "BYTELOC" AND IS EQUAL TO;
;		(ROW ON SCREEN)/2 + (SIGNED NIBBLE OF DELTA X/2)*10H.
;
;		THE ROW ON SCREEN IS STORED IN THE LOW NIBBLE OF THE BYTELOC
;		VALUE AND IS SIMPLY DIVIDED BY 2 SO THAT IT CAN SPAN THE
;		ENTIRE RANGE OF 0-30.  THE UPPER NIBBLE HOLDS A SIGNED
;		VALUE OF THE NUMBER OF TEXT COLUMNS TO MOVE FROM THE CURRENT
;		LOCATION IN THE WORLD FLAGS. IF THE TOP BIT OF THAT NIBBLE IS 
;		SET IT IS A NEGATIVE MOVEMENT (A MOVEMENT TO THE LEFT OF 
;		THE SCREEN). IF THE TOP BIT IS OFF, IT IS A MOVEMENT TO 
;		THE RIGHT.  HERE IS A TABLE OF WHAT TO USE FOR THE HIGH NIBBLE:
;
;		HIGH NIBBLE VALUE		MEANING
;		0				NO CHANGE IN X
;		1				MOVE 2 TO THE RIGHT ON SCREEN
;		2				MOVE 4 TO THE RIGHT
;		3				MOVE 6 TO THE RIGHT
;		7				MOVE 14 TO THE RIGHT
;		F				MOVE 2 TO THE LEFT (-2)
;		E				MOVE 4 TO THE LEFT (-4)
;		D				MOVE 6 TO THE LEFT (-6)
;		C				MOVE 8 TO THE LEFT (-8)
;		B				MOVE 10 TO THE LEFT (-10)
;		A				MOVE 12 TO THE LEFT (-12)
;		9				MOVE 14 TO THE LEFT (-14)
;		8				MOVE 16 TO THE LEFT (-16)
;
;		FOR EXAMPLE, A BYTELOC VALUE OF 23H MEANS MOVE 4 TO THE RIGHT
;		FROM THE CURRENT LOCATION WITH A Y ROW OF 6.  A BYTELOC
;		OF E6H MEANS MOVE 4 TO THE LEFT WITH A Y ROW OF 12.

;1 BYTE AUX FLAG BYTE 2 (AUX2)

;NOTE THAT SOME COMMANDS CAUSE ERASING OR PAINTING OF THE SCREEN.  THESE
;COMMANDS MUST NEVER CAUSE A PAINT ACROSS VIDEO PAGES (MULTIPLES OF 32
;HORIZONTALLY OR MULTIPLES OF 30 VERTICALLY).  BE SURE TO REMEMBER THIS.
;ALSO, IT SHOULDN'T BE POSSIBLE TO SHOOT THE ACTIVATING TARGET UNLESS THE
;ENTIRE AREA IS ON SCREEN.

;HERE ARE THE TYPE BYTES AND A DESCRIPTION OF HOW EACH IS USED.  NOTE
;THAT THE TARGETS ARE 0-7F BUT BIT 80H IS SET FOR SPEED WHEN THE TYPE IS
;ALSO (OR ONLY) A SHOOTABLE TARGET FOR THE GUN.  ALSO NOTE THAT ERASABLE
;THINGS (BOMBS, ETC) MUST NOT BE REQUIRED TO BE ERASED
;ACROSS A SCREEN VIDEO PAGE BOUNDRY.   THE BOUNDRY IS FROM LOW COLUMN
;BITS 1F TO 20H.  YOU MUST MAKE SURE NOT TO PASS THIS BOUNDRY WITH A
;COMMAND THAT CAUSES ERASE OR PAINTING TO TAKE PLACE.
;
;NO COMMAND SHOULD BE CREATED THAT EXPECTS TO CHANGE A CONTROLLING
;VALUE FOR THE WORLD FLAGS OTHER THAN THE FLAG BYTE OR AUX BYTE 1.
;THESE ARE LOADED INTO RAM BUT THE ROW BYTE AND AUX BYTE 2 ARE NOT BECAUSE
;THERE ISN'T ENOUGH RAM.  COMMANDS THAT COUNT SHOTS SHOULD USE AUX BYTE 1.
;
;00 = NO ACTION OR TARGET.
;01 = UNUSED
;02 = (removed 5/23/90 -KHB) LIFE FORCE (HEALTH).  LIFE FORCE IS INCREASED WHEN TOUCHED BY HERO.  
;     CAN ALSO BE SHOT IF BIT $80 IS SET.
;
;     LIFE FORCE PROTECTS HERO FROM ENEMIES. ITS CALLED HEALTH IN THIS DOC.
;     AT THE START OF EACH NEW HERO THE LIFE FORCE IS PRESET.  THIS COMMAND 
;     INCREASES THE LIFE FORCE BY ANOTHER 4.  EACH ENEMY COLLISION LOWERS
;     IT BY 1.  IF IT REACHES 0, THE HERO DIES.  LIFE FORCE SHOULD BE A 
;     SINGLE CHAR AND IS ERASED WHEN USED.  LIFE FORCE MAXIMUM STORAGE IS
;     20 UNITS.  IF YOU SET THE ROWBYTE TO NOT ERASE, THE HERO CAN GET LIFE
;     FORCE OUT OF IT OVER AND OVER TILL HE IS FULL.
;
;03 = (removed 5/23/90 -KHB) PAUSE.  THE TIME TO PAUSE HERO'S MOVEMENTS IN 1/15 SECOND INTERVALS
;     IS SPECIFIED IN AUX1.  A 1 WIDE BY 2 HIGH SQUARE WILL BE ERASED UNLESS
;     OTHERWISE SPECIFIED.  THE COMMAND IS ASSUMED LOCATED IN THE TOP HALF
;	OF THE ERASE ZONE.   IF AUX BYTE 2 IS TRUE, THE SOUND ASSOCIATED
;	WITH THIS COMMAND IS NOT MADE.
;84 = (removed 5/23/90 -KHB) EXPLOSIVE CHARGE.  WILL KILL HERO IF ENCOUNTERED. IF SHOT, IT GOES AWAY
;     	AFTER EXPLODING.  USE 04 INSTEAD OF 84 TO MAKE IT UNSHOOTABLE.
;     	A 1 WIDE BY 2 HIGH AREA IS ERASED, THE ROW AND COLUMN OF THE COMMAND 
;	ARE ASSUMED IN THE LOWER HALF OF THE 1 BY 2 RECTANGLE.  REMEMBER THAT
;	YOU CAN PERVENT ERASURE BY SETTING BIT $20 IN THE ROW BYTE.
;
;	YOU MUST HAVE AN ANIMATION DEFFINITION "EXPLODES" IN ORDER TO USE
;	THIS COMMAND.  IT SHOULD BE IN WORLDTAB.ASM.  
;
;	IF YOU WANT THE EXPLOSIVE CHARGE TO GO OFF ONLY IF THE HERO'S FEET
;	TOUCH IT, SET AUX BIT 1 ($80 IN THE ROWBYTE).  OTHERWISE ANY
;	PORTION OF HIS BODY TOUCHING IT WILL SET IT OFF.  
;
;05 = (removed 5/23/90 -KHB) PROPEL HERO.
;     	WHEN THIS COMMAND IS ISSUED, THE HERO'S MOMENTUM IS CHANGED IN BOTH
;	THE X AND Y DIRECTIONS.  AUX1 WILL BE ADDED TO THE X MOMENTUM AND
;	AUX2 WILL BE ADDED TO THE Y.  USE 0 FOR NO CHANGE, 8 TO 64 FOR
;	RIGHTWARDS OR DOWNWARDS MOVEMENT, AND -8 TO -64 FOR LEFT OR UPWARDS
;	MOVEMENT.  YOU CAN MAKE THE HERO ZING OFF AT AN ANGLE WITH
;	COMBINATIONS.  CAN ALSO BE USED TO MAKE A "SPRINGY" SURFACE.
;
;	IF YOU WANT THE VALUE TO REPLACE THE CURRENT MOMENTUM INSTEAD OF
;	SIMPLY ADDING TO IT, SET AUX BIT 1.  0 CANNOT BE USED SINCE THIS
;	FLAGS NO CHANGE SO IF YOU WANT TO ZERO IT, USE 1 WHICH IS A MOMENTUM
;	TOO SMALL TO REGISTER.
;
;06 = UNUSED
;07 = (removed 5/23/90 -KHB) PUT HERO BEHIND BACKGROUND IF GOING RIGHT.  PUT HERO IN FRONT
;     OF BACKGROUND IF GOING LEFT.  
;
;08 = (removed 5/23/90 -KHB) SAME AS COMMAND 7 BUT OPPOSITE DIRECTIONS.
;
;09 = (removed 5/23/90 -KHB) TRANSPORT HERO TO NEW LOCATION (MAKE SURE ITS NOT OVER SOLID):
;		AUX1 = X TEXT CELL LOCATION (MUST BE WITHIN BACKGROUND)
;		AUX2 = Y TEXT CELL LOCATION
;
;		THIS COMMAND CAN BE USED ONLY FOR BACKGROUNDS
;		WHOS TOTAL LENGTH IS 256 COLUMNS OR LESS.  IT CANNOT
;		BE USED FOR CONTINUOUS SCROLLING BACKGROUNDS WITH
;		REDUCED RESOLUTION TABLES THAT CREATE A BACKGROUND LENGTH
;		ABOVE 256.
;		
;
;0A = (removed 5/13/90 -KHB) SPECIFY VERTICAL WORLD CONNECTIONS
;	THIS COMMAND ALLOWS YOU TO SPECIFY A WORLD TO GO TO IF THE HERO
;	BUMPS INTO THE TOP OR BOTTOM OF THE SCREEN LIMITS.  IT IS USED
;	PRIMARILY FOR MAZE SITUATIONS.  
;
;	AUX BYTE 1 SPECIFIES THE WORLD TO GO TO IF THE HERO BUMPS INTO THE
;	TOP SCREEN LIMIT.  AUX BYTE 2 SPECIFIES THE WORLD TO GO TO IF THE
;	HERO BUMPS INTO THE BOTTOM SCREEN LIMIT.  USE 0 TO DISABLE EITHER
;	OR BOTH.
;
;0B = UNUSED
;
;0C = (removed 5/23/90 -KHB) NEW WORLD. AUX1 = NEW WORLD OR NEW POSITION WITHIN THIS WORLD.  
;
;	THIS COMMAND ALLOWS THE HERO TO GO TO A NEW WORLD OR LOCATION SIMPLY
;	BY TOUCHING A COLUMN WITH THIS COMMAND.  IF AUX BIT 1 IS SET, THE
;	COMMAND IS FOR A NEW POSITION IN THIS WORLD.  IF OFF, THE COMMAND
;	IS FOR AN ENTIRELY NEW WORLD.
;
;
;	IF AUX BIT 1 IS OFF:
;
;		AUX1 HAS THE NEW WORLD
;	        AUX2 HAS A SPECIAL OPTIONS FLAG:
;		0=NONE
;		1=MAKE HERO DISAPEAR AND WAIT 2 SECONDS
;		2=PAUSE HERO FOR 2 SECONDS AND STOP MUSIC
;		3=WALK HERO OFF SCREEN RIGHTWARDS AND THEN GO TO NEXT WORLD
;     
;
;	IF AUX BIT 1 IS SET:
;
;	AUX1 HAS NEW BACKGROUND COLUMN TO PUT AT LEFTMOST POSITION OF SCREEN.
;	AUX2 HAS NEW TEXT ROW/2 FOR HERO IN LOW NIBBLE, HIGH NIBBLE
;	IS NEW TEXT COL/2.  
;8D = (removed 5/13/90 -KHB) ELEVATOR BUTTON.  AUX BYTE 1 HAS THE WORLD TO GO TO IF THAT BUTTON
;	HAS BEEN PUSHED.  THEN COMMAND 0F MAY SPECIFY TO GET THIS WORLD
;	BY USING WORLD 0 AS THE REQUESTED WORLD.  BE SURE TO USE COMMAND
;	0E TO INITIALIZE THE ELEVATOR.

;0E = (removed 5/13/90 -KHB) SET ELEVATOR WORLD TO THIS VALUE.  AUX BYTE 1 HAS WORLD TO GO TO
;	IF THE ELEVATOR IS ENTERED.  YOU MUST HAVE THIS COMMAND IN THE
;	WORLD AT A POINT BEFORE THE HERO CAN TRY TO ENTER THE ELEVATOR.
;	IT ERASES ON CONTACT THUS DOING A SINGLE INITIALIZATION OF THE
;	ELEVATOR WORLD.
;

;0F = (removed 5/13/90 -KHB) DOOR OR ELEVATOR ENTRANCE TO ANOTHER WORLD.  HERO CAN STAND ON THIS
;	COMMAND AND PUSH UP TO ENTER THE DOOR OR ELEVATOR.  
;	THE OPEN AND CLOSING DOORS ANIMATION WILL BE USED IN 
;	CONJUNCTION WITH A HERO MOVEMENT TO GIVE THE IDEA OF LEAVING THROUGH
;	A DOOR OR AN ELEVATOR.  PLACE THIS COMMAND ON THE ROW DIRECTLY
;	AT THE BASE OF THE ELEVATOR IMAGE AND IN THE 2 TEXT COLUMNS IN THE 
;	CENTER (IT NEEDS 2 TO FUNCTION EASILY FOR THE PLAYER).  SET AUX BIT 1
;	IF THE COMMAND IS ON THE LEFTMOST OF THE 2 TEXT CELLS AND RESET
;	IT IF ITS ON THE RIGHTMOST COLUMN.  
;	
;     	AUX1 = WORLD TO GO TO OR USE 0 FOR THE WORLD SPECIFIED BY THE
;	      LAST ELEVATOR BUTTON PRESS (OR COMMAND 0E).
;	AUX2 = QUALIFYING CONDITIONS:
;		0=NONE
;		$10 TO $15 = PRIZE 0 TO 5 MUST BE PRESENT (LOW BITS=PRIZE#).
;		  	THE SPECIFIED PRIZE MUST BE PRESENT OR ENTRY WILL
;			NOT BE ALLOWED AT ALL.  THE DOOR IS CONSIDERED 
;			"LOCKED".  IF THE HERO IS ALLOWED TO ENTER, THIS
;			PRIZE COUNT IS DECREMENTED.  TYPICALLY YOU SHOULD
;			MAKE THE DOOR LOOK LIKE IT NEEDS A KEY AND THE
;			PRIZE SHOULD BE DEPICTED AS A KEY.
;
;		$20-$25 = 2 OF PRIZE 0 TO 5 MUST BE PRESENT.  SAME AS
;			ABOVE BUT THERE MUST BE 2 OF THEM.  USE THIS FOR
;			DOORS WITH A "DOUBLE KEY" LOCK.
;
;		$30-$35 = 3 OF PRIZE 0 TO 5 MUST BE PRESENT.  YOU CAN 
;			REPEAT THE HIGH NIBBLE COUNT TILL A MAX OF 7 REQUIRED.
;
;
;		$80-$FE=ALL MUST DEFEAT ENEMIES (SEE ENEMYOPTS IN WORLDTAB)
;		MUST HAVE BEEN DEFEATED (DON'T MAKE ANY OF THEM PERMA LAUNCH).
;		 IF THEY ARE NOT, THE INSTRUCTIONS WORLD CORRESPONDING
;		TO THE NUMBER SPECIFIED IS DISPLAYED AS A NORMAL INSTRUCTIONS
;		WORLD WILL DO AND THEN THE GAME RESUMES AT THE POINT IT
;		LEFT.  BUT THE HERO IS PUT AT THE WORLD START POSITION
;		INSTEAD OF BY THE DOOR (THIS WAS DONE TO MAKE IT EASY TO
;		CODE, NOT BECAUSE IT MADE ANY SENSE).  YOU MAY POINT
;		TO ANY INSTRUCTIONS WORLD YOU WANT, THE WORLD TO GO TO
;		IN THE INSTRUCTIONS WILL BE IGNORED.
;
;	AUX BIT 1 IS SET IF COMMAND IN LEFT HALF OF ELEVATOR.
;	AUX BIT 2 IS SET IF YOU WANT TO USE THE SECOND SET OF DOOR
;	ANIMATIONS (EXPLANED LATER).
;	ROW BYTE BIT $20 (DON'T ERASE) IS SET TO SKIP THE DOOR ANIMATIONS
;	ALTOGETHER.
;
;	THE ELEVATOR DRAWING MUST NOT CROSS PAGE BOUNDRIES AND THE PALETTE
;	SETTING MUST ALREADY BE CORRECT.  THE ELEVATOR DOORS WILL BE GENERATED
;	FROM 2 LISTS OF POINTERS FROM WORLDTAB.ASM.  THEY ARE OPENDOOR
;	AND SHUTDOOR.  THE BLOCKS THEY SPECIFY MUST BE 4 WIDE BY 
;	4 HIGH AND CAN HAVE AS MANY OR AS FEW ANIMATION FRAMES AS DESIRED.
;	IF AUX BIT 2 IS SET, OPENDR2 AND SHUTDR2 WILL BE USED FOR THE
;	ANIMATIONS.
;
;	THE HERO WILL NOT ENTER THE ELEVATOR UNLESS HE IS PUSHED WITH THE
;	UP KEY WHILE STANDING ON THE EXACT ROW OF THIS COMMAND OR THE 
;	ROWS JUST BESIDE IT.  IF HE IS 2 ROWS BELOW OR MORE HE WILL NOT 
;	ACTIVATE IT AND  JUMPING INTO IT WILL
;	NOT WORK, THE UP KEY MUST BE HELD DOWN.
;
;	PLACE THE HERO ON TOP OF ANOTHER DOOR ELEVATOR COMMAND IN THE
;	RECEIVING WORLD IF YOU WANT HIM TO WALK OUT OF THE ELEVATOR
;	WHEN HE GETS THERE.  OR PLACE HIM ON A DOOR TO ANOTHER PLACE
;	COMMAND THAT IS POINTING TO ITSELF TO MAKE A 1 WAY ELEVATOR.
;
;	HERE IS A MAP OF WHERE TO PUT THE COMMANDS FOR THE ELEVATOR:
;
;	EEEE
;	EEEE
;	EEEE
;	EEEE
;	 Xx		X MARKS COMMAND WHERE AUX BIT 1 IS SET.
;			x MARKS COMMAND WHERE AUX BIT 1 IS NOT SET.		
;
;10 TO 15 UNUSED
;
;16 = UPWARDS ENTRANCE TO ANOTHER WORLD OR TO ANOTHER PLACE IN THIS WORLD.
;
;	THIS COMMAND IS USED FOR VISUAL ENTRANCES THAT ARE DIRECTLY ABOVE
;	AND BEHIND THE HERO BUT WHICH HAVE NO DOORS.  ENTRANCES THAT
;	THE HERO WALKS INTO GOING RIGHT OR LEFT CAN USE THE GO BEHIND IN
;	COMBINATION WITH THE NEW WORLD COMMAND.  ENTRANCES WITH DOORS
;	CAN USE THE ELEVATOR AND DOOR COMMANDS.  THIS COMMAND IS PROVIDED
;	FOR OTHER SITUATIONS WHERE THE DOOR IS DIRECTLY ABOVE AND BEHIND
;	THE HERO.
;
;	THE COMMAND SHOULD BE PLACED UNDER THE ACTUAL ENTRANCE.  THE
;	UP KEY MUST BE HELD DOWN WHILE ON THIS COMMAND OR IT WILL BE
;	IGNORED.  YOU CAN PLACE MORE THAN 1 IN A ROW IF DESIRED TO
;	MAKE IT EASIER TO ENTER A WIDE AREA.  SEE COMMAND 0F FOR ROW PLACEMENT.
;
;	IF AUX BIT 1 IS OFF THEN THE COMMAND IS GO TO ANOTHER WORLD AND
;	AUX BYTES HAVE THE FOLLOWING MEANINGS:
;	AUX BYTE 1 SPECIFIES THE NEXT WORLD TO GO TO.
;
;	IF AUX BIT 1 IS SET THEN THE COMMAND IS GO TO ANOTHER PLACE IN
;	THIS WORLD AND AUX BYTES HAVE THE FOLLOWING MEANINGS:
;	AUX BYTE 1 SPECIFIES THE COLUMN WITHIN THE CURRENT BACKGROUND
;	TO PLACE IN THE LEFT PORTION OF THE SCREEN.  -1 MEANS FLOATING.
;	AUX BYTE 2 SPECIFIES THE COLUMN WITHIN THE BACKGROUND OVER WHICH
;	THE HERO'S "HOT SPOT" (PLACE THAT DETECTS COMMANDS) WILL BE PLACED.
;	IF YOU POSITION THE HERO ON TOP OF ANOTHER ENTRANCE OR DOOR COMMAND
;	HE WILL CORRECTLY WALK OUT OF THAT ENTRANCE OR DOOR (AND AT THE
;	CORRECT ROW LEVEL FOR THAT COMMAND).  IF YOU PLACE HIM ON TOP OF
;	ANY OTHER TYPE OF COMMAND OR NO COMMAND AT ALL, HIS ROW LEVEL IS
;	MAINTAINED AS IS.  IF YOU ARE RUNNING THE WORLD IN PARTIAL RESOLUTION
;	MODE, THE COLUMN NUMBER SHOULD BE THE WORLD FLAGS COMMAND GROUP
;	NUMBER.  FOR INSTANCE, A SCREEN COLUMN OF 8 WILL ACTUALLY BE
;	A WORLD FLAGS NUMBER OF 4 IF YOU ARE RUNNING IN HALF RESOLUTION.
;	THIS IS NECESSARY BECAUSE THERE IS ONLY 1 BYTE FOR THE COLUMN
;	SPECIFICATION.
;
;
;	WHEN AUX BIT 1 IS SET AND AUX BYTE 1 IS SPECIFIED AS "FLOATING"
;	THIS MEANS THAT YOU WANT TO MOVE SMOOTHLY TO  THE NEW LOCATION
;	WITHOUT SCREEN FLASH IF AT ALL POSSIBLE.  WHEN YOU ABSOLUTELY
;	SPECIFY THE LEFTMOST COLUMN IT RESULTS IN A VERY QUICK SCREEN
;	FLASH AND CENTERING OF THE SCREEN.   IF YOU KEEP THE DESTINATION
;	ON VIEWABLE SCREEN WHENEVER THE ENTRANCE IS ENCOUNTERED (EXAMPLE:
;	DIRECTLY ABOVE THE ENTRANCE OR TO THE RIGHT OR LEFT BY ONLY 8
;	COLUMNS) THIS WILL PRODUCE A MORE NATURAL FLOW.
;	
;	IF YOU START A WORLD BY PUTTING THE HERO ON TOP OF THIS COMMAND,
;	HE WILL BE WALKED OUT OF THE ENTRANCE.  WHEN THE HERO WALKS INTO
;	ONE, HE WALKS UP 8 PIXELS, GOES BEHIND THE BACKGROUND,
;	THEN WALKS LEFT 20.  WHEN HE WALKS OUT OF ONE, HE IS FIRST MOVED UP 
;	8 AND TO THE LEFT 8, THEN HE IS PUT BEHIND THE BACKGROUND.  HE
;	IS NEXT WALKED RIGHT 8, PUT IN FRONT OF THE BACKGROUND, AND WALKED 
;	DOWN 16.
;
;97 = FREE HERO TARGET.  AUX1 = NUMBER OF SHOTS TO GET A FREE HERO.  
;	AUX2 = FREE HERO NUMBER TO USE.  ONLY 0-7 FREE HEROS ARE ALLOWED,
;	THUS ONLY 8 PER GAME.  THIS LIMIT NEEDED TO KEEP TRACK OF WHEN
;	A FREE HERO HAS BEEN USED UP IN A GIVEN WORLD AND TO REDUCE
;	REQUIREMENTS FOR A SAVE PASSWORD.

;	BIT $80 MUST BE SET IN THE COMMAND BECAUSE THE FREE HERO TARGET
;	CAN ONLY BE SHOT.  THE HERO TOUCHING IT WILL HAVE NO EFFECT.
;	
;	WHEN THE FREE HERO IS AWARDED, THE IMAGE OF THE
;	CURRENT HERO WILL APPEAR ABOVE THE TARGET AND THE SONG "FREEHERO"
;	WILL BE PLAYED.  
;
;	BE SURE TO USE A DIFFERENT FREE HERO # IN EACH WORLD OR THE HERO WILL 
;	NOT BE FOUND BY THE PLAYER IF THAT HERO NUMBER HAS ALREADY BEEN USED.
;
;98 =   (removed 5/23/90 -KHB) HIDDEN LIFE FORCE.  MUST BE SHOT AUX1 TIMES TILL IT OPENS.  MAKES 
;	SOUND ONLY WHEN IT OPENS.  THEN A LIFE FORCE IS PAINTED AT THE TARGET'S
;	1 BY 1 SQUARE.  THE NEXT SHOT RESULTS IN AN INCREASE IN LIFE FORCE AND
;	THE LIFE FORCE CHAR IS ERASED.  THE LIFE FORCE CHARACTER SHOULD BE
;	DEFINED BY THE EQUATE "LIFECHAR".  BE SURE NOT TO SET THE DON'T
;	ERASE BIT FOR THIS COMMAND.  
;
;	HIDDEN LIFE FORCE TREATS THE SHOOTABLE BIT DIFFERENTLY THAN SOME
;	COMMANDS.  IT MUST BE SET FROM THE BEGINNING.  UNTIL IT IS SHOT
;	OPEN, THE HERO TOUCHING IT CANNOT GET IT FREE.
;
;19 = UNUSED
;
;1A =   UNUSED

;1C = (removed 5/23/90 -KHB) NEXT WORLD. FUNCTIONS SAME AS COMMAND 0C EXCEPT THAT THE CURRENT
;	WORLD IS INCREMENTED AND ORED TO AUX1 TO MAKE THE NEXT.  SET
;	AUX BYTE 1 TO 0 FOR NEXT REAL WORLD, $80 FOR NEXT INSTRUCTIONS WORLD.
;
;1D = 	DOOR TO ANOTHER PLACE IN THIS WORLD.  HERO CAN STAND ON THIS
;	COMMAND AND PUSH UP TO ENTER THE DOOR TO ANOTHER PLACE IN THIS WORLD.
;	THE OPEN AND CLOSING DOORS ANIMATION WILL BE USED IN 
;	CONJUNCTION WITH A HERO MOVEMENT TO GIVE THE IDEA OF LEAVING THROUGH
;	A DOOR.  PLACE THIS COMMAND ON THE ROW DIRECTLY AT THE BASE 
;	OF THE DOOR IMAGE AND IN THE 2 TEXT COLUMNS IN THE CENTER
;	(IT NEEDS 2 TO FUNCTION EASILY FOR THE PLAYER).  SET AUX BIT 1
;	IF THE COMMAND IS ON THE LEFTMOST OF THE 2 TEXT CELLS AND RESET
;	IT IF ITS ON THE RIGHTMOST COLUMN.
;
;	AUX BIT 1 IS SET IF COMMAND IN LEFT HALF OF DOOR.
;	AUX BIT 2 IS SET IF YOU WANT TO USE THE SECOND SET OF DOOR
;	ANIMATIONS (EXPLANED LATER).
;
;	AUX BYTE 1 SPECIFIES THE COLUMN WITHIN THE CURRENT BACKGROUND
;	TO PLACE IN THE LEFT PORTION OF THE SCREEN.  -1 MEANS FLOATING.
;	AUX BYTE 2 SPECIFIES THE COLUMN WITHIN THE BACKGROUND OVER WHICH
;	THE HERO'S "HOT SPOT" (PLACE THAT DETECTS COMMANDS) WILL BE PLACED.
;	IF YOU POSITION THE HERO ON TOP OF ANOTHER ENTRANCE OR DOOR COMMAND
;	HE WILL CORRECTLY WALK OUT OF THAT ENTRANCE OR DOOR (AND AT THE
;	CORRECT ROW LEVEL FOR THAT COMMAND).  IF YOU PLACE HIM ON TOP OF
;	ANY OTHER TYPE OF COMMAND OR NO COMMAND AT ALL, HIS ROW LEVEL IS
;	MAINTAINED AS IS.
;
;	WHEN AUX BIT 1 IS SET AND AUX BYTE 1 IS SPECIFIED AS "FLOATING"
;	THIS MEANS THAT YOU WANT TO MOVE SMOOTHLY TO  THE NEW LOCATION
;	WITHOUT SCREEN FLASH IF AT ALL POSSIBLE.  WHEN YOU ABSOLUTELY
;	SPECIFY THE LEFTMOST COLUMN IT RESULTS IN A VERY QUICK SCREEN
;	FLASH AND CENTERING OF THE SCREEN.   IF YOU KEEP THE DESTINATION
;	ON VIEWABLE SCREEN WHENEVER THE ENTRANCE IS ENCOUNTERED (EXAMPLE:
;	DIRECTLY ABOVE THE ENTRANCE OR TO THE RIGHT OR LEFT BY ONLY 8
;	COLUMNS) THIS WILL PRODUCE A MORE NATURAL FLOW.
;	
;	IF YOU START A WORLD BY PUTTING THE HERO ON TOP OF THIS COMMAND,
;	HE WILL BE WALKED OUT OF THE DOOR.  WHEN THE HERO WALKS INTO
;	ONE, THE DOORS OPEN, HE WALKS UP 8 PIXELS, GOES BEHIND THE BACKGROUND,
;	WALKS LEFT 8, THEN THE DOORS CLOSE.  WHEN HE WALKS OUT OF ONE, 
;	HE IS MOVED BEHIND THE BACKGROUND, THE DOORS OPEN, HE WALKS RIGHT
;	8, HE GOES IN FRONT OF THE BACKGROUND, WALKS DOWN 16, 
;	AND THE DOORS CLOSE.
;
;	THE ELEVATOR DRAWING MUST NOT CROSS PAGE BOUNDRIES AND THE PALETTE
;	SETTING MUST ALREADY BE CORRECT.  THE ELEVATOR DOORS WILL BE GENERATED
;	FROM 2 LISTS OF POINTERS FROM WORLDTAB.ASM.  THEY ARE OPENDOOR
;	AND SHUTDOOR.  THE BLOCKS THEY SPECIFY MUST BE 4 WIDE BY 
;	4 HIGH AND CAN HAVE AS MANY OR AS FEW ANIMATION FRAMES AS DESIRED.
;	IF AUX BIT 2 IS SET, OPENDR2 AND SHUTDR2 WILL BE USED FOR THE
;	ANIMATIONS.
;
;	THE HERO WILL NOT ENTER THE DOOR UNLESS HE IS PUSHED WITH THE
;	UP KEY WHILE STANDING ON THE EXACT ROW OF THIS COMMAND OR THE 
;	ROW JUST BELOW IT.  IF HE IS 2 ROWS BELOW OR MORE HE WILL NOT 
;	ACTIVATE IT AND  JUMPING INTO IT WILL
;	NOT WORK, THE UP KEY MUST BE HELD DOWN.
;
;	PLACE THE HERO ON TOP OF ANOTHER DOOR COMMAND IN THE
;	RECEIVING PLACE IF YOU WANT HIM TO WALK OUT OF THE DOOR
;	WHEN HE GETS THERE.  OR PLACE HIM ON TOP OF AN UPWARDS ENTRANCE
;	COMMAND.
;
;	HERE IS A MAP OF WHERE TO PUT THE COMMANDS FOR THE ELEVATOR:
;
;	EEEE
;	EEEE
;	EEEE
;	EEEE
;	 Xx		X MARKS COMMAND WHERE AUX BIT 1 IS SET.
;			x MARKS COMMAND WHERE AUX BIT 1 IS NOT SET.		
;
;
;1E = ROW SPECIFIER FOR DOOR TO CONNECT TO.
;
;	THIS COMMAND ALLOWS A DOOR (1D) OR UPWARDS ENTRANCE (16) TO
;	GO TO A LOCATION THAT HAS NO DOOR.  THOSE COMMANDS REQUIRE A
;	MATEING DOOR OR ELSE THE ROW WILL NOT BE CHANGED.  YOU CAN PUT
;	THIS DUMMY COMMAND THERE TO SPECIFY THE DESIRED ROW WHEN YOU GET
;	THERE.  AUX BYTE 1 HAS THE DESIRED PIXEL ROW WITHIN THE BACKGROUND
;	AT WHICH TO PUT THE HERO WHEN HE ARRIVES THERE.  WALKING ONTO 
;	THIS COMMAND HAS NO EFFECT ON THE HERO.  USING THIS COMMAND YOU 
;	CAN FORM A SORT OF "1 WAY" DOOR.
;
;1F = (removed 5/13/90 -KHB) CLIFF.
;	IF THE HERO TOUCHES THIS HE WILL BE FORCED TO FALL ON SCREEN TILL 
;	NOT VISIBLE ANYMORE AND THEN HE WILL BE KILLED. HE WILL
;	DROP STRAIGHT DOWN.  THIS COMMAND IS FOR MAKING "HOLES".  TO SET
;	AN ENTIRE SCREEN LEVEL AS A CLIFF, USE COMMAND 2D.  
;
;	THIS COMMAND CAN ONLY BE USED TO MAKE A HOLE IN A NO GRAVITY AREA.
;	YOU CANNOT CREATE A HOLE IN SOLID CHARACTER TERITORY.
;
;	IN ORDER TO PROPERLY SPECIFY A HOLE, IT IS NECESSARY TO SPECIFY THE
;	BOUNDRIES OF THAT HOLE.  THIS COMMAND ALLOWS YOU TO SPECIFY 
;	"SQUARE CORNERED" AREAS.  YOU CAN PUT THE FRAME LIMIT FOR FALLING
;	IN THE UPPER LEFT, UPPER RIGHT, LOWER LEFT, OR LOWER RIGHT CORNER
;	OF AN AREA.  IN THIS WAY, IRREGULAR SHAPES FOR THE END OF CLIFFS
;	MAY BE FORMED.
;
;	AUX BIT 1 IS SET IF THE HERO SHOULD MOVE BEHIND THE BACKGROUND AS
;	SOON AS HE IS CONSIDERED FALLING.  OTHERWISE HE WAITS TILL THE SINK
;	LEVEL IS REACHED.
;
;	AUX BYTE 1 HAS THE LEFTWARDS DISTANCE OR RIGHTWARDS DISTANCE FROM THE 
;	CENTER OF COMMAND COLUMN TO AN AREA THAT IS CONSIDERED "SOLID" GROUND.
;	THE COMMAND FUNCTIONS A BIT SLOPPY IN THIS RESPECT.  IT TAKES INTO
;	ACCOUNT THE HERO'S WIDTH BUT IT CAN BE OFF BY AS MUCH AS 4 PIXELS
;	IN ITS DETERMINATION OF WHEN THE HERO SHOULD FALL.
;
;	IF AUX BIT 2 IS SET, AUX BYTE 2 HAS THE PIXEL ROW IN THAT COLUMN WHERE
;	SOLID GROUND STARTS AND EVERYTHING ABOVE IS CONSIDERED PART OF
;	THE HOLE.  IF OFF, AUX BYTE 2 HAS THE PIXEL ROW AT WHICH EVERYTHING
;	BELOW IT IS CONSIDERED PART OF THE HOLE.
;
;
;20 = LAUNCH ENEMY.  
;		          THIS COMMAND WILL LAUNCH THE ENEMY TYPE YOU SPECIFY
;			  FROM THE LOCATION YOU SPECIFY.
;			  AS WITH ALL COMMANDS, IF THE ROW IN
;			  THE SECOND BYTE OF THE COMMAND IS NON-ZERO THE
;			  HERO MUST BE ON THAT ROW OR THE COMMAND IS IGNORED.
;
;	             	AUX BYTE 1 = ENEMY NUMBER FROM ENEMYTAB
;			AUX BYTE 2 = TEXT ROW TO LAUNCH FROM (USES TEXT COL
;			  OF COMMAND LOCATION).
;
;			UP TO 5 ENEMIES CAN BE LAUNCHED AT THE SAME TIME.
;			IF ALL ENEMIES ARE ALREADY ACTIVE, 
;			THIS COMMAND IS IGNORED.  USE COMMAND $21 
;			TO FORCE AN ENEMY LAUNCH.
;
;			IF YOU SET BIT $80 ON THIS COMMAND, THE ENEMY WILL
;			ONLY BE LAUNCHED IF THE HERO SHOOTS THIS TARGET
;			(STEPPING ON IT WILL HAVE NO EFFECT).  A 2 BY 2
;			AREA TO THE RIGHT AND DOWN FROM THE TARGET AREA
;			WILL BE ERASED IN THIS CASE UNLESS YOU SPECIFY
;			NOT TO IN THE ROW BYTE (BIT $20). 

;			IF THE TARGET IS NOT SHOOTABLE, YOU CAN SPECIFY
;			THAT THE ENEMY IS TO LAUNCH FROM 
;		        BEHIND THE BACKGROUND AND WILL GO 15 MOVEMENTS 
;			AND THEN BE PUT IN FRONT OF THE BACKGROUND.
;			THIS IS COMMON TO ALL ENEMY LAUNCHING COMMANDS
;			(PERMA LAUNCH TOO).  SET BIT $20 (THE DON'T ERASE
;			BIT) IN THE ROW BYTE.  IF YOU DON'T WANT THE ENEMY
;			TO LAUNCH FROM BEHIND, DON'T SET THIS BIT.  WHEN THE 
;			TARGET IS SHOOTABLE, THE ENEMIES NEVER LAUNCH FROM
;			BEHIND THE BACKGROUND.
;
;			AUX BIT 1 IS SET IF THE ENEMY IS TO BE A FAST ENEMY.
;			THE ENEMY WILL THEN TRAVEL AT 2 TIMES THE NORMAL
;			SPEED.  AUX BIT 1 IS BIT 80H IN THE ROW BYTE.
;
;			AUX BIT 2 (BIT 40H IN THE ROW BYTE) IS SET IF YOU
;			WANT THE ENEMY TO CONTUNUALLY LAUNCH FROM THE 
;			ORIGINAL LAUNCH POINT EACH TIME IT IS KILLED.
;			IT THE LAUNCH POINT GOES OFF SCREEN, THE LAUNCHING
;			WILL STOP.
;
;
;			ENEMIES DO NOT AUTOMATICALLY KILL THE HERO IF THEY
;			HIT HIM.  THEY LOWER HIS LIFE FORCE BY 1.
;
;
;21 = UNCONDITIONAL LAUNCH ENEMY.       WORKS SAME AS COMMAND 20 BUT USES
;                                       SLOT #5.
;
;22 = (removed 5/23/90 -KHB) GO TO NEW WORLD WHEN A CERTAIN ENEMY IS KILLED. 
;
;	THIS COMMAND ALLOWS THE HERO TO GO TO A NEW WORLD AS THE RESULT OF
;	KILLING A SPECIFIC ENEMY.  
;
;		AUX1 HAS THE NEW WORLD
;	        AUX2 HAS THE COLUMN IN THE FLAGS THAT LAUNCHED THE ENEMY.
;		IF YOU ARE RUNNING IN PARTIAL RESOLUTION MODE, YOU MUST COUNT
;		THE ACTUAL COMMAND AND NOT GIVE THE SCREEN COLUMN POSITION.
;
;		WHEN THE ENEMY IS KILLED, THE MUSIC WILL STOP AND THE
;		SCREEN WILL PAUSE FOR 2 SECONDS.  THEN THE NEW WORLD WILL
;		BE ACTIVATED.
;
;	YOU CAN USE A WORLD # OF -1 TO REQUEST END OF GAME MODE (THE SPECIAL
;	CODE).  THEN THE ROUTINE ENDSCENE WILL BE CALLED AS DESCRIBED IN
;	COMMAND 2F.
;     
;

;23 = LEFT WORLD LIMIT.	
;
;	WHEN THIS COMMAND IS SCROLLED INTO THE LEFTMOST SCREEN POSITION,
;	NO FURTHER LEFTWARDS SCROLLING WILL BE POSSIBLE IF THIS COMMAND
;	IS ENCOUNTERED SCROLLING LEFT.

;	THIS COMMAND IS PLACED ON THE ACTUAL BACKGROUND COLUMN AT WHICH
;	YOU WANT LEFTWARDS SCROLLING TO STOP.  IT "STICKS" TO THE LEFT
;	OF THE SCREEN WHEN HIT AND WILL NOT MOVE INTO A RIGHTWARDS 
;	VIEWABLE SCREEN POSITION (BUT THE SCROLLING TO THE RIGHT WILL NOT
;	BE AFFECTED).
;
;24 = RIGHT WORLD LIMIT
;
;	THIS COMMAND FUNCTIONS LIKE THE LEFT WORLD LIMIT COMMAND EXCEPT
;	THAT IT PREVENTS RIGHTWARDS MOVEMENT.

;25 = (removed 5/13/90 -KHB) HOLE IN GROUND.   IF THE HERO STANDS ON THIS COMMAND AND PUSHES DOWN
;			WITH THE JOYSTICK, HE IS MOVED BEHIND THE BACKGROUND
;			AND MOVED DOWNWARDS THE AMOUNT YOU SPECIFY IN
;			AUX BYTE 2 (IN PIXELS).  A 1 SECOND
;			DELAY FOLLOWS AND THEN THE HERO IS MOVED TO THE 
;			WORLD SPECIFIED IN AUX BYTE 1.  IF AUX BYTE 1 IS
;			ZERO, THEN THE CURRENT WORLD IS INCREMENTED AND
;			THE RESULTING VALUE IS THE NEW WORLD (NEXT WORLD).
;
;			THE MUSIC IS STOPPED WHILE THE HERO DROPS.

;26 = (removed 5/13/90 -KHB) SET SINKING AND DEATH LEVEL.  
;			AUX1=SINKING LEVEL, AUX2 = SCREEN DEATH LEVEL.  
;			THE DEATH LEVEL IS SET TO HERO'S HEIGHT
;			BELOW SINK LEVEL AT WORLD START.  SINK LEVEL IS
;			DETERMINED INITIALLY BY A TABLE IN WORLDTAB.ASM.
;
;			THE SINK LEVEL IS THE HEROS BOTTOM LEVEL AT WHICH 
;			THE HERO IS MOVED BEHIND THE BACKGROUND 
;			AUTOMATICALLY.  THE DEATH LEVEL IS THE LEVEL 
;			AT WHICH HE WILL BE KILLED.
;
;27 = (removed 5/13/90 -KHB) DRESSING ROOM.
;
;	THIS COMMAND ALLOWS THE HERO TO ENTER A DOOR AND COME OUT AS A 
;	DIFFERENT SPRITE ANIMATION WITH DIFFERENT JOYSTICK CONTROLS
;	AND REACTION TO GRAVITY AND MOMENTUM.  
;
;	SINCE THIS COMMAND USES A DOOR, IT IS PLACED IN THE COLUMN FLAGS
;	SIMILARLY TO THE OTHER DOOR COMMANDS SUCH AS 1D.  THE HERO MUST
;	STAND ON THE COMMAND AND PUSH UP WITH THE JOYSTICK.  ALSO, YOU
;	PROBABLY WANT 2 COMMANDS NEXT TO EACH OTHER TO MAKE IT EASIER TO
;	ENTER.  SET AUX BIT 1 IF THE COMMAND IS ON THE LEFTMOST OF THE 
;	2 TEXT CELLS AND RESET IT IF ITS ON THE RIGHTMOST COLUMN.
;	AUX BIT 2 IS SET IF YOU WANT TO USE THE SECOND SET OF DOOR
;	ANIMATIONS JUST AS WITH THE DOOR COMMANDS.  SET THE DON'T ERASE
;	BIT ($20) IN THE ROW BYTE TO SKIP THE DOOR ANIMATIONS ALTOGETHER.
;
;	AUX BYTE 1 SPECIFIES AN INDEX INTO THE TABLE OF ALTERNATE HEROS
;	IN WORLDTAB.  THAT TABLE CONTAINS THE INFO NEEDED TO CHANGE
;	THE HERO'S ANIMATION AND OTHER BEHAVIOR.  THE FIRST IS 0, THE SECOND
;	1, ETC.  
;
;	AUX BYTE 2 SPECIFIES AN ALTERNATE INDEX INTO THE SAME TABLE.
;
;	IF THE HERO IS NOT CURRENTLY USING THE TABLE ENTRY,
;	HE WILL BE MADE TO USE AUX BYTE 1'S ENTRY.  BUT IF HE IS ALREADY
;	USING THE SAME ENTRY HE WILL BE SWITCHED TO AUX BYTE 2'S ENTRY.
;	AT GAME START THE ENTRY # IN USE IS SET TO -1 AND IS NEVER CHANGED
;	EXCEPT BY THIS COMMAND.
;
;	THE HERO WILL WALK IN, SWITCH DATA, AND THEN WALK OUT.
;
;28 = UNUSED

;29 = UNUSED

;2A = (removed 5/23/90 -KHB) PRIZE.  STATE MACHINE SUPPORTS 6 PRIZE TYPES.  A PRIZE IS DRAWN ON
;	SCREEN AS A 1 HIGH BY 2 WIDE OBJECT.  WHEN THE HERO TOUCHES 
;	OR SHOOTS IT (IF BIT $80 SET) THE CORRECT PRIZE COUNT IS INCREMENTED.
;	ONLY 255 PER PRIZE IS SUPPORTED.  THE COMMAND IS ASSUMED LOCATED
;	IN THE LEFT SIDE OF THE PRIZE.  THE PRIZE WILL BE ERASED UNLESS
;	OTHERWISE SPECIFIED.
;
;	AUX1 HAS PRIZE THAT IS TO BE INCREMENTED (0-5).  WHEN THE PRIZE IS
;	INCREMENTED, A TABLE IN WORLDTAB.ASM (NEAR THE ENEMYPNTS TABLE)
;	TELLS IF THE PRIZE ACCUMULATION IS TO RESULT IN A FREE HERO AT
;	SOME POINT.
;
;	AUX BIT 1 CAN BE USED TO PLACE THIS COMMAND IN THE RIGHT HALF OF
;	THE PRIZE (FOR TIGHT SITUATIONS).  AUX BIT 2 CAN BE USED TO
;	SPECIFY THAT THERE IS A 2 HIGH STACK OF THE PRIZES.  IN THIS
;	CASE THE PRIZE COUNT IS DOUBLED (2 ARE AWARDED) AND A DOUBLE AREA
;	IS ERASED.
;
;	SOME PRIZES ARE ASSIGNED SPECIAL USAGES.  THE TOP 2 PRIZES ARE
;	CONSIDERED "KEYS" WHEN USED IN CONJUNCTION WITH THE LOCKED DOOR
;	COMMAND.  IF YOU WANT TO USE THAT COMMAND, THEN THE DOOR WILL
;	ONLY OPEN IF YOU HAVE THE SPECIFIED PRIZE AND OPENING THE DOOR
;	WILL DECREMENT THE PRIZE COUNT BY 1.  SEE THE DOOR COMMAND, BUT
;	JUST KEEP IN MIND THAT PRIZES 4 AND 5 ARE USABLE WITH THAT COMMAND.
;
;2B =   (removed 5/13/90 -KHB) CLEAR PATH.    WHEN THE HERO REACHES THIS COMMAND, HE WILL BE 
;	KILLED AS IF HE STEPPED ON A BOMB UNLESS HE IS SAFELY (COMPLETELY)
;	BETWEEN THE ROWS SPECIFIED IN AUX BYTE 1 AND AUX BYTE 2.  BE SURE
;	TO LEAVE A LITTLE EXTRA IN TERMS OF VISIBLE SCAN LINES SO THE 
;	PLAYER DOESN'T FEEL CHEATED.   THE ROW SPECIFIED IS A TEXT ROW,
;	NOT A PIXEL ROW.
;
;	DO NOT SET THE ROW BYTE IN THIS COMMAND.  PUT 0 THERE.

;2C =   CHANGE HORIZONTAL SCREEN LOCATION.
;
;	THIS COMMAND ALLOWS YOU TO "CONNECT" DIFFERENT PARTS OF YOUR BACKGROUND
;	TOGETHER HORIZONTALLY.  FOR INSTANCE, YOU MIGHT HAVE A SINGLE WAREHOUSE
;	BACKGROUND THAT IS USED IN 2 DIFFERENT WORLDS AND YOU WANT THEM TO
;	LOOK SOMEWHAT DIFFERENT.  YOU COULD CONNECT 2 SCREENS ON THE LEFT
;	TO 1 SCREEN ON THE RIGHT AND THEN CONNECT THAT TO THE REMAINING 
;	SCREENS IN CENTER.  THE SCREENS WON'T SCROLL SMOOTHLY INTO EACH OTHER
;	BUT YOU WILL GET AN EFFECT WHERE THE HERO WALKS OFF ONE AND INTO THE 
;	THE OTHER GIVING THE EFFECT OF CONNECTION.
;
;	AUX BYTE 1 HAS THE NEW LEFT SCREEN COLUMN WHICH TYPICALLY WILL
;	BE ON TOP OF A LEFT WORLD LIMIT COMMAND.  AUX BYTE 2 HAS 
;	THE NEW X PIXEL LOCATION TO PUT THE HERO AT.  THE Y PIXEL LOCATION
;	IS NOT CHANGED.  IF YOU SET THE ROWBYTE TO 0, THE HERO CAN EVEN BE
;	JUMPING WHEN HE HITS THIS COMMAND AND HE WILL PROPERLY FALL INTO
;	THE NEW WORLD AT THE NEW PLACE.
;

;2D = (removed 5/13/90 -KHB) CLIFF LEVEL
;	IF THE HERO TOUCHES THIS COMMAND, THE LEVEL OF SCREEN SPECIFIED
;	IN AUX BYTE 1 BECOMES THE "CLIFF" LEVEL.  IF THE HERO'S FEET EVER
;	REACH THIS LEVEL HE WILL FALL UNTIL HE HITS THE DEATH LEVEL.  HE FALLS 
;	STRAIGHT DOWNWARD.  TO CANCEL THIS COMMAND, USE A VALUE OF -1.  
;
;	WHILE FALLING, THE DEATH AND SINK LEVEL ARE USED. BE CAREFUL WHEN
;	USING THIS COMMAND BECAUSE IT DOES NOT CHECK THE DIRECTION THE
;	HERO IS TRAVELING AND YOU COULD SET UP A SITUATION WHERE THE HERO
;	COULD REVERSE DIRECTIONS AND FOIL YOUR PLANS.  USE 2 OF THESE COMMANDS
;	RIGHT NEXT TO EACH OTHER TO MAKE SURE THE LEVEL GETS SET AS YOU
;	DESIRE.  WHILE FALLING, IF THE HERO ENCOUNTERS SOLID 
;	CHARACTERS HIS FALL WILL BE ABORTED.
;
;
;2E = UNUSED
;

;2F = (removed 5/23/90 -KHB) GO INTO END OF GAME MODE.  THE NMI ROUTINE WILL STOP ITS NORMAL PROCESSING
;     	AND WILL CALL "ENDSCENE" EACH NMI.  SET AUX BYTE 1 = -1 FOR 
;	UNCONDITIONAL END OF GAME MODE.  SET AUX BYTE 1 = SOME PRIZE # (0-4)
;	TO REQUIRE AT LEAST 1 OF THAT PRIZE TO END THE GAME.
;
;	THE FIRST TIME ENDSCENE IS CALLED, SHAREDSTATE IS SET TO 0.  ENDSCENE
;	MAY USE THIS VARIABLE AS DESIRED.  ALSO, WORLD_DONE MAY BE USED.
;
;	YOU MAY ALSO ENTER END OF GAME MODE BY USING A VALUE OF -1 AS
;	THE WORLD TO GO TO WITH COMMAND 22.


;30 = (removed 5/23/90 -KHB) LAUNCH EXPLODING ENEMY 0.  SAME RULES AS FOR THE LAUNCH ENEMY
;	COMMAND $20 ARE USED EXCEPT THAT WHEN SHOT, ANY AVAILABLE ENEMY 
;	SLOTS WILL BE USED TO MAKE ENEMIES OF THE NEXT TYPE IN THE ENEMY
;	TABLE "ENEMYTAB".  THUS YOU HAVE TO PLAN YOUR TABLE CAREFULLY TO
;	MAKE USE OF THIS COMMAND.

;31 = (removed 5/23/90 -KHB) SAME AS COMMAND $21 BUT ENEMY EXPLODES.

;32 = (removed 5/23/90 -KHB) STOP SCREEN SCAN FOR ENEMIES.  WHEN ENCOUNTERED, A SCREEN SCAN FOR
;     ENEMIES WILL BE STOPPED.  IT IS ONLY STOPPED FOR THE CURRENT SCAN
;     OF THE SCREEN AND WILL BE RESUMED IF THE SCREEN SCROLLS OR IF
;     A NEW LOCATION IN THE BACKGROUND IS FOUND.  THE SCAN STOPS AT
;	THE CURRENT COLUMN.  USE THIS TO HIDE ENEMIES IN A GIVEN ROOM.
;
;	AUX BYTE 1 IS TRUE IF THE COMMAND SHOULD BE ERASED.  OTHERWISE IT
;	WILL NOT BE  ERASED.  YOU CAN USE COMMAND 33 TO ERASE IT IF THE
;	HERO GOES SOMEWHERE ELSE.

;33 = (removed 5/23/90 -KHB) ERASE WORLD FLAG.
;
;	AUX BYTE 1 SPECIFIES A FLAG COLUMN IN THE CURRENT WORLD TO ERASE.
;	ONCE DONE, THIS COMMAND WILL ALSO  ERASE ITSELF.
;
;	THE HERO MUST WALK ONTO THIS COMMAND, IT IS NOT FOUND WHEN SCANNED.

;34 = 	(removed 5/13/90 -KHB) FIRE AVAILABLE ENEMY BULLET.
;
;	THIS COMMAND IS USED TO MAKE "WALL GUNS" THAT FIRE WHEN THE HERO
;	IS IN THEIR SIGHTS.  IT USES AN AVAILABLE ENEMY BULLET IF ANY.
;	THE BULLET WILL ONLY FIRE WHEN THE HERO TOUCHES THAT COLUMN.  YOU
;	CAN QUALIFY THIS WITH A ROW NUMBER IF DESIRED.  ALSO, YOU CAN SET
;	BIT $80 TO MAKE IT FIRE IF SHOT.  
;
;	THE BULLET IMAGE USED WILL BE "WALLSHOT".  MAKE SURE THIS IS
;	VALID IN THE WORLD YOU ARE FIRING FROM.
;
;	AUX BYTE 1 HAS A BIT FLAG (LOADED INTO BULLETFLG):

;		     		;%00000001 = TRAVELING RIGHT
;		     		;%00000010 = TRAVELING LEFT
;		     		;%00000100 = TRAVELING DOWN
;		     		;%00001000 = TRAVELING UP
;		     		;%00010000 = DON'T SET THIS BIT
;		     		;%00100000 = BULLET RANGE IS DOUBLED.
;		     		;%01000000 = POWERFUL BULLET.  
;				              TAKES AWAY 4 HEALTH POINTS 
;					      INSTEAD OF 1.
;
;				;%10000000 = FAST BULLET.
;
;	AUX BYTE 2 HAS THE PIXEL ROW IN THE BACKGROUND FROM WHICH TO LAUNCH 
;	THE BULLET.
;
;	AUX BIT 1 IS SET IF YOU WANT TO LAUNCH THE BULLET 1 COLUMN TO THE
;	LEFT.   AUX BIT 2 IS SET IF YOU WANT TO LAUNCH THE BULLET 1 COLUMN
;	TO THE RIGHT.

;35 = (removed 5/23/90 -KHB) FREE HERO CELL.  IF THE HERO TOUCHES THIS POINT HE IS AWARDED A FREE
;	HERO.  THIS COMMAND FUNCTIONS THE SAME AS 97 EXCEPT THAT IT NEED
;	NOT BE SHOT, ONLY TOUCHED ONCE.  YOU MUST HAVE AUX BYTE 2.

;36 = UNUSED.
;
;37 = (removed 5/23/90 -KHB) CONDITIONAL NEW WORLD. 
;
;	THIS COMMAND ALLOWS THE HERO TO GO TO A NEW WORLD ONLY IF HE HAS
;	KILLED OR PICKED UP CETAIN ENEMIES.  
;
;	IF AUX BIT 1 IS SET, HE MUST HAVE PICKED UP ALL ENEMIES WHICH ARE 
;	MARKED AS PRIZES (BIT $10 IN SPECENEMY).
;
;	IF AUX BIT 2 IS SET, HE MUST HAVE DEFEATED ALL MUST KILL ENEMIES
;	(BIT $08 IN SPECENEMY).
;
;		AUX1 HAS THE NEW WORLD
;	        AUX2 HAS THE INSTRUCTIONS SCREEN TO POST IF HE HAS NOT
;		PICKED UP ALL PRIZES ($80-$FE).
;
;
;38 = (removed 5/23/90 -KHB) LAUNCH ENEMY IF IN UPPER HALF OF SCREEN.  SAME AS COMMAND 20 BUT
;	IT LAUNCHES ONLY IF IN THE TOP HALF OF THE CURRENT BACKGROUND.
;
;39 = (removed 5/23/90 -KHB) LAUNCH ENEMY IF IN LOWER HALF OF SCREEN.  SAME AS COMMAND 20 BUT
;	IT LAUNCHES ONLY IF IN THE LOWER HALF OF THE CURRENT BACKGROUND.
;

;3A = (removed 5/13/90 -KHB) ERASE COLUMN FLAG IF NOT SPECIFIC WORLD OR IF SPECIFIC WORLD
;
;	THIS COMMAND IS ACTIVATED AS SOON AS IT COMES ON SCREEN.  
;	AUX BYTE 2 SPECIFIES THE WORLD THAT IT MUST NOT BE IN ORDER TO
;	ACTIVATE THIS COMMAND.  AUX BYTE 1 SPECIFIES A COLUMN FLAG
;	TO ERASE IF IT IS THAT WORLD.  YOU CAN USE THIS COMMAND TO
;	"SHARE" TABLES.  JUST ERASE THE COMMANDS SPECIFIC TO A GIVEN
;	WORLD IF IT IS NOT THAT WORLD.
;
;	IF AUX BIT 1 IS SET, THEN THE SENSE IS REVERSED.  THE COMMAND
;	IS ERASED IF THE WORLD << IS >> THE SAME AS AUX BYTE 2.
;
;	BE SURE TO REMEMBER THAT IF THE COMMAND YOU ARE ERASING IS
;	ALSO A SCAN COMMAND (SUCH AS AN ENEMY LAUNCH) YOUR ERASE COMMAND
;	MUST COME FIRST IN THE SCAN SEQUENCE (TRY TO PUT IT JUST BEFORE
;	THE COMMAND).  OTHERWISE THE ENEMY WILL LAUNCH AND THEN ERASE.
;	THIS WARNING IS NOT IMPORTANT FOR COMMANDS THE HERO TOUCHES.

;3B = STAIR COMMAND
;	IF AUX BIT 1 IS JOYSTICK UP/DOWN FLAG 0-JOYSTICK MUST BE PUSHED UP
;					      1-JOYSTICK MUST BE PUSHED DOWN
;	SO YOU MUST EITHER BE PUSHING UP OR DOWN TO USE THE STAIRS
;	IF AUX BIT 1 = 0 ASSUMED GOING UP, 1=ASSUMED GOING DOWN
;	
;	IF AUX BIT 2 = 0 ASSUMED GOING LEFT, 1=ASSUMED GOING RIGHT
;
;	AUX1 HAS X NUMBER OF TIMES TO MOVE
;	AUX2 HAS Y INCREMENT VALUE
;
;	THE ROW BYTE HAS THE ROW THAT THE STAIRS SHOULD WORK ON!	

;3C = SPECIAL ELEVATOR COMMAND
;	USE AS: .byte  $3C,$80,$00,$01	
;	THEN SEARCH FOR   RMRWIDTH:     THEN ASK RTB.


	LASTFVAL = $3D	;FIRST ILLEGAL FLAG VALUE.

;********************* STATE MACHINE RAM EQUATES *********************
;
;REMEMBER!!! THESE MUST NOT OVERLAP WITH THE VALUES USED BY SUBS.ASM.
;SUBS.ASM DOES NOT USE ANY VALUES ABOVE 4FF.  THUS WE START AT 500 TO
;BE ABSOLUTELY SAFE.  IF WE NEED A FEW LOW RAM BYTES WE WILL MAKE THESE
;GROW DOWNWARDS FROM FF.

    ENEMYCTR = $90           ;Counter for "GBUGROLL"         -JGT
;                 $91
;                 $92
;                 $93
;                 $94
;                 $95

	BOUNCECT = $96		;bounce counter for enemies...
;		   97
;		   98
;		   99
;		   9A
;		   9B

    KRATSTATE = $9C          ;KRAT STATE FOR LAST MAIN BOSS

	STATSCRF = $9D		;Status screen active flag.	-KHB

	DOORDLY = $9E		;DOOR DELAY RTB 5/6/90

	BUGS_LEFT = $9F		;For kill all enemies!	-KHB

	SETUP_PTR = $A0		;FOR SETUP_HERO.  ITS A WASTE TO HAVE A
				;DEDICATED VARIABLE BUT FOR NOW ITS OK.
	INDX3C = $A2	;INDEX FOR COMMAND 3C --- RTB 4/21/90

	LASTBROW = $A3

	BULLETPATH = $A4		;CURRENT BULLET'S PATH POINTER
;		   A5

	PATHINDX = $A6 		;CURRENT LOCATION IN (BULLETPATH)

	CANTDIE = $A7		;FOR CHEAT MODE (A+SEL IN SELECT MODE).

	ENGINESND = $A8		;HERO'S SOUND.  1 WORD.
;		A9

	FREEZESHOT = $AA		;FREEZE TIME FOR CURRENT BULLET

	REVERT = $AB		;COUNTER USED FOR THE DRESSING ROOM COMMAND
				;TO DECIDE WHEN THE HERO HAS TAKEN TOO MANY
				;HITS AND MUST REVERT TO WORLDHERO.

	WORLDHERO = $AC		;HERO # WE HAD AT WORLD START FOR USE WITH
				;DRESSING ROOM COMMAND IN CASE WE NEED TO
				;REVERT.

;;	EXPLODEPROOF = $AD	;COUNT OF EXPLOSION PROOFS WE GOT FROM BOOTS

	XFRICTION = $AE		;X AND Y FRICTION FOR HERO. 
	YFRICTION = $AF		

	GOTOWORLD = $B1		;WORLD TO GO TO WHEN A MAIN ENEMY IS KILLED.
;;	MAINENEMY = $B2		;ENEMY NUMBER TO BE KILLED FOR COMMAND 22

	HORZWORLD = $B3		;IF TRUE, WORLD SCROLLS INFINITELY RIGHT
				;USING A REPEAT OF THE DATA.

;B4 UNUSED

	HEROX = $B5		;HERO'S X AND Y POSITION TO MAKE THINGS 
	HEROY = $B6		;QUICKER.

	CANTSTICK = $B7		;SET TO STOP RESTICKING TO SAME ENEMY AND
				;ALSO TO MAKE COLLISIONS WITH ENEMIES BE
				;IGNORED AFTER STICKING.
	STUCK = $B8 		;TRUE IF WE ARE STUCK TO AN ENEMY
	STICKENEMY = $B9		;ENEMY NUMBER THAT HERO IS STUCK TO

	CUR_BULLET = $BA		;CURRENT HERO BULLET'S ANIMATION
	BUL_SOUND = $BC
	LDOWN = $BE		;AMOUNT TO LAUNCH BULLET DOWN FROM TABLE
				;LAUNCH_DOWN OR OVERRIDDEN BY DRESSING ROOM.
	BPOWER = $BF		;HERO'S BULLET'S POWER FROM TABLE BULLETDATA

	HAVEBULLET = $C0  	;TRUE IF HAVE A BULLET FIRED.

	GDIS = $C1		;GRAVDIS VALUE LOADED AT WORLD BOOT OR 
				;OVERRIDDEN BY DRESSING ROOM

	GRAV = $C2		;GRAVITY VALUES LOADED AT WORLD BOOT OR
;	       C3		;OVERRIDDEN BY DRESSING ROOM

	MOML = $C4		;VALUE FROM TABLE MOMLIMIT AT WORLD START
	GMOML = $C6		;OR OVERRIDDEN BY DRESSING ROOM

;THIS TABLE OF 8 JOYSTICK MOMENTUMS MUST BE KEPT IN THIS SEQUENCE.  ALSO,
;THE JOYSTICK LOGIC TAKES ADVANTAGE OF THE LOW PAGE LOCATION BUT THIS IS
;NOT REALLY MANDITORY.

	LXMOM = $C8		;JOYSTICK LEFT X MOMENTUM FROM WORLDTAB
;		$C9		;JOYSTICK LEFT Y MOMENTUM
	RXMOM = $CA		;JOYSTICK RIGHT X MOMENTUM FROM WORLDTAB
;		$CB		;JOYSTICK RIGHT Y MOMENTUM
	UXMOM = $CC		;JOYSTICK UP X MOMENTUM FROM WORLDTAB
;		$CD		;JOYSTICK UP Y MOMENTUM
	DXMOM = $CE		;JOYSTICK DOWN X MOMENTUM FROM WORLDTAB
;		$CF		;JOYSTICK DOWN Y MOMENTUM

	ENEMYJUMP = $D0 		;SET TRUE IF ENEMY IS JUMPING.  BEHAVIOR
;                TO D5          ;BIT 01 ALLOWS JUMPING OUT OF REACH OF
				;BULLETS.

    ENEMYXMOM = $D6          ;ENEMY'S X MOMENTUM FOR ENEMIES 0-5.
;               TO DB           ;ITS THE MOMENTUM/8 AS FOR THE HERO

    ENEMYYMOM = $DC          ;ENEMY'S Y MOMENTUM FOR ENEMIES 0-5.
;               TO E1           ;ITS MOMENTUM/8 AS FOR THE HERO.

    TEMPCONV = $E2           ;TEMPORARY CONVERTING STORAGE FOR VISUAL_POINT
;                  E3
;                  E4

    BOUNCE3D = $E5          ;lowest bounce pt. for 3-D worlds
;                $E6
;                $E7
;                $E8
;                $E9
;                $EA

;EB UNUSED

	ELEVPTR = $EC		;FOR ELEVATOR DOOR PAINTING.

	FIRST_HERO = $EE		;WORD POINTER TO DATA FOR FIRST FRAME
				;OF CURRENT HERO'S ANIMATION.
	CUR_HERO = $F0		;WORD POINTER TO CURRENT HERO'S ANIMATION
	NON_PTR2 = $F2		;A SECOND NON-NMI PTR
	NMI_JMP = $F4		;PLACE TO GO FOR EACH NMI
	TEST_JMP = $F6		;INDIRECT JUMP FOR HERO FLAGS TESTING.  ALSO
				;USED AS AN INDIRECT POINTER BY SAME

	HERO_SOLID = $F8 	;SOLID VALUE TO USE FOR HERO INIT

	NON_PTR = $FA		;INDIRECT POINTER FOR NON-NMI USE

    JUMPING = $FC		;SET TRUE IF WE ARE TO JUMP (B BUTTON)

	JUMPLEFT = $FD		;AMOUNT OF POTENTIAL JUMP MOMENTUM LEFT

    BULLETROW = $FE          ;BULLET'S ACTIVE ROW 

;FF UNUSED

	WORLD_REQUEST = $500	;SET TRUE TO REQUEST A NEW WORLD.
	CURWORLD = $501		;CURRENT WORLD (VALID IF WORLD_REQUEST=0)
	WORLD_INDX = $502	;CURRENT WORLD AS AN INDEX (0,2,4,6,ETC).


	SAFEX = $503		;FOR USE BY ALL LEVELS FOR SAVING X VALUES.
	SAFEY = $504		;FOR Y VALUES.

	HEROS = $505		;NUMBER OF HEROS LEFT TO PLAY WITH

	HEROCOL = $506		;CURRENT COL WITHIN BACKGROUND WHERE HERO IS
;;		$507		;ITS A WORD TO HANDLE CONTINUOUS BACKGROUNDS.

	LASTHCOL = $508 		;LAST HEROCOL WHEN WE SET NEWHCOL.
;;		$509

	CONTS = $50A		;CONTINUES LEFT.

;;	SINKING = $50B		;POINT WHERE HERO IS CONSIDERED SINKING INTO
				;WATER OR QUICKSAND
;;	FALLEN = $50C		;POINT WHERE HERO IS CONSIDERED DEAD

	SAFEX2 = $50D		;A SECOND SAFE PLACE TO SAVE X AT NMI OR MAIN.
	SAFEY2 = $50E		;SAME FOR Y.

	NEWHCOL = $50F		;SET TRUE IF HERO MOVES ONTO A NEW
				;TEXT COLUMN OR ROW.  ITS TRUE/FALSE, DON'T
				;CHECK THE VALUE.

	TIMETICK = $510		;INCREMENTED EACH NMI TICK (1/60 SECOND)
				;AND USED BY MANY ROUTINES FOR PACING.
	INSTDELAY = $511		;INSTRUCTIONS DELAY IN 64/60 SECOND TICKS

	TEMPMAIN = $512		;TEMPORARY USE VARIABLE FOR NON-NMI

	WORLD_DONE = $513	;COUNTER TO USE WHEN PLAYING A SONG AT END
				;OF WORLD OR WHEN KILLING HERO.

	STATEX = $514		;FOR SPECIAL STATES SUCH AS ELEV_ENDING
	STATEY = $515		;TO SAVE A COUPLE VALUES FOR LATER.  OK
				;FOR ANY SPECIAL STATE TO USE.  DATA
				;GENERATED IN THE HERO FLAGS TESTING IS
				;GUARANTEED TO STAY HERE UNCHANGED TILL
				;NEEDED.

	SHAREDSTATE = $516	;FOR END OF GAME SUB OR OTHER SPECIAL STATES.

	HERODELAY = $517		;IF SET, HERO IS DELAYED FOR 1/15 SECOND PER
				;1 HERE.

	SAFEBYTE = $518		;TEMPORARY BYTE FOR USE FROM ALL LEVELS

	SAFEWORD = $519		;TEMPORARY WORD FOR USE FROM ALL LEVELS
;		 $51A

	HEALTH = $51B		;HEALTH LEFT TO PLAY WITH.  20 MAX DISPLAY

	HERODIR = $51C		;DIRECTION HERO IS FACING.  0=RIGHT =  1=LEFT.
				;BIT $80 SET IF CHANGE WAS MADE AND SPRITE
				;MUST BE UPDATED.

	TESTINDX = $51D		;INDEX PASSED TO TESTFLAGS AFTER RESOLUTION
				;CORRECTION (ITS INDEX INTO WORLDRAM)

	WORLDCOL = $51E		;COLUMN WITHIN BACKGROUND PASSED TO TESTFLAGS
;;		 $51F		;BEFORE CORRECTION FOR RESOLUTION OF 
				;THE WORLD FLAGS TABLE (WORLDRES).

	BDIST = $520		;LOADED WITH A BULLET'S MAXIMUM DISTANCE
	BETWEEN = $521		;LOADED WITH DELAY BETWEEN BULLETS
	BULFLAGS = $522		;BULLET FLAG BITS

	FLAGSLEN = $523		;NUMBER OF FLAGS IN WORLDRAM AFTER ADJUSTING
				;FOR TABLERES.

	ELEVSTATE = $524		;STATE FOR ELEVATOR AND DOOR LOGIC
	ELEVCOL = $525
	ELEVROW = $526		;ELEVATOR ROW AND COLUMN

	INDOOR = $527		;SET IF HERO IS INSIDE SOMETHING ON SCREEN
				;AND SHOULDN'T BE TRACKED BY ENEMIES.

;;	UPWORLD = $528		;FOR THE VERTICAL WORLD CONNECT
;;	DNWORLD = $529		;COMMAND.

;;	CLIFFLEVEL = $530	;SET TO THE SCREEN LEVEL BELOW WHICH THE
				;HERO IS NOT ALLOWED TO GO WITHOUT FALLING
				;TO HIS DEATH.  RESET AT WORLD START TO
				;255.  COMMAND 2D CAN CHANGE IT.

	ELEVFRAME = $531		;NEXT FRAME TO PAINT OF ELEVATOR ANIMATION

;;	ELEVWORLD = $532		;WORLD TO GO TO UP BUTTON CONDITION.  OFF=DOWN =  SET=UP.

	HEROBOT = $533		;THE CURRENT BOTTOMMOST ROW THE HERO IS ON 
				;IN THE BACKGROUND.

	HEROTOP = $534		;CURRENT TOPMOST ROW THE HERO IS ON IN
				;THE BACKGROUND.

	LASTHTOP = $535		;LAST HEROTOP WHEN WE SET NEWHCOL.

	GSQROW = $536		;BLOCK ERASE LOCATION
	GSQCOLL = $537		;LOW COL. HIGH IN GSQCOLH
	GBTROW = $538		;BOTTLE ERASE LOCATION
	GBTCOL = $539
	PRROW = $53A
	PRCOL = $53B 

	SELREQUEST = $53C	;SET TRUE IF THE USER REQUESTS THE SELECT MENU

	SAVEXBACK = $53D		;TO SAVE XBACK DURING SELECT MODE
;		53E
;		53F

    HEROHIGH = $540          ;HEIGHT OF HERO IN PIXELS

	LEFTSCROLL = $541 	;LEFTMOST PIXEL COLUMN AT WHICH HERO CAUSES
				;LEFT SCROLL.  LOADED AT WORLD START.

	RIGHTSCROLL = $542	;RIGHTMOST PIXEL COLUMN AT WHICH HERO CAUSES
				;RIGHT SCROLL.  

	BULLETX = $543		;CURRENT HERO'S X AND Y BULLET PIXEL LOCATION
	BULLETY = $544		;FOR JUMP OVER BULLET BEHAVIOR

	NEEDBLOCKS = $545	;FLAG BITS FOR BLOCK ERASE.  SEE BLOCKWRITES

	STARTCOL = $546		;LEFTMOST COLUMN OF SCREEN WITHIN
;needed:	 $547		;VIRTUAL BACKGROUND.  ALSO VALID IF CONTINUOUS
				;SCROLLING BACKGROUND 

	LOWPIXS = $548		;LOW PIXEL LOCATION IN CASE OF HORIZONTAL
				;SCREEN MODE. THEN THIS PLUS STARTCOL*8
				;GIVES BACKGROUND SCROLL.  LOW 3 BITS VALID = 
				;REST MUST BE MAINTAINED ZEROED.

    JPOWER = $549            ;JUMPING POWER LOADED AT WORLD BOOT OR
                                ;OVERRIDDEN WITH DRESSING ROOM

	WORLDGUN = $54A		;GUN TO REVERT TO IN CASE GREVERT IS TRUE
   	GREVERT = $54B		;COUNTER USED FOR THE NEW GUN PRIZES
				;TO DECIDE WHEN THE HERO HAS TAKEN TOO MANY
				;HITS AND MUST REVERT TO WORLDGUN.


	ELEVDOOR = $54C 		;USED FOR DOOR LOGIC TO INDICATE WHICH
				;DOOR TYPE TO USE.  0=OPENDOOR, 1=OPENDR2
				;-1=NONE
	HIWRITE = $54D
	LOWRITE = $54E
	WRITEWIDE = $54F		;NMI VARIABLES FOR WRITING BLOCKS TO SCREEN
	WRITEHI = $550

	ENEMY0 = $551		;-1 IF INACTIVE, NOT -1 IF ENEMY IS ACTIVE.  
;	       $552		;HAS THE ENEMY NUMBER TO USE WITH ENEMYTAB.
;    	       $553		
;    	       $554		
;    	       $555		
;              $556            

    ENEMYFLGS = $557         ;ENEMY OPTIONS. VALID ONLY IF ENEMY ACTIVE.
;                 $558         ;80H = SET IF FAST ENEMY
;                 $559         ;40H = SET IF PERMA LAUNCH ENEMY
;                 $55A         ;       
;                 $55B         ;20H = SET IF EXPLODED ENEMY MOVING OUTWARDS
;                 $55C         ;10H = SET IF ENEMY NEEDS TO BE KILLED ASAP.
				;	IT WILL BE KILLED WITH AN EXPLOSION
				;	AND NOISE AND THE WORLDRAM FLAG
				;	THAT GENERATED IT WILL BE ERASED
				;	IF NOT PERMA LAUNCH.
				;08H = SET IF NEED ENEMY GENERATION
				;04H = SET IF EXPLODING ENEMY.
				;02H = SET IF ENEMY IS NOW A PRIZE AND IS 
				;      WAITING TO GO AWAY OR BE HIT.  
				;01 = DIRECTION ENEMY IS FACING. 1=LEFT.

    ENEMYSTATE = $55D        ;ENEMY'S STATE.  
;              TO   $562       ;01 = ENEMY HAS BEEN SHOT BY HERO
;				;FE = UNUSED

    ENEMYHEALTH = $563       ;AMOUNT OF HEALTH LEFT IN THE ENEMY.
;               $564           ;LOADED FROM TABLE "ENEMYHITS".
;               $565           
;               $566           
;               $567
;               $568

    ENEMYFREEZE = $569       ;SET TRUE TO FREEZE ENEMY FOR 4/60 SECONDS
;               $56A           ;PER 1 HERE.  USED EACH TIME ITS SHOT.
;               $56B           
;               $56C           ;FREEZE IS UNIVERSALLY HONORED FOR ALL ENEMY
;               $56D           ;TYPES IF SET.  NO OTHER ENEMY LOGIC WILL
;               $56E           ;TAKE PLACE UNTIL THIS CLEARS.  -1 IS
				;UNFREEZABLE VALUE (USED FOR PERMANENT
				;PRIZES CONTAINED IN ENEMIES SUCH AS KEYS.

    LAUNCHXL = $56F          ;BACKGROUND TEXT COLUMN FROM WHICH TO LAUNCH 
;               $570           ;ENEMY LOW BYTE (WITHIN ACTUAL BACKGROUND).
;               $571           
;               $572           ;HIGH BYTE STORED IN LAUNCHXH
;               $573
;               $574

    LAUNCHY = $575           ;Y TEXT ROW LOCATION TO LAUNCH ENEMY FROM
;               $576           
;               $577           
;               $578           
;               $579
;               $57A

    ENEMYINDX = $57B         ;INDEX TO USE FOR ENEMY MOTIONS.  SET TO
;                 57C           ;0 AT ENEMY GENERATION TIME, THEN USED
;                 57D           ;AGAINST TABLES SWERVING, HOPPING, CIRCLING.
;                 57E   
;               $57F           
;               $580          

    BULLETRANGE = $581       ;ENEMY BULLET RANGE. EACH CORRESPONDS TO
;               582             ;AN ENEMY 0-4.  THIS BYTE HAS REMAINING
;               583             ;INCREMENTS THE BULLET CAN TRAVEL. 
;               584             ;0=NO BULLET ACTIVE.  THIS FLAG IS <>0 WHEN
;               585             ;THE BULLET IS IN USE.
;               586     

    BULLETFLG = $587         ;BULLET TYPE AND DIRECTION FLAGS. MEANINGS:
;               $588           ;%00000001 = TRAVELING RIGHT
;               $589           ;%00000010 = TRAVELING LEFT
;               $58A           ;%00000100 = TRAVELING DOWN
;               $58B           ;%00001000 = TRAVELING UP
;                 58C           ;%00010000 = SET IF BULLET NEEDS TO BE KILLED
;		     		;%00100000 = BULLET RANGE IS DOUBLED.
;		     		;%01000000 = POWERFUL BULLET.  TAKES AWAY 4 HEALTH POINTS INSTEAD OF 1.
;		     		;%10000000 = FAST BULLET (OFF=SLOW BULLET).  

    PRIZE0 = $58D            ;PRIZE TYPE 0
    PRIZE1 = $58E            ;PRIZE TYPE 1
    PRIZE2 = $58F            ;PRIZE TYPE 2
    PRIZE3 = $590            ;PRIZE TYPE 3
    PRIZE4 = $591            ;PRIZE TYPE 4
    PRIZE5 = $592            ;PRIZE TYPE 5

    FOLLOW_WORLD = $593      ;WORLD THAT WILL FOLLOW THE INSTRUCTIONS WORLD
				;OR ELEVATOR WORLD.

    BPAUSE = $594            ;SET TRUE WHEN START IS PRESSED TO FORCE PAUSE.

    ENEMYHIGH = $595         ;ENEMY HEIGHT FROM THE ANIMATION OR SPRITE.
;               $596           ;ITS HIS PIXEL HEIGHT.
;               $597           
;               $598           
;               $599
;               $59A

    ENEMYWIDE = $59B         ;ENEMY WIDTH FROM THE ANIMATION OR SPRITE.
;               $59C           ;ITS HIS PIXEL WIDTH.
;               $59D           
;               $59E           
;               $59F
;               $5A0

;5A1 = 2 UNUSED.

    SCCOL = $5A3             ;FOR THE BLOCKWRITES COMMAND DRAW SCENE
    SCROW = $5A4
    SCCHAR = $5A5

    HEROINIT = $5A6          ;HERO'S INIT OPTION BYTE FROM HEROTABLE

;;    DOORMSG = $5A7           ;USED TO IMPLEMENT THE INSTRUCTIONS THAT COME
				;UP AS A SPECIAL CONDITION TO USING A DOOR.
				;ITS LOADED WITH THE WORLD NUMBER TO CONTINUE
				;WITH.  ALSO USED FOR SELECT THAT BRINGS UP
				;STATUS SCREEN.

    ADJSCROLL = $5A8         ;USED TO CORRECT SCREEN AFTER MOVE TO LOCATION

    GO_BEHIND = $5A9         ;USE WITH SECRET PASSAGE LOGIC

    HLTROW = $5AA            ;FOR USE WITH NEEDBLOCKS HEALTH COMMAND.
    HLTCOL = $5AB            
    HLTCHAR = $5AC

;;  GSQCOLH = $5AD           ;HIGH COL FOR BLOCK ERASE. LOW IN GSQCOLL

    XMOMENTUM = $5AE         ;MOMENTUM OF HERO ON X AXIS (1 = RIGHTWARDS,
				;-1 = LEFTWARDS).  EACH 1/15 SECOND, HERO
				;IS MOVED THIS MUCH/8.  THE LOW 3 BITS
				;ARE SHIFTED OUT SO THAT GRAVITY AND OTHER
				;FUNCTIONS CAN AVERAGE OUT WITHOUT SUDDEN
				;BURSTS OR VIBRATIONS. 

    YMOMENTUM = $5AF         ;MOMENTUM OF HERO ON Y AXIS/8.

    FLAGBYTE = $5B0          ;THE FIRST OF 4 BYTES USED WITH THE HERO COMMAND
    ROWBYTE = $5B1           ;THAT IS CURRENTLY BEING EXECUTED.
    AUX1 = $5B2
    AUX2 = $5B3

    TOPGRAV = $5B4           ;TOPMOST SCAN LINE WHERE GRAVITY CEASES
    BOTGRAV = $5B5           ;BOTTOM SCAN LINE WHERE GRAVITY CONTINUES.
				;THESE ARE WITHIN BACKGROUND, NOT VISUALLY.

    FREEFLGS = $5B6          ;8 BITS, 1 BIT PER ALLOWED FREE HERO.
				;SET TRUE AT BOOT.  IF BIT SET, THAT FREE
				;HERO TARGET IS ENABLED.

;;  LAUNCHXH = $5B7          ;BACKGROUND TEXT COLUMN FROM WHICH TO LAUNCH 
;;              $5B8           ;ENEMY HIGH BYTE (WITHIN ACTUAL BACKGROUND).
;;              $5B9           
;;              $5BA           ;LOW BYTE STORED IN LAUNCHXL
;;              $5BB

    RIGHTLIMIT = $5BC        ;RIGHTMOST ALLOWED PIXEL LOCATION FOR
;                  $5BD        ;XBACK.
;                  $5BE

    RIGHTCOL = $5BF          ;RIGHTMOST COLUMN FOR LEFT SIDE OF SCREEN
;;               $5C0          ;1 WORD

	PASSDELAY = $5C1		;USED TO DELAY MOVE TO LOCATION COMMANDS.

	LASTWORLD = $5C2		;LAST WORLD WE WERE IN IN CASE OF CONTINUE

	NOOUT = $5C3		;WHEN TRUE, BUTTON ROUTINES WONT LET USER
				;OUT OF INSTRUCTIONS WORLD.  ITS RESET
				;WHEN ALL BUTTONS ARE UP.

	NEWGAME = $5C4		;TRUE IF NEED TO RESET POSSESSIONS FOR A NEW
				;GAME.

	GRAVROW = $5C5		;CURRENT HERO'S FEET LOCATION WITH RESPECT
				;TO GRAVITY.
				;
				;0=IN GRAVITY REGION
				;1=EXACTLY AT BORDER JUST BELOW GRAVITY. THIS
				;VALUE SHOULD ALSO BE SET IF YOU MOVE THE
				;HERO'S LOCATION OR IF YOU ARE BOOTING A 
				;WORLD (RESUME_REAL DOES THIS).
				;2=IN NON-GRAVITY REGION.

	GLOBAL_SCROLL = $5C6	;SET BY MOVEHERO WHEN SCREEN SCROLLS.  PICKED
				;UP BY SPRITES TO CORRECT THEIR MOVEMENT.

;;	DISPSCORE = $5C7		;TO MULITPLY SCORE BY 100 WITHOUT A LOT OF CODE
;;		  $5C8		

	SCORE0 = $5C9		;6 DIGIT SCORE.  ITS THE SCORE/100.
;	       $5CA		
;	       $5CB		
;	       $5CC		
;	       $5CD		
;	       $5CE		

	ENABLE_SELECT = $5CF	;USED TO ENABLE WORLD SELECT MODE WITH
				;A+B+UP ON JOYSTICK 1.

;THE FOLLOWING VARIABLES CONTROL HOW WE TREAT A BACKGROUND.  SINCE
;SUB BACKGROUNDS WITHIN BIGGER BACKGROUNDS ARE SUPPORTED, ITS IMPORTANT
;TO UNDERSTAND WHAT THE VARIABLES BELOW MEAN.  NATURALLY, THE LEFTMOST
;COLUMN OF THE ACTUAL BACKGROUND IS ALWAYS 0 AND ITS WIDTH IS THE WIDTH
;AS RECORDED IN THE BACKGROUND DEFFINITION.  WHAT WE SUPPORT IS CALLING
;SOME ARBITRARY POINT THE LEFTMOST POINT AND SETTING A NEW WIDTH.  THESE
;2 VALUES DETERMINE A "SUB" BACKGROUND WITHIN THAT BACKGROUND.  BACKFIX
;IS THE LEFTMOST POINT IN THE REAL BACKGROUND WHICH BECOMES COLUMN "0".
;WORLDWIDE IS THE WIDTH OF THE SUB BACKGROUND WHICH IS PERFECTLY ALL RIGHT
;TO BE THE SAME AS THE FULL BACKGROUND BUT MAY BE SMALLER (BUT NEVER SMALLER
;THAN 32).  

	WORLDWIDE = $5D0		;WIDTH OF CURRENT WORLD IN TEXT CELLS
;needed:	  $5D1		;ITS A WORD TO SUPPORT CONTINUOUS BACKS.

	BACKFIX = $5D2 		;THE LEFTMOST ALLOWED POSITION IN BACKGROUND
				;SO THAT WE CAN TREAT THIS AS POSITION
				;"0" IN THE BACKGROUND.  USED TO MAKE A
				;MINI BACKGROUND WITHIN A BACKGROUND.  ALL
				;MOVE TO ROUTINES MUST HONOR THIS.  WE JUST
				;NEED A BYTE HERE CAUSE REAL BACKGROUNDS
				;ARE <256 LONG.

	REFIRE = $5D3		;DISTANCE BULLET MUST GO BEFORE REFIRING.

    STOPSCAN = $5D4          ;USED BY SCANFLAGS

	TESTTOP = $5D5		;TOP TEST ROW FOR TESTFLAGS
	TESTBOT = $5D6		;BOTTOM TEST ROW
	WHATKIND = $5D7		;USED WHEN SCANNING HERO FLAGS TO SEE WHAT
				;KIND OF ACTION TO TAKE.

	NEWBCOL = $5D8		;SAME AS NEWHCOL BUT ITS FOR THE BULLET.
				;SET TRUE IF BULLET IS ON A NEW TEST COLUMN.
	BULTDIR = $5D9		;BULLET DIRECTION.  0=RIGHT, -1 =LEFT, 
				;BULLETDIST HAS INCRMENTS IT HAS TRAVELED.

	BULLETCOL = $5DA		;BULLET'S ACTIVE TEXT COLUMN.
;;		  $5DB		;ITS A WORD TO HANDLE CONTINUOUS WORLDS

	LASTBCOL = $5DC		;LAST BULLETCOL FROM LAST MOVEMENT.
;;		 $5DD

	HEROROWS = $5DE 		;HEIGHT OF CURRENT HERO IMAGE IN TEXT CELLS.
				;SET HEROHIGH FOR HEIGHT IN PIXELS.
	HEROWIDE = $5DF		;HALF WIDTH OF CURRENT HERO IN PIXELS
	HEROSCENTER = $5E0		;LAST HERO'S X LOCATION FROM FIND_HERO (CENTER)
	HEROSFEET = $5E1		;LAST HERO'S Y LOCATION WITHIN BACKGROUND.
				;ITS THE BOTTOM OF HIS FEET.

	HEROSHEAD = $5E2		;HERO'S LAST Y LOCATION WITHIN BACKGROUND.
				;ITS HIS HEAD.  

	NEEDSHOT = $5E3		;SET TRUE BY A BUTTON IF NEED TO SHOOT.

	BULLETDIST = $5E4	;DISTANCE HERO'S BULLET HAS GONE.  

	SHOTDELAY = $5E5		;DELAY TO SLOW DOWN HERO'S SHOOTING


	XINERTIA = $5E6
	YINERTIA = $5E7		;INERTIA VALUES FOR THIS WORLD

	NOXFRICTION = $5E8	;TRUE IF WE ARE TO DISABLE X FRICTION.
	NOYFRICTION = $5E9	;TRUE IF WE ARE TO DISABLE Y FRICTION.  ORED
				;TO ANY MOMENTUM CHANGE, THEN RESET WHEN THAT
				;MOMENTUM IS USED UP.

	HITSOLID = $5EA		;SET IF WE FALL INTO SOLID.

	JUMPSTART = $5EB		;SET IF WE JUMP FROM THE NO GRAVITY REGION.
				;IT HAS THE FOOT POSITION WE STARTED FROM
				;SO THAT WE CAN RETURN THERE.

	ENEMYX = $5EC		;CURRENT ENEMY X LOCATION
;		$5ED		
;		$5EE		
;		$5EF
;		$5F0
;               $5F1

    ENEMYY = $5F2            ;CURRENT ENEMY Y LOCATION(ADJUSTED FOR TOPBAR)
;		$5F3		
;		$5F4		
;               $5F5           
;               $5F6
;               $5F7

    ENEMYRAM = $5F8          ;WORLDRAM FLAG THAT LAUNCHED THE ENEMY.
;               $5F9           
;               $5FA           
;               $5FB           
;               $5FC
;               $5FD

    HERONUM = $5FE           ;CURRENT HERO FROM HEROTABLE

    DONTRELOAD = $5FF        ;USED TO CONTINUE IN THE SAME WORLD WITHOUT
				;RELOADING WORLDRAM.

	FALLDELAY = 240/4		;NMI TICKS/4 TO WAIT WHILE FALLING
	TEXTDELAY = 240/4		;DELAY AFTER PUTTING UP EACH TEXT MESSAGE.

	WORLDRAM = $600		;WORLD RAM FLAGS.  THIS 256 BYTE TABLE HOLDS
				;THE FLAG BYTES.  MAX WORLD LENGTH IS 256 COLS

	WORLDAX1 = $700		;THE AUX1 BYTES FROM THE WORLD FLAGS.

;***************** USER WRITTEN BOOT CODE ********************
;
USER_BOOT:

	LDA	#0
	STA	LASTWORLD	;RESET CONTINUE MODE STUFF
	STA	BPAUSE		;PROBABLY NOT NECESSARY TO DO THIS.
	STA	STATSCRF	;Clear status screen active flag. -KHB
	STA	ENABLE_SELECT	;DISALLOW THE DEBUG WORLD SELECT FEATURE
	STA	CANTDIE
	STA	DONTRELOAD	;DISABLE CONTINUING IN SAME WORLD FLAG
;;	STA	DOORMSG
	STA	CONTS

	LDA	#YCENTER
	STA	YADJ		;CENTER OUT BACKGROUND IN THE SCREEN
	LDA	#SPCNTR
	STA	SPYADJ

	LDA	#-1
	STA	WORLD_REQUEST	;REQUEST WORLD 0

;;	LDA	#1
;;	STA	ELEVWORLD	;FOR ERROR RECOVERY

 	RTS

;***************** USER WRITTEN NON-NMI CODE *****************
;
;WE CHANGE WORLDS ONLY HERE.

USER_MAINLINE:

	LDA	WORLD_REQUEST		;WORLD CHANGE REQUEST?
	BNE	UM5
	RTS

UM5:	CMP	#FIRST_WORLD		;WORLD THAT CHARGES CONTINUES?
	BNE	UM10
	LDA	#MAX_CONTINUES
	STA	CONTS		;IF SO, ARM CONTINUE MODE FOR MAX.

;WORLD CHANGE REQUEST.  THERE ARE 4 TYPES.  -1 = BOOT SCREEN.
;80H-FEH MEANS INSTRUCTIONS.  1-7F MEANS NEW WORLD.  

;FIRST KILL ANY OLD STUFF LYING AROUND.

UM10: 	JSR	ALLSILENCE	;TURN OFF ALL SOUNDS
	JSR	CLEAR_BOTH	;CLEAR BOTH SCREEN BUFFERS
	JSR	SPECIAL_REQUESTS	;CHECK SPECIAL REQUEST FLAGS
	JSR	KILLALL			;KILL ALL SPRITES IMMEDIATLY 

	JSR	ZEROSCROLLS
	LDA	WORLD_REQUEST				      
	STA	CURWORLD	;SET THIS TO THE CURRENT WORLD
	BPL	UM15
	CMP	#-1		;BUT BOOT SCREEN IS SPECIAL CASE
	BNE	UM17
	LDA	#0
	STA	CURWORLD	;IF BOOT SCREEN, SET TO WORLD 0.
UM15:	
	JMP	UM100

ZEROSCROLLS:			;CALL HERE TO ZERO ALL SCROLL VALUES
	LDA	#0
	STA	YBACK
	STA	YBACK+1
	STA	XBACK
	STA	XBACK+1		;ZERO BACKGROUND POINTERS
	STA	XBACK+2
	RTS

;************* ITS AN INSTRUCTIONS SCREEN INIT. *******************
;
;THE INSTRUCTIONS SCREEN LOGIC MUST NOT RESET OR CHANGE ANY VARIABLES NEEDED
;TO INITIALIZE THE LAST WORLD WE LEFT BECAUSE SOMETIMES AN INSTRUCTIONS
;SCREEN IS PUT UP TO GIVE A MESSAGE TO A USER TRYING TO EXIT THAT WORLD
;THROUGH A DOOR. FOR INSTANCE "YOU HAVE NOT COMPLETED YOUR MISSION,  YOU
;MUST DEFEAT ALL ENEMIES".  IN THIS CASE, DOORMSG IS SET TO THE WORLD NUMBER
;WE SHOULD CONTINUE WITH.

UM17:	LDA	#$20
	STA	TTYBASE		;SET TTY ROUTINES TO USE PAGE 0

	LDA	CURWORLD
	AND	#$7F			;MAKE INTO INDEX VALUE
	TAX				;MAKE INTO BYTE INDEX 
	ASL	A			;MAKE WORD INDEX
	STA	WORLD_INDX		;SAVE IT HERE

UM20:	LDA	NEXT_WORLD,X		;GET WORLD THESE INSTRUCTIONS ARE FOR
	STA	FOLLOW_WORLD		

;;	LDA	DOORMSG			;SEE IF THIS WAS A DOOR MESSAGE
;;	BEQ	UM18
;;	STA	FOLLOW_WORLD
;;	LDA	#0
;;	STA	DOORMSG
;;
;;	LDA	#-1
;;	STA	DONTRELOAD		;SET THIS AS THE NEXT WORLD, NO RELOAD

;SELECT THE CORRECT CHARACTER SET AND PALETTE.

UM18: 	LDA	#-1
	STA	NOOUT			;SET FLAG TO PREVENT GETTING OUT
					;OF INSTRUCTIONS TILL ALL BUTTONS ARE
					;UP.

	JSR	ALLOW_WRITES		;Moved from INITBACK.	-KHB
	LDA	WORLD_REQUEST
	CMP	#-2			;STATUS SCREEN?
	BEQ	UM18A
	LDA	CURWORLD
	AND	#$7F			;MAKE INTO INDEX VALUE
	TAX				;MAKE INTO BYTE INDEX 
	LDA	INST_SET,X
	JSR	SELBKSET		;SELECT THE BACKGROUND SET TO USE
	LDX	WORLD_INDX
	LDY	INST_PAL+1,X
	LDA	INST_PAL,X
	TAX
	JSR	BACKPAL			;SELECT THE PALETTE

;SET STATE FOR NMI AND PUT THE DELAY IN THERE.

UM18A:	LDA	#INSTTIME
	STA	INSTDELAY		;SET THE DELAY FOR DISPLAY OF THEM
;;	LDA	CURWORLD
;;	CMP	#WINWORLD		;SEE IF TIME SHOULD BE DIFFERENT
;;	BNE	UM19A
;;	LDA	#WINTIME
;;	STA	INSTDELAY

UM19A: 	LDX	#INST_WORLD & $FF
	LDY	#INST_WORLD >> 8
	JSR	SET_NMI			;SET FOR TIMER COUNT DOWN.

	JSR	KILLBACK		;MAKE SURE NO ACTIVE BACKGROUND 

	LDX	WORLD_INDX
	LDY	USE_INST+1,X
	LDA	USE_INST,X
	TAX
	JSR	TTY			;PUT IT UP
	JSR	PLAY_INST		;PLAY THE INSTRUCTIONS MUSIC
	JMP	UM510			;GO FINISH.
	
;ITS A WORLD INIT.  THIS ALWAYS WORKS THE SAME EXCEPT IN ONE CASE.  IF
;DONTRELOAD IS TRUE, THIS IS A CONTINUE BECAUSE THE MAN DIED AND WE
;ARE TRYING TO PRESERVE THE WORLD'S STATE.  FOR NOW, THIS ALWAYS HAPPENS
;BUT IT WOULD BE EASY TO ADD A TABLE IN WORLDTAB THAT CONTROLS WHETHER 
;WE RELOAD IF THE MAN DIES.  SEE END_HERO.  

UM100:	CMP	#0
	BEQ	UM101		;PRESERVE LASTWORLD FROM BOOT SCREEN
 	STA	LASTWORLD	;STORE IT FOR CONTINUE MODE
UM101:	ASL	A
	STA	WORLD_INDX	;SAVE AS USEABLE INDEX

;INITIALIZE THE PALETTES AND CHARACTER SETS

	JSR	ALLOW_WRITES	;Moved from INITBACK.	-KHB
	JSR	INIT_SETS

;PUT UP THE APPROPRIATE BACKGROUND.

	LDX	WORLD_INDX
	LDA	SCROLLS,X
	STA	LEFTSCROLL
	LDA	SCROLLS+1,X
	STA	RIGHTSCROLL	;GET THE SCROLL POSITIONS FOR THE BACKGROUND

	LDX	CURWORLD
	LDA	LEFT_BACK,X	;GET LEFTMOST ALLOWED BACKGROUND POSITION
	STA	BACKFIX		;SAVE FOR ROUTINES TO USE TO FIX POSITIONS

	LDA	#0
 	STA	HORZWORLD	;ASSUME NOT SPECIAL WORLD MODE
	LDX	WORLD_INDX
	LDA	BACK_WIDE+1,X	;GET WIDTH OF BACKGROUND HIGH BYTE
	PHA
	ASL	A
	ASL	A		;GET BIT $40
	PLA
	BCS	UM103		;SPECIAL MODE IF REPEATS EVERY 32
	BPL	AMM5		;SKIP IF NORMAL RESOLUTION. NEG IS SPECIAL TOO

UM103:	AND	#$3F
	STA	WORLDWIDE+1

	PHP			;SAVE THE CARRY BIT (32 WIDE) STATE
	LDA	#-1
	STA	HORZWORLD	;IF WIDTH IS 0,SPECIAL CONTINUOUS 2 WIDE WORLD
	LDA	#1
	STA	XBACK+1		;SET TO INIT THE SECOND SCREEN HALF
	JSR	WORLDBACK	;DO THE FIRST INIT OF THE BACKGROUND
	PLP			;GET BACK 32 WIDE BIT
	BCC	UM108

	JSR	COPYPAGE	;IF 32 WIDE, COPY PAGE 0 INTO PAGE 1

UM108:	LDX	WORLD_INDX
	LDA	WORLDWIDE+1	;GET BACK FIXED LENGTH

AMM5:	STA	WORLDWIDE+1	;SET FOR USE DURING RUNNING
	STA	RIGHTLIMIT+1
	LDA	BACK_WIDE,X
	STA	WORLDWIDE
	SEC
	SBC	#32
	STA	RIGHTLIMIT	;SET RIGHT SCROLL LIMIT
	STA	RIGHTCOL	;AND THE 1 BYTE VERSION TOO.
	LDA	RIGHTLIMIT+1
	SBC	#0
;;	STA	RIGHTCOL+1
	STA	RIGHTLIMIT+1
	LDA	#0
	STA	RIGHTLIMIT+2	;MAKE INTO 3 BYTE COLUMN
	ASL	RIGHTLIMIT
	ROL	RIGHTLIMIT+1
	ROL	RIGHTLIMIT+2	
	ASL	RIGHTLIMIT
	ROL	RIGHTLIMIT+1
	ROL	RIGHTLIMIT+2	
	ASL	RIGHTLIMIT
	ROL	RIGHTLIMIT+1
	ROL	RIGHTLIMIT+2	;MAKE PIXEL LOCATION

	LDA	#0
	STA	XBACK+1

	LDX	CURWORLD
	LDA	START_BACK,X	;GET THE STARTING OFFSET IN THIS WORLD
	CLC
	ADC	LEFT_BACK,X	;GET STARTING OFFSET OF THE WORLD
	JSR	SHIFTXBACK	;MAKE STARTING COLUMN INTO PIXEL COLUMN

	JSR	WORLDBACK
	JSR	MAKE_STCOL	;MAKE THE RESULTING BACKGROUND COLUMN

	LDA	HORZWORLD
	BEQ	AMM7
	JSR	KILLBACK	;FOR SPECIAL WORLD MODE, NEED KILLED BACK.

;PUT UP THE LIFE FORCE BAR ON THE RIGHT.

AMM7:	LDA	CURWORLD
	BEQ	HSCS10		;NO LIFE FORCE FOR BOOT MENU
	CMP	#WINWORLD
	BEQ	HSCS20		;No life bar for END OF GAME screen.	-KHB
	LDX	#LIFEBAR & $FF
	LDY	#LIFEBAR >> 8
	LDA	#LIFESLOT
	JSR	INITSPRT
	LDX	#BARX
	LDY	#BARY
	LDA	#LIFESLOT
	JSR	PUTSPRT		;SHOW THE LIFE FORCE BAR.

;HANDLE SPECIAL CASES.  IN THIS GAME THERE ARE NONE.

HSCS10:	JMP	UM119		;Continue.

HSCS20:

;SHOW THE FINAL SCORE ON THE END OF GAME SCREEN.	-KHB

	FSCORELC = $2000+3*32+18

	LDY	#FSCORELC >> 8
	LDX	#FSCORELC & $FF
	JSR	PUTSCORE


;************* STUFF THAT DOESN'T CHANGE IF WE CONTINUE *********
;THIS SECTION OF CODE IS SKIPPED IF THE FLAG "DONTRELOAD" IS SET INDICATING
;A CONTINUE IN THE CURRENT WORLD AFTER BEING KILLED.

UM119: 	
;------------ RESET MY DOOR DELAY RTB 5/6/90
	LDA	#0
	STA	DOORDLY		;MAKE SURE ITS ZERO TO START WITH!
;-------------------------------------------
	LDA	DONTRELOAD
	BEQ	UM121
	JMP	UM128		;SKIP IF WE ARE NOT RELOADING.

;Adjusted to expand all partial-res worlds to full res in RAM.	-KHB

UM121:	JSR     SET_BUGS                ;SET NUMBER OF BUGS LEFT ON LEVEL

	LDX	WORLD_INDX
	LDA	USE_TABLE,X
	STA	NON_PTR
	LDA	USE_TABLE+1,X
	STA	NON_PTR+1	;GET POINTER TO THE FLAGS

	LDX	WORLDWIDE	;GET WIDTH TO LOAD FOR INDEXING
	LDY	WORLDWIDE+1
	STX	FLAGSLEN	;SET NUMBER OF FLAGS
	JSR	RESADJ		;AND ADJUST ACCORDING TO RESOLUTION
	STX	TEMPMAIN	;SET FOR LOOP COUNTER

	LDX	CURWORLD	;GET THE CURRENT WORLD
	LDY	TABLERES,X	;GET THE RESOLUTION OF THIS TABLE
	LDA	TABLEP2,Y
	STA	SAFEBYTE	;Save for later.

	LDY	#0		;ZERO PLACE TO GET FROM
	LDX	#0		;AND MAKE INDEX TO WHERE TO PUT IT.
UM125: 	LDA	(NON_PTR),Y	;GET A FLAG BYTE
	STA	WORLDRAM,X 	;THESE GO HERE
	INY
	INY			;SKIP ROW BYTE, NO RAM FOR IT
	LDA	(NON_PTR),Y	;GET AUX1
	STA	WORLDAX1,X
	INY
	INX			;GO TO NEXT X INDEX

	TYA
	PHA
	LDY	SAFEBYTE
	BEQ	UM125B		;Go if full res in ROM.
	LDA	#0
UM125A:	STA	WORLDRAM,X	;Pad tables to make full res.	-KHB
	STA	WORLDAX1,X
	INX
	DEY
	BNE	UM125A		;Loop.
UM125B:	PLA
	TAY

	INY			;SKIP AUX 2, NO RAM FOR IT
	BNE	UM126
	INC	NON_PTR+1	;IF WE WRAPPED TO 0, INC POINTER
UM126:	DEC	TEMPMAIN	;SEE IF WE'VE LOADED ALL OF THEM
	BNE	UM125


;Scan command table & expand some commands.	-KHB

	LDX	CURWORLD	;GET THE CURRENT WORLD
	LDA	TABLERES,X	;GET THE RESOLUTION OF THIS TABLE
	CMP	#1
	BNE	UM126DN		;Go if not 1/2 resolution table.

	LDX	FLAGSLEN
	LDY	#0
	JSR	RESADJ		;ADJUST ACCORDING TO RESOLUTION
	STX	TEMPMAIN	;SET FOR LOOP COUNTER

	LDX	#0
UM126A:	LDA	WORLDRAM,X

	CMP	#$2C		;Transport command?
	BEQ	UM126Q
	CMP	#$3B		;Stair command?
	BEQ	UM126Q
	CMP	#$3C		;Elevator command?
	BEQ	UM126Q
	CMP	#$24		;Right stop-scroll command?
	BEQ	UM126P
	JMP	UM126Z		;Continue.

UM126P:	STA	WORLDRAM+1,X	;Put in next column.
	LDA	WORLDAX1,X
	STA	WORLDAX1+1,X	;Put AUX1 in next column also.
	LDA	#0
	STA	WORLDRAM,X	;Zap command in current column.
	STA	WORLDAX1,X
	JMP	UM126Z		;Continue.

UM126Q:	STA	WORLDRAM+1,X	;Put in next column.
	LDA	WORLDAX1,X
	STA	WORLDAX1+1,X	;Put AUX1 in next column also.

UM126Z:	INX
	TXA
	CLC
	ADC	SAFEBYTE	;Point to next command.
	TAX
	DEC	TEMPMAIN	;SEE IF WE'VE LOADED ALL OF THEM
	BNE	UM126A

UM126DN:


;SET UP THE HERO.

	LDX	CURWORLD
	LDA	USE_HERO,X	;GET HERO TO USE
	CMP	#-1
	BEQ	UM127
	STA	WORLDHERO	;MAKE THIS THE PERMANENT HERO
	JSR	SETUP_HERO	;SET HIM UP
	LDA	#0
	STA	REVERT		;ZERO THE REVERT VALUE

UM127:	LDA	#0
	STA	GOTOWORLD	;RESET COMMAND 22

;************* END OF STUFF THAT DOESN'T CHANGE IF WE CONTINUE *********

;PUT UP AND INITIALIZE AND POSITION THE HERO.  

UM128: 	LDA	#0
	STA	DONTRELOAD

;------------zero out bounce, etc. stuff-------------- JGT 05/27/90 ---

	LDA	#0
        LDY     #5
UM128L: STA     BOUNCECT,Y
        STA     BOUNCEX,Y
        STA     BOUNCEY,Y
        STA     ENEMYCTR,Y
        DEY
        BPL     UM128L

;----------------------------------------------------------------------

        JSR     INITHERO                ;INIT THE HERO SPRITE

        LDA     #0
	STA	HERODIR			;SET DIRECTION HE IS FACING TO RIGHT

	LDY	#1
	LDA	(FIRST_HERO),Y	;GET WIDTH OF ANIMATION IN CELLS
	ASL	A
	ASL	A		;MAKE HALF WIDTH IN PIXELS
	STA	HEROWIDE	;NEED HERE FOR CORRECTION ROUTINES

	LDX	WORLD_INDX
	LDY	HEROSTART+1,X
	LDA	HEROSTART,X
	TAX				;GET STARTING HERO COORDINATES

	JSR	PUTFIND		;PUT THE HERO AT ITS INITIAL POSITION

	LDX	HERO_SOLID
	BEQ	UM129
	JSR	SOLIDHERO	;SET AS SOLID BACKGROUND

UM129:	LDA	HEROINIT	;GET OPTIONS BYTE
	AND	#$30		;SEE IF ANY ALIGNMENT SPECIFIED
	BEQ	UM130
	TAX			;IF SO, THESE BITS HAVE TYPE OF ALIGNMENT
	LDA	HEROINIT
	AND	#7		;THESE HAVE SHIFT COUNT
	TAY
	LDA	#HEROSLOT
	JSR	ALIGNANIM		;MAKE HERO ALIGN TO BACKGROUND

UM130:	LDX	WORLD_INDX
	LDA	NOGRAVITY,X
	STA	TOPGRAV
	LDA	NOGRAVITY+1,X
	STA	BOTGRAV			;SET LIMITS ON GRAVITY

;;;RESET THE SINKING AND FALLEN VARIABLES THAT DETERMINE THE LEVEL AT WHICH
;;;THE HERO DIES AND SINKS.
;;
;;	LDA	#SINKLEVEL	;GET SINK LEVEL FROM TABLE
;;	STA	SINKING
;;
;;	LDA	HEROHIGH
;;	ADC	SINKING		;MAKE DEATH LEVEL FULL HEIGHT BELOW SINK
;;	BCC	UM131
;;	LDA	#$0
;;UM131:	STA	FALLEN
;;	DEC	FALLEN
	
;RESET THE STATE MACHINE AND SPECIAL FUNCTION FLAGS.

	LDA	#0
	STA	HERODELAY	;RESET THE HERO STOPPING AT FLOWER VARIABLE
	STA	BPAUSE		;UNPAUSE THE HERO
	STA	NEEDBLOCKS
	STA	PASSDELAY
	STA	XMOMENTUM
	STA	YMOMENTUM
	STA	GLOBAL_SCROLL	
	STA	NEEDSHOT
	STA	SELREQUEST
	STA	SHOTDELAY
	STA	JUMPLEFT
	STA	JUMPING
	STA	JUMPSTART
	STA	STUCK    
	STA	CANTSTICK
	STA	HAVEBULLET
;;	STA	UPWORLD
;;	STA	DNWORLD
        STA     BUMPX
        STA     BUMPX
	STA	HITFLAG				;JGT 5/9/90
	STA	INVULN

;;	LDA	#-1
;;	STA	CLIFFLEVEL

;RESET ANY MOVING SPRITE VARIABLES.

	LDA	#0
	STA	BULLETRANGE
	STA	BULLETRANGE+1
	STA	BULLETRANGE+2
	STA	BULLETRANGE+3
	STA	BULLETRANGE+4
        STA     BULLETRANGE+5

	LDA	#-1
	STA	ENEMY0
	STA	ENEMY0+1
	STA	ENEMY0+2
	STA	ENEMY0+3
	STA	ENEMY0+4
        STA     ENEMY0+5

;START ANY MUSIC WE NEED.

UM499:	JSR	PLAY_ENGINE		
	JSR	WORLD_MUSIC

;DONE.

UM500: 	JSR	SCANFLAGS	;SCAN FOR ENEMIES TO LAUNCH
	JSR	OVERDOOR	;SEE IF STARTING OUT OVER AN ENTRANCE
	BNE	UM510		;IF SO, ITS BEEN SET UP.
	JSR	RESUME_REAL	;SET STATE FOR NMI

UM510:	LDA	#0
	STA	WORLD_REQUEST	;FREE UP THE WORLD TO START RUNNING

	JSR	RESUME_NMI	;ENABLE NMI SINCE WE STOPPED IT
	RTS

;THIS ROUTINE WILL INITIALIZE THE BACKGROUND FOR THE CURRENT WORLD USING
;THE ALREADY SET VALUES FOR XBACK.

WORLDBACK:
	LDX	WORLD_INDX
	LDY	USE_BACK+1,X	;GET HIGH BYTE OF WORLD TO USE
	LDA	USE_BACK,X	;GET LOW
	TAX			;PUT WHERE NEEDED
	JSR	INITBACK
	RTS

;THIS ROUTINE WILL COPY PAGE 0 VIDEO INTO PAGE 1.  IT IS CALLED FROM
;THE NON-NMI LEVEL.  IT USES NON_PTR AND NON_PTR2 AND NONCNT.

COPYPAGE:
	JSR	ALLOW_WRITES	;DISABLE NMI AS SPECIFIED BY BACKPAL
	LDY	#$20
	STY	NON_PTR+1
	LDX	#0		;SET PLACE TO READ FROM
	STX	NON_PTR
	STX	NON_PTR2	;SET COUNT OF 4 BYTE UNITS TO COPY

CPY10:	LDX	NON_PTR
	LDY	NON_PTR+1
	JSR	ADR_VID2	;ADDRESS THE NEXT 4 BYTES
	LDA	$2007		;DISCARD FIRST READ
	LDA	$2007
	PHA
	LDA	$2007
	PHA
	LDA	$2007
	PHA
	LDA	$2007
	STA	NON_PTR2+1	;READ AND SAVE 4 BYTES
	LDX	NON_PTR
	LDA	NON_PTR+1
	CLC
	ADC	#4		;ADDRESS SECOND PAGE
	TAY
	JSR	ADR_VID2
	PLA
	TAY
	PLA
	TAX
	PLA
	STA	$2007
	STX	$2007
	STY	$2007
	LDA	NON_PTR2+1
	STA	$2007		;WRITE THE 4 OUT
	LDA	NON_PTR
	CLC
	ADC	#4
	STA	NON_PTR
	BCC	CPY20
	INC	NON_PTR+1
CPY20:	DEC	NON_PTR2
	BNE	CPY10
	RTS

RESUME_REAL:			;CALL HERE TO RESET NMI STATE TO REAL_WORLD.

	LDA	#0
	STA	INDOOR		;ALLOW ENEMIES TO TRACK US
	LDA	#1
	STA	GRAVROW			;LET CURRENT HERO POSITION BE OK

RR2:
	LDX	#REAL_WORLD & $FF
	LDY	#REAL_WORLD >> 8

SET_NMI:			;JUMP HERE TO SET NMI_JMP TO Y:X
	STY	NMI_JMP+1
	STX	NMI_JMP
DUMMYRET:
	RTS

;THIS PIECE OF CODE TURNED OUT TO BE NEEDED SEVERAL TIMES.

SHIFTXBACK:
	STA	XBACK
SHXB2:
	ASL	XBACK
	ROL	XBACK+1
	ASL	XBACK
	ROL	XBACK+1
	ASL	XBACK
	ROL	XBACK+1		;MAKE STARTING COLUMN INTO PIXEL COLUMN
	RTS

;THIS ROUTINE WILL TAKE A BULLET NUMBER FOR THE TABLE BULLETDATA AND
;GET THE BULLET INFO FROM THE TABLE BULLETDATA.  IT HONORS -1 AS NO CHANGE.
;A SHOULD HAVE THE ENTRY #

GETBULLET:
	CMP	#-1
	BEQ	GBTL20
	STA	SAFEX		;SAVE GUN IN CASE ITS A PERMANENT ONE
	TAX
	LDY	#BULLETWIDE
	JSR	MUL		;MAKE INDEX TO THE DATA
	LDA	BULLETDATA,X
	STA	CUR_BULLET
	LDA	BULLETDATA+1,X
	STA	CUR_BULLET+1

	LDA	BULLETDATA+2,X
	STA	BUL_SOUND
	LDA	BULLETDATA+3,X
	STA	BUL_SOUND+1
	
	LDA	BULLETDATA+4,X
	STA	LDOWN

	LDA	BULLETDATA+5,X
	STA	BULLETPATH
	LDA	BULLETDATA+6,X
	STA	BULLETPATH+1		;SET BULLET'S PATH

	LDA	BULLETDATA+7,X
	STA	BPOWER
	LDA	BULLETDATA+8,X
	STA	FREEZESHOT

	LDA	BULLETDATA+9,X
	STA	GREVERT			;SET UP TO REVERT BACK IF NECESSARY
	BNE	GBTL20
	LDA	SAFEX
	STA	WORLDGUN

GBTL20:	LDA	BULLETDATA+10,X
	STA	BDIST
	LDA	BULLETDATA+11,X
	STA	REFIRE
	LDA	BULLETDATA+12,X
	STA	BETWEEN
	LDA	BULLETDATA+13,X
	STA	BULFLAGS
	RTS

;THIS ROUTINE WILL PLAY THE INSTRUCTIONS WORLD MUSIC IF ANY.  IT
;SILENCES ALL SLOTS FIRST.

PLAY_INST:

	JSR	ALLSILENCE					
	LDA	WORLD_INDX
	ASL	A			;NEED *4 INDEX FOR MUSIC
	PHA
	TAX
	LDY	INST_MUSIC+1,X
	LDA	INST_MUSIC,X
	TAX
	CPY	#0
	BEQ	UMS10
	JSR	PLAY_MS1	;PLAY THIS MUSIC'S FIRST TRACK
UMS10:	PLA
	TAX
	LDY	INST_MUSIC+3,X
	LDA	INST_MUSIC+2,X
	TAX
	CPY	#0
	BEQ	UMS20
	JSR	PLAY_MSLOT2
UMS20:	RTS

;THIS ROUTINE WILL INITIALIZE THE HERO'S BULLET UNLESS ONE IS ALREADY GOING
;OR IT IS NOT A REAL WORLD.

MYSKIP:	JMP	HBULRTBZ

INIT_HBULLET:
;------------IF IN SWAMP OR WATER DON'T SHOOT!  RTB 4/18/90
	LDA	CURWORLD
	CMP	#5
	BEQ	MYSKIP
	CMP	#7
	BEQ	MYSKIP
;===== DO HAMMER HIT!
	LDA	#0
	STA	NEEDSHOT	;RESET FLAG!
	LDA 	HERONUM
	CMP	#1		;HERO #1
	BEQ	HBULRTD
	CMP	#4		;HERO #4
	BEQ	HBBLRTY	
	JMP	HBULRTA		;REMOVE HAMMER MAN?
HBBLRTY:
        LDA     #7
        BNE     HBBLRTZ
;===PUT HAMMER MAN!
HBULRTD:
	LDA	#6		;HAMMER MAN!
HBBLRTZ:
	JSR 	CHANGEHERO
;********************
	LDA	#0		;ZERO THE X MOMENTUM!
	STA	GLOBAL_SCROLL
	STA	XMOMENTUM
;**********************
	LDA	#HEROSLOT
	JSR	ANIMINDX
	LDA	ANIM_RAM+FB,X	;GET INIT OPTS
	AND	#$CF		;ERASE ANIM ON X OR Y!
	STA	ANIM_RAM+FB,X
	JMP	HBULRTBZ	;CONTINUE BULLET SHOT!
	
HBULRTV:
	CMP	#7
	BNE	HBULRTZ
	JMP	HBULRTW

;====REMOVE HAMMER MAN?
HBULRTA:
	LDA	HERONUM
	CMP	#6 		;IS HERO CURRENTLY HAMMER?
	BNE	HBULRTV
HBULRTW:
	LDA	#HEROSLOT
	JSR	ANIMINDX	;GET X INDEX
	LDA	ANIM_RAM+FR,X	;GET FRAME #
	CMP	#4  		;LAST FRAME! (4 TOTAL FRAMES)
	BCC	HBULRTZ 	;NOT FINISHED EXIT
	LDA	HERONUM
	CMP	#7
	BEQ	HBULRTB
	LDA	#1		;HERO #1
HBULRTC:
	JSR	CHANGEHERO
;********************
	LDA	#0		;ZERO THE X MOMENTUM!
	STA	GLOBAL_SCROLL
	STA	XMOMENTUM
;**********************
	LDA	#HEROSLOT
	JSR	ANIMINDX
	LDA	ANIM_RAM+FB,X
	ORA	#$20		;SET ALIGN TO X
	STA	ANIM_RAM+FB,X
	LDA	ANIM_RAM+AF,X
	AND	#$F8
	ORA	#$02		;ALLOW ONLY ANI ON X AGAIN!
	RTS
HBULRTB:
	LDA	#4	  	;HERO #4
	BNE 	HBULRTC
HBULRTZ:
	RTS	
;================= REMOVE HAMMER MAN! ===== RTB 5/6/90
REMHAM:
	LDA	HERONUM
	CMP	#6 		;IS HERO CURRENTLY HAMMER?
	BEQ	IBULRTW
	CMP	#7
	BNE	IBULRTZ
IBULRTW:
	LDA	HERONUM
	CMP	#7
	BEQ	IBULRTB
	LDA	#1		;HERO #1
IBULRTC:
	JSR	CHANGEHERO
;********************
	LDA	#0		;ZERO THE X MOMENTUM!
	STA	GLOBAL_SCROLL
	STA	XMOMENTUM
;**********************
	LDA	#HEROSLOT
	JSR	ANIMINDX
	LDA	ANIM_RAM+FB,X
	ORA	#$20		;SET ALIGN TO X
	STA	ANIM_RAM+FB,X
	LDA	ANIM_RAM+AF,X
	AND	#$F8
	ORA	#$02		;ALLOW ONLY ANI ON X AGAIN!
	RTS
IBULRTB:
	LDA	#4	  	;HERO #4
	BNE 	IBULRTC
IBULRTZ:
	RTS	
;

;=====
HBULRTBZ:
;----------------------------------------------------------
	LDA	#0
	STA	NEEDSHOT	;RESET FLAG OF NEED TO SHOOT
	LDA	BETWEEN
	STA	SHOTDELAY	;AND SET DELAY ON SHOOTING
	LDA	CURWORLD	;MUST BE A REAL WORLD
	BEQ	NS5
	BPL	NS10

NS5:	RTS			;IF BOOT OR INSTRUCTIONS, NO INIT.

NS10: 	LDA	HAVEBULLET	;SEE IF THERE'S ALREADY A BULLET
	BEQ	NS30		;IF NONE, OK TO LAUNCH
	
	LDA	BULLETDIST	;BUT IF THERE IS ONE, HAS IT GONE FAR?
	CMP	REFIRE
	BCC	NS5		;IF NOT, DON'T REFIRE
	JSR	KILLBULLET	;IF GONE FAR, ITS OK TO REFIRE.

NS30:	LDA	#0
	STA	BULLETDIST	;RESET DISTANCE IT HAS TRAVELED.
     	STA	PATHINDX	;RESET BULLET PATH INDEX

	LDA	#GUNSLOT
	JSR	SILENCE
	LDX	BUL_SOUND
	LDY	BUL_SOUND+1
	LDA	#GUNSLOT
	JSR	PLAY		;MAKE THE GUN NOISE

	LDX	CUR_BULLET
	LDY	CUR_BULLET+1
	LDA	#HEROSHOT
	JSR	INITSPRT	;SET UP THE SPRITE FOR THE BULLET
	
	LDA	HEROY
	CLC
	ADC	LDOWN		;ADD IN BULLET'S LAUNCH DOWN FROM TOP VALUE
	TAY			;MAKE Y LAUNCH POINT

	LDA	HERODIR
	AND	#$7F
	BNE	NS260		;IF FACING LEFT, DIF CALCULATIONS FOR REST

	LDA	HEROX		;ITS A RIGHT FACING BULLET.
	ADC	HEROWIDE	;MAKE LAUNCH POINT FOR THE BULLET
	BCS	NS280
	ADC	HEROWIDE	;NEED TO ADD 2 HALF WIDTHS
	BCS	NS280
	TAX	
	LDA	#0		;GET WEAPON'S SPEED
	STA	BULTDIR  	;SET BULLET AS ACTIVE, RIGHT GOING
	JMP	NS270

NS260:	LDA	HEROX			;ITS A LEFT GOING BULLET.
	SEC
	SBC	#8		;LAUNCH IMMEDIATLY TO LEFT OF HERO
	BCC	NS280		;IF SCREEN WRAP, DON'T DO IT!
	TAX

	LDA	#-1		
	STA	BULTDIR  	;SET BULLET WITH - SPEED

	STX	SAFEX
	STY	SAFEY
	LDX	#1
	LDA	#HEROSHOT
	JSR	MIRROR		;MAKE THE BULLET FACE LEFT
	LDX	SAFEX
	LDY	SAFEY

NS270: 	STX	BULLETX
	STY	BULLETY
	LDA	#HEROSHOT
	JSR	PUTSPRT		;POSITION THE BULLET FOR THE FIRST TIME

	LDA	#-1
	STA	NEWBCOL		;SET FLAG OF HAVE NEW BULLET COLUMN TO TEST
	STA	HAVEBULLET

	JSR	FIND_BULLET	;MAKE BULLETCOL.  IF BAD, RESET NEWBCOL
	JMP	NS300
NS280: 	JSR	KILLBULLET
NS300:	RTS

;THIS ROUTINE WILL FIND OUT WHERE THE HERO SPRITE IS AND WILL MAKE HEROTOP,
;HEROBOT, AND HEROCOL FROM IT.  IT ALSO SETS HEROSCENTER, HEROSFEET,
;AND HEROSHEAD.	  

FIND_HERO:

	LDA	HEROY
	STA	HEROSHEAD	;MAKE LOCATION OF HERO'S HEAD IN BACKGROUND.
	JSR	DIV8
	STA	HEROTOP		;MAKE TOP ROW OF HERO IN BACKGROUND
	CLC
	ADC	HEROROWS
	STA	HEROBOT		;MAKE BOTTOM

	LDA	HEROX
	CLC
	ADC	HEROWIDE
	STA	HEROSCENTER	;MAKE THE CENTER OF HERO LOCATION
	JSR	FIND_COL	
	STX	HEROCOL
;;	STY	HEROCOL+1	;MAKE FULL WORD REPRESENTING HERO'S ACTUAL
				;POSITION IN BACKGROUND.

	LDA	HEROHIGH
	ADC	HEROSHEAD	;MAKE HERO'S FEET LOCATION
	STA	HEROSFEET
	DEC	HEROSFEET
	RTS

;THIS SUB WILL TAKE AN X PIXEL LOCATION FOR A SPRITE AND MAKE A COLUMN
;POSITION WITHIN THE VIRTUAL BACKGROUND.  IT USES SAFEWORD.  
;X POSITION IN A ON ENTRY, THE RESULT IS IN Y:X ON EXIT.  THIS ROUTINE 
;WORKS FOR BOTH REAL AND CONTINUOUS BACKGROUNDS.

FIND_COL:
	CLC
	ADC	XBACK		;ADD LOW PIXELS OF SCROLL
	STA	SAFEWORD
	LDA	XBACK+1
	ADC	#0
	STA	SAFEWORD+1
	LDA	XBACK+2
	ADC	#0		;MAKE 3 BYTE LOCATION IN BUFFER
	LSR	A
	ROR	SAFEWORD+1
	ROR	SAFEWORD
	LSR	A
	ROR	SAFEWORD+1
	ROR	SAFEWORD
	LSR	A
	ROR	SAFEWORD+1
	ROR	SAFEWORD	;MAKE COLUMN ON SCREEN

	LDA	SAFEWORD
	SEC
	SBC	BACKFIX		;MAKE COLUMN HERO IS ON NOW
	TAX
;;	LDA	SAFEWORD+1
;;	SBC	#0
;;	TAY
	RTS

;THIS ROUTINE WILL TAKE A VIDEO RAM LOCATION AND PUT OUR SCORE THERE.
;LOAD Y:X WITH THE OFFSET IN VIDEO RAM WHICH
;SHOULD NOT CROSS A PAGE DURING THE WRITE.
;Modified to suppress zeros.	-KHB

PUTSCORE:
	JSR	ADDR_VID	;ADDRESS THE LINES WE ARE USING

	LDY	#0		;Leading zero suppression flag.
	LDX	#6
W020:	LDA	SCORE0-1,X	;GET SCORE HIGH DIGITS FIRST
	BNE	W020B		;Go if non-zero.
	CPY	#0
	BNE	W020C		;Go if not suppressing zeros.
	LDA	#$40
	JMP	W020C
W020B:	TAY
W020C:	STA	$2007
	DEX			;SHOW ALL 8 DIGITS
	BNE	W020
	LDA	#0		;Add two trailing zeros.
	STA	$2007
	STA	$2007
	RTS


;THIS ROUTINE IS CALLED BEFORE DOING ANY WORLD CHANGE REQUEST TO SEE IF
;WE NEED SOME SPECIAL FUNCTIONS ASSOCIATED WITH STARTING OVER OR CONTINUING.
;IN GENERAL:

;FOR NEW GAME   JSR ZERO_SCORE,  SET WORLD_REQUEST=FIRST_WORLD, 
;		SET NEWGAME.
;FOR CONTINUE MODE   	JSR ZERO_SCORE,  SET WORLD_REQUEST=LASTWORLD, SET
;		NEWGAME.
;			

SPECIAL_REQUESTS:

;IF NEWGAME IS TRUE, WE NEED TO PRESET HEROS, HEALTH, POSSESSIONS.  

	LDA	NEWGAME
	BEQ	SPR20

	LDA	#5
	STA	HEROS		;RESET HEROS TO 5

	LDA	#STARTHEALTH
	STA	HEALTH		;SET HEALTH TO CORRECT STARTING VALUE

	LDA	#0
	STA	PRIZE0
	STA	PRIZE1
	STA	PRIZE2
	STA	PRIZE3
	STA	PRIZE4
	STA	PRIZE5
;;	STA	EXPLODEPROOF	;RESET EXPLOSION PROOF BOOTS

	LDA	#-1
	STA	FREEFLGS

     	LDA	#0
	STA	NEWGAME

SPR20:	RTS


;Set the BUGS_LEFT variable for the current level.	-KHB
SET_BUGS:
        LDX     CURWORLD
        LDA     BUGTAB,X
        STA     BUGS_LEFT
	RTS


;THIS SUB WILL POINT FIRST_HERO TO THE FIRST FRAME OF HERO ANIMATION DATA.
;IT ALSO SETS HEROROWS AND HEROHIGH.  IT SHOULD BE CALLED WHENEVER THE 
;HERO ANIMATION IS MODIFIED.

POINT_FIRST:
	LDY	#3
	LDA	(CUR_HERO),Y
	STA	FIRST_HERO
	INY
	LDA	(CUR_HERO),Y
	STA	FIRST_HERO+1	;SET A POINTER TO THE FIRST ANIMATION FRAME
	LDY	#2
	LDA	(FIRST_HERO),Y	;GET HEIGHT OF ANIMATION IN CELLS
	STA	HEROROWS	;SAVE HEIGHT IN CELLS
	JSR	TIMES8
	STA	HEROHIGH	;SAVE HEIGHT IN PIXELS
	RTS

;THIS SUB WILL TURN A INTO A PIXEL VALUE FROM A TEXT VALUE (*8)

TIMES8:	ASL	A
	ASL	A
	ASL	A
	RTS

;THESE SUBS WILL DIVIDE A BY 8 AND 16.

DIV16:	LSR	A
DIV8:	LSR	A
	LSR	A
	LSR	A
	RTS

;THIS ROUTINE WILL SELECT THE CHARACTER SETS AND PALETTES FOR THE WORLD
;SPECIFIED IN CURWORLD AND WORLD_INDX

INIT_SETS:
	LDX	CURWORLD
	LDA	USE_BCHRS,X
	JSR	SELBKSET	;SELECT THE CHAR SET TO USE

	LDX	CURWORLD
	LDA	USE_SCHRS,X
	JSR	SELSPSET	;SELECT THE SPRITE SET TO USE

	LDX	WORLD_INDX
	LDY	USE_BPAL+1,X
	LDA	USE_BPAL,X
	TAX			;POINT TO THE BACKGROUND PALETTE TO USE
	JSR	BACKPAL

	LDX	WORLD_INDX
	LDY	USE_SPAL+1,X
	LDA	USE_SPAL,X
	TAX			;POINT TO THE SPRITE PALETTE TO USE
	JSR	SPRITEPAL
	RTS

;THIS ROUTINE WILL DISABLE NMI AND VIDEO AND ADDRESS AN AREA IN VIDEO
;MEMORY POINTED TO BY Y:X.  CALL ADR_VID2 TO SKIP CALLING ALLOW_WRITES
;WHICH WAITS FOR A SCREEN REPAINT AND IS VERY SLOW.

ADDR_VID:
	JSR	ALLOW_WRITES	;DISABLE VIDEO AND NMI

ADR_VID2:			
	LDA	$2002
	STY	$2006
	STX	$2006		;ADDRESS AS REQUESTED.
	RTS

;THIS ROUTINE WILL DISABLE NMI AND VIDEO AND CLEAR BOTH SCREEN PAGES'S
;BY FILLING WITH FA.  IT DOES NOT CHANGE THE PALETTE BYTES IN THE SCREEN
;BUFFER.  IT ALSO DOES NOT TOUCH THE LAST 2 ROWS OF PAGE 2 (TOP SCORE BAR).

;ON RETURN, VIDEO AND NMI ARE STILL DISABLED.

CLEAR_BOTH:
	JSR	ALLOW_WRITES	;DISABLE NMI AS SPECIFIED BY BACKPAL

	LDY	#$20		;ADDRESS Y

	JSR	FSTR10		;SHARE THE CODE

	LDY	#$24

FSTR10:
	LDX	#$0
	JSR	ADR_VID2	;ADDRESS THE LINES WE ARE USING

	LDX	#0		
	LDA	#$FA

FOURSTORE:
	STA	$2007
	STA	$2007
	STA	$2007
	STA	$2007
	DEX
	BNE	FOURSTORE
	RTS

ONESTORE:
	STA	$2007
	DEX	
	BNE	ONESTORE
	RTS

;THIS SUB WILL ZERO THE SCORE.

ZERO_SCORE:
	LDA	#0
	LDX	#6
ZC10:	STA	SCORE0-1,X	;CLEAR SCORE
	DEX
	BNE	ZC10
	RTS

;THIS SUB IS USED TO START THE MUSIC AT THE BEGINNING OF A WORLD OR TO
;RESTART IT IF INTERRUPTED (ELEVATOR DOOR OPENING).

WORLD_MUSIC:
	LDA	WORLD_INDX
	ASL	A			;NEED *4 INDEX FOR MUSIC
	PHA
	TAX
	LDY	USE_MUSIC+1,X
	LDA	USE_MUSIC,X
	TAX
	JSR	PLAY_MS1	;PLAY THIS MUSIC'S FIRST TRACK
	PLA
	TAX
	LDY	USE_MUSIC+3,X
	LDA	USE_MUSIC+2,X
	TAX

PLAY_MSLOT2:				;SHARED CODE ENTRY POINT TO USE MSLOT2
	LDA	#MSLOT2
	JSR	PLAY			
	RTS

PLAY_MS1:
	LDA	#MSLOT1
	JSR	PLAY		;PLAY THE END OF WORLD SONG
	RTS

;******************** NMI PROCESSING CODE **************
;
;THIS ROUTINE IS CALLED AT THE END OF EACH NMI INTERRUPT.  THERE ARE
;ONLY ABOUT 8 MILLISECONDS REMAINING TILL THE NEXT NMI WHEN THIS 
;CODE IS CALLED SO DON'T TAKE TOO LONG!
;
;THIS CODE BREAKS THE NMI PROCESSING INTO 4 CYCLES IN ORDER TO DISTRIBUTE
;PROCESSOR POWER.

USER_NMI:

	LDA	CURWORLD
	BEQ	RSP10
	LDA	#0		;ASSUME WE ARE ZEROING BASESPRITE
	LDX	TOOMANY		;SEE IF SUBS FOUND TOO MANY ON LINE
	BEQ	RSP10
	LDA	BASESPRITE
	CLC
	ADC	#$40		;ROTATE THE SPRITES IF TOO MANY ON LINE
	AND	#$C0
RSP10:	STA	BASESPRITE	;SET NEXT VALUE FOR BASE TO ROTATE PRIORITY

;INC THE TIME CLOCK.

 	INC	TIMETICK	;KEEP OUR CLOCK GOING

;IGNORE THE INTERRUPT IF PAUSE IS IN EFFECT OR IF A WORLD CHANGE IS HAPPENING
;OTHERWISE JUMP TO THE APPROPRIATE ROUTINE.

 	JSR	NOCHANGES	

	JSR	BLOCKWRITES	;WE ALWAYS DO THESE

	JMP	(NMI_JMP)

;;;***************** END OF GAME LOGIC (FOR WINNING). ********************
;;;THIS ROUTINE IS CALLED IF THE USER WINS THE GAME BY HITTING THE
;;;END SCENE COMMAND.  
;;
;;ENDSCENE:
;;	JSR	EVERY4
;;	LDA	SHAREDSTATE
;;	CMP	#10
;;	BCS	E10
;;	JSR	KILLSPRT	;GET RID OF ANY REMAINING ENEMIES OR BULLETS
;;E5:	INC	SHAREDSTATE
;;	RTS
;;
;;E10:  	CMP	#$20
;;	BEQ	E20
;;	AND	#$01
;;	BNE	E5
;;	LDX	SCCNT
;;	LDA	#$3F
;;	STA	SCBUF,X
;;	INX
;;	LDA	#$0B
;;	STA	SCBUF,X
;;	INX
;;	LDA	#1
;;	STA	SCBUF,X
;;	INX
;;	LDA	#$30
;;	STA	SCBUF,X
;;	LDA	SHAREDSTATE
;;	AND	#$04
;;	BEQ	E15
;;	LDA	#$0E
;;	STA	SCBUF,X
;;E15:	INX
;;	STX	SCCNT
;;	JSR	ALLSILENCE
;;	LDX	#BOOM & $FF
;;	LDY	#BOOM >> 8
;;	LDA	#MSLOT1
;;	JSR	PLAY
;;	JMP	E5
;;	
;;E20:	LDA	#WINWORLD
;;	JMP	BF3740		;AND END WITH A 1 SECOND DELAY


;Special state to wait at the end of a world, when last enemy is dying.
ENDLEVEL:
	DEC	WORLD_DONE
	BEQ	ENDLEV2		;Go if finished waiting for enemy to die.
	JSR	MOVESOME	;MOVE SOME ENEMIES.
	JSR	MOVEHERO	;MOVE THE HERO WITH SUPPORT FOR GRAVITY.
	RTS
ENDLEV2:
        LDA     #90
        STA     WORLD_DONE	;Set to wait 1.5 seconds.
        LDX     #DISWAIT & $FF
        LDY     #DISWAIT >> 8
        JMP     SET_NMI
	RTS


;SPECIAL STATE TO WAIT BEFORE NEXT WORLD.  LOAD WORLD_DONE WITH THE
;DELAY IN 1/60 SECOND TICKS, LOAD FOLLOW_WORLD WITH THE NEXT WORLD,
;AND POINT NMI HERE.

DISWAIT:	
	DEC	WORLD_DONE
	BNE	DSW10
DSW5:	JMP	UN10
DSW10:	RTS

;THIS ENTRY POINT FOR DISWAIT IS USED FOR COMMAND 0C TO CATCH CASE 03.  IN
;THIS CASE WE HAVE TO MOVE THE HERO RIGHT WHILE WAITING.  STATEX HAS THE
;CASE.

DIS0CWAIT:
	LDA	STATEX
	CMP	#3
	BNE	DISWAIT
	LDX	#1
	LDY	#0
	JSR	MOVE_HERO
	BNE	DSW5
	LDA	HEROX
	CMP	#-1
	BEQ	DSW5
	RTS

;SPECIAL STATE USED WHEN THE HERO IS "KILLED".  IT SIMPLY
;DELAYS FOR A FIXED AMOUNT OF TIME.  IT IS ASSUMED THAT THE HERO DYING
;ANIMATION AND MUSIC HAVE BEEN STARTED. WHEN THE TIME IS UP, 
;THE WORLD IS STARTED OVER WITH A NEW HERO IF ANY ARE LEFT. OTHERWISE THE
;GAME OVER MESSAGE IS DISPLAYED.

END_HERO:
	LDA	#0
	STA	HEALTH
	JSR	SHOWSCORE	;Update health status bar.	-KHB
	JSR	MVSOME2		;MOVE SOME ENEMIES ACCORDING TO TIMETICK

	LDA	CURWORLD
	CMP	#5
	BEQ	EH_CNT		;Continue if SWAMP level.
	LDA	#HEROSLOT
	JSR	ANIMINDX	;GET X INDEX
	LDA	ANIM_RAM+FR,X	;GET FRAME #
	CMP	#3  		;LAST FRAME! (4 TOTAL FRAMES)
	BCC	EH_CNT		;Continue if animation not done.

	LDA	HEROY
	CMP	#$D8
	BCS	EH_CNT		;Continue if hero is off screen.	-KHB
	INC	HEROY
	INC	HEROY
	INC	HEROY
	LDY	HEROY
	LDX	HEROX
	JSR	PUT_HERO	;POSITION THE DIEING HERO
EH_CNT:

	DEC	WORLD_DONE
	BNE	EBB57

;DONE MAKING THE HERO DIE.  SEE IF ANY HEROS LEFT TO PLAY WITH.

	DEC	HEROS		;WE JUST LOST ONE HERO
	BEQ	EBB60

	LDA	#STARTHEALTH
	STA	HEALTH		;SET HEALTH TO CORRECT STARTING VALUE

	LDA	CURWORLD
	STA	WORLD_REQUEST	;IF NOT, REQUEST SAME WORLD OVER AGAIN
	LDA	#-1
	STA	DONTRELOAD	;MAKE THE HERO START IN SAME CONDITION WORLD
EBB57:	RTS

;NO MORE HEROS. REQUEST THE GAME OVER SCREEN.

EBB60:	LDA	#OVER_WORLD
	STA	WORLD_REQUEST
	RTS

;ITS AN INSTRUCTIONS WORLD.  IF INSTRUCTIONS, JUST COUNT DOWN THE DELAY 
;UNTIL IT REACHES ZERO, THEN REQUEST THE NEXT WORLD.  

INST_WORLD:
	LDA	J1FLAGS
	ORA	J2FLAGS		;MAKE SURE ALL BUTTONS ARE UP
	BNE	INSW5
      	LDA	#0
	STA	NOOUT		;ALLOW BUTTONS TO LEAVE INSTRUCTIONS
INSW5:	LDA	TIMETICK
	AND	#%111111
	BNE	UN15
	DEC	INSTDELAY	;SEE IF TIME FOR NEW WORLD
	BNE	UN15

;SHARED ENDING TO GO TO FOLLOW_WORLD

UN10:	LDA	FOLLOW_WORLD	;GET WORLD TO USE NOW
	STA	WORLD_REQUEST	;AND REQUEST IT

UN15:	RTS

;THIS SUB IS USED TO PREVENT THE ENEMIES FROM BEHAVING STRANGELY 
;WHEN THE HERO IS IN A SPECIAL STATE AND TO RESET GLOBAL_SCROLL AT THAT
;TIME.

INDOORS:
	LDA	#-1
	STA	INDOOR
	LDA	#0
	STA	GLOBAL_SCROLL
	RTS

;THIS STATE IS USED TO WALK THE HERO INTO A DOOR THAT LEADS
;TO ANOTHER WORLD.  LOAD ELEVSTATE WITH 0 AND FOLLOW_WORLD WITH
;THE NEW WORLD.  SET ELEVDOOR TO 0 OR 1 FOR DOOR ANIMATION OR
;SET TO -1 FOR NONE (JUST AN ENTRANCE). SET ELEVROW AND ELEVCOL
;TO THE UPPER LEFT CORNER FOR THE DOOR ANIMATIONS IF YOU ARE USING
;THEM. POINT HERE WITH NMI_PTR.

;THIS ROUTINE WILL EVENTUALLY RETURN WITH ELEVSTATE=4.  AT THIS
;POINT IT HAS SET UP FOR THE ROUTINE PAUSE TO MAKE WORLD_REQUEST=FOLLOW_WORLD.  
;THIS FACT IS SHARED BY ENTERDOOR.   

WORLDDOOR:
	JSR	MVSOME2		;MOVE SOME ENEMIES ACCORDING TO TIMETICK
	JSR	EVERY2	
	LDA	ELEVSTATE
	BNE	WD10
WD5:	LDA	#0
	STA	ELEVFRAME
	STA	WORLD_DONE
	INC	ELEVSTATE
	LDA	ELEVSTATE

WD10:	CMP	#1		;OPENING DOORS?
	BNE	WD20
	JSR	OPENTHEM	;IF SO, DO IT.
	CMP	#0
	BEQ	WD5
	RTS

WD20:	CMP	#2		;WALKING IN?
	BNE	WD30
	JSR	WALKUP		;IF SO, DO IT
	CMP	#0
	BEQ	WD5		;WHEN DONE, GO TO NEXT STATE
	RTS

WD30:	JSR	CLOSETHEM	;FINALLY, CLOSE THE DOORS
	CMP	#0
	BNE	WD40
	INC	ELEVSTATE
	LDA	FOLLOW_WORLD
	JSR	MINI_PAUSE
WD40:	RTS	

;THIS ROUTINE WILL POP A RETURN ADDRESS AND RETURN IF IT IS NOT A 4TH NMI.

EVERY4:
	LDA	#3
EV5:	AND	TIMETICK	;ONLY ACTIVE EVERY 4
	BEQ	EV10
	PLA
	PLA
EV10:	RTS

;THIS ROUTINE WILL POP A RETURN ADDRESS AND RETURN IF IT IS NOT A 2ND NMI.

EVERY2:
	LDA	#1
	JMP	EV5

;THIS STATE WILL WAIT FOR WORLD_DONE TO COUNT TO 0 AND THEN WILL REQUEST
;FOLLOW_WORLD.    WORLD_DONE = 1/15 SECOND INCREMENTS.

PSTATE:	JSR	MVSOME2		;MOVE SOME ENEMIES ACCORDING TO TIMETICK
	JSR	EVERY4	
	DEC	WORLD_DONE
	BNE	PUS10
	LDA	FOLLOW_WORLD
	STA	WORLD_REQUEST
PUS10:	RTS

;THIS SUB WILL TAKE A AND SET IT AS THE NEXT WORLD AFTER A 4 SECOND PAUSE.
;DURING THAT TIME, ANY ENEMIES WILL CONTINUE TO MOVE AROUND.

SET_PAUSE:
	LDX	#60
SPUS10:	STX	WORLD_DONE
	STA	FOLLOW_WORLD	;NOW REQUEST THE END MESSAGE AFTER A PAUSE
	LDX	#PSTATE & $FF
	LDY	#PSTATE >> 8
	JMP	SET_NMI

MINI_PAUSE:			;CALL HERE FOR 1 SECOND PAUSE
	LDX	#15
	JMP	SPUS10

;THIS STATE IS USED TO WALK THE HERO INTO A DOOR THAT LEADS TO 
;ANOTHER PLACE ON SCREEN.  LOAD ELEVSTATE WITH 0.  LOAD STARTCOL
;WITH THE NEW LEFTMOST SCREEN X POSITION.  SET STATEX TRUE IF THIS
;SCREEN POSITION NEEDS RE-INIT AND FALSE IF IT IS JUST THE CURRENT 
;POSITION.  LOAD STATEY WITH THE NEW
;HERO'S COLUMN POSITION ON SCREEN (0-255).   LOAD ELEVDOOR WITH THE 
;DOOR ANIMATION TO BE USED, 0 OR 1 OR -1 IF NONE.   LOAD ELEVROW AND 
;ELEVCOL IF ANIMATIONS ARE TO BE USED. WHEN THE HERO GETS THERE, IF THERE 
;IS A DOOR THERE HE WILL CORRECTLY EXIT IT.  OTHERWISE HIS Y POSITION
;WILL NOT BE CHANGED.  POINT HERE WITH NMI_PTR. 

;IF THE SCREEN HAS TO BE MOVED USING INITBACK, THE ENEMIES WILL BE SET
;TO REGENERATE.

ENTERDOOR:
	LDA	#0
	STA	FOLLOW_WORLD
	JSR	WORLDDOOR	;SHARE GOING IN WITH THIS ROUTINE
	LDA	ELEVSTATE
	CMP	#4
	BEQ	ETD5
	RTS

;WE GOT INTO THE DOOR.  NOW MOVE TO THE NEW LOCATION AND IF THERE IS
;A DOOR THERE, GO OUT OF IT.

ETD5:	LDA	STATEX		;SEE IF WE NEED TO RE-INIT THE SCREEN
	BEQ	ETD10

	JSR	HIDEENEMIES	;IF WE HAVE TO MOVE, WE WILL HAVE TO REGEN
	LDA	BACKFIX
	CLC
	ADC	STARTCOL
	STA	XBACK
;;	LDA	STARTCOL+1
;;	ADC	#0
	LDA	#0
	STA	XBACK+1
	JSR	SHXB2		;SHIFT XBACK UP TO MAKE PIXEL LOCATION

	JSR	QUICKMOVE	;MOVE THE BACKGROUND THERE
	JSR	SCANFLAGS	;DO ANY FLAG SCANS NEEDED

ETD10:	LDY	HEROY		;GET HERO'S CURRENT Y
	LDX	STATEY		;AND MOVE HIS X ONLY
	JSR	PUTFIND
	JSR	MIRROR_HERO
	JSR	BF08		;PUT HERO IN FRONT

	LDX	HEROCOL
;;	JSR	HERORAM		;MAKE INDEX, ADJUSTED FOR RESOLUTION

	LDA	WORLDRAM,X	;CHECK FOR SPECIAL CASE OF END UP OVER Y VALUE
	CMP	#$1E		;Y SPECIFIER?
      	BNE	ETD15
	LDY	WORLDAX1,X
	LDX	STATEY		;IF Y SPECIFIER AT DESTINATION, USE IT.
	JSR	PUTFIND
	JMP	ETD20

ETD15:	JSR	OVERDOOR	;SEE IF OVER AN EXIT
	BEQ	ETD20
	RTS			;IF SO, WE ARE SET UP FOR IT.

;SHARED ENDING TO ZERO MOMENTUM AND RESUME A REAL WORLD.

ETD20:
;--------- MAKE SURE A LITTLE TIME BEFORE GOING INTO DOOR AGAIN!  RTB 5/6/90
	LDA	#5
	STA	DOORDLY		;SET DOOR DELAY
;----------------------------------------------------------
 	LDA	#0		;NO DOOR AT RECEIVING END
	STA	XMOMENTUM
	STA	YMOMENTUM	;ZERO MOMENTUMS
	JSR	RESUME_REAL

MIRROR_HERO:			;CALL HERE TO MIRROR ACCORDING TO HERODIR
	LDA	HERODIR
	AND	#$7F
	STA	HERODIR		;RESET POSSIBLE CHANGE BIT $80
	TAX
MIRHERO:			;CALL HERE IF YOU HAVE YOUR OWN X.
	LDA	#HEROSLOT
	JSR	MIRROR		;MAKE HERO FACE CORRECT DIRECTION
	RTS	

;THIS ROUTINE WILL MAKE A POINTER INTO WORLDRAM FROM THE HERO'S CURRENT
;COLUMN AND RETURN THAT VALUE IN X.

;;HERORAM:
;;	LDX	HEROCOL
;;	LDY	HEROCOL+1
;;	JSR	RESADJ		;MAKE INDEX, ADJUSTED FOR RESOLUTION
	RTS

;THIS ROUTINE WILL MAKE A POINTER INTO WORLDRAM FOR THE STARTING COLUMN
;ON SCREEN AND RETURN THAT VALUE IN X.

;;STARTRAM:
;;	LDX	STARTCOL
;;	LDY	STARTCOL+1
;;	JSR	RESADJ		;MAKE INDEX, ADJUSTED FOR RESOLUTION
	RTS

;THIS SUB WILL POINT X TO THE FLAG FOR THE LAST COLUMN CURRENTLY ON SCREEN.

;;LASTRAM:
;;	LDA	STARTCOL
;;	CLC
;;	ADC	#31
;;	TAX
;;	LDA	STARTCOL+1
;;	ADC	#0
;;	TAY			;MAKE Y:X POINTER TO LAST COLUMN
;;	JSR	RESADJ
	RTS

;THIS SUB WILL QUICKLY MOVE THE BACKGROUND TO A NEW XBACK POSITION.  IT
;SUPPORTS HORZWORLD MODE.  IT CALLS INITBACK FOR NORMAL CASES AND ON RETURN
;INTERRUPTS ARE DISABLED.

QUICKMOVE:
	LDA	HORZWORLD
	BEQ	ETD7
     	JSR	SCROLLWORLD	;IF SPECIAL MODE, JUST NEED THE SCROLL REGS
     	JMP	ETD8

ETD7:	LDX	WORLD_INDX
	LDY	USE_BACK+1,X	;GET HIGH BYTE OF WORLD TO USE
	LDA	USE_BACK,X	;GET LOW
	TAX			;PUT WHERE NEEDED

	JSR	ALLOW_WRITES	;Moved from INITBACK.	-KHB
	JSR	INITBACK	;RAPIDLY MOVE THERE
	
ETD8:
;;	LDA	REG2000
;;	STA	$2000		;DISABLE INTS FOLLOWING INITBACK
	JSR	MAKE_STCOL	;MAKE THE RESULTING BACKGROUND COLUMN
	RTS

;THIS SUB WILL SET THE LASTPOSITION FLAGS FOR THE HERO AND SET THE 
;CURRENT COLUMN AS A NEW ONE.

SETHFLAGS:
	LDA	#-1
	STA	NEWHCOL		;AUTOMATICALLY WE TEST ANY NEW COLUMN AT START

SETHEROS:			;CALL HERE TO RESET LAST HERO POSITION BYTES
	LDA	HEROTOP
	STA	LASTHTOP
	LDA	HEROCOL
	STA	LASTHCOL	;SET THESE FOR MOVEHERO
;;	LDA	HEROCOL+1
;;	STA	LASTHCOL+1
	RTS

;;;THIS STATE IS USED TO WALK THE HERO INTO A DOOR THAT CHANGES HIS SPRITE
;;;AND/OR GUN.   LOAD ELEVSTATE WITH 0.  LOAD ELEVDOOR WITH THE 
;;;DOOR ANIMATION TO BE USED, 0 OR 1 OR -1 IF NONE.   LOAD ELEVROW AND 
;;;ELEVCOL IF ANIMATIONS ARE TO BE USED. POINT HERE WITH NMI_PTR. 
;;
;;;IF THE SPRITES HAVE TO BE MOVED AROUND TO FIT THE NEW HERO,
;;;THE ENEMIES WILL BE SET TO REGENERATE.
;;
;;DRESSING:
;;	LDA	#0
;;	STA	FOLLOW_WORLD
;;	JSR	WORLDDOOR	;SHARE GOING IN WITH THIS ROUTINE
;;	LDA	ELEVSTATE
;;	CMP	#4
;;	BEQ	DRS5
;;	RTS

;WE GOT INTO THE DOOR.  NOW CHANGE THE HERO ANIMATION AND SET UP TO COME OUT.

DRS5: 	LDA	STATEX
	JSR	CHANGEHERO
	LDA	REVERT		;SEE IF THIS HERO CAN REVERT IF HIT TOO MUCH
	BNE	STARTEXIT
	LDA	STATEX
	STA	WORLDHERO	;IF NOT, MAKE IT THE PERMANENT ONE

STARTEXIT:			;SHARED CODE.
	LDA	#0
	STA	ELEVSTATE	;SET STATE IF OPENING DOORS
	LDX	#EXITDOOR & $FF
	LDY	#EXITDOOR >> 8	;SET STATE FOR NMI TO LEAVE THE DOOR
	JMP	SET_NMI

;THESE 3 SUBS ARE USUALLY CALLED TOGETHER SO HERE'S ONE TO SAVE MEMORY.

PUTFIND:
	JSR	PUT_HERO	;PUT THE HERO AT ITS INITIAL POSITION
	JSR	FIND_HERO	;MAKE HEROTOP, HEROBOT, HEROCOL.
	JSR	SETHFLAGS
	RTS

;THIS ROUTINE WILL TAKE A HERO NUMBER IN A AND WILL CHANGE THE
;CURRENT HERO TO USE THIS ONE.  IT ATTEMPTS TO KEEP THE NEW HERO CENTERED
;OVER THE OLD ONE.  IF NECESSARY, IT REARRANGES THE ENEMIES (IF THERE ISN'T
;ROOM FOR THE NEW HERO) BUT IT TRIES NOT TO. 

CHANGEHERO:
	STA	STATEX
	LDA	HEROX
	PHA
	LDA	HEROY
	PHA			;SAVE WHERE HERO IS
	LDA	HEROWIDE
	PHA			;AND SAVE HIS WIDTH FOR CORRECTION
	LDA	HEROROWS
	PHA

	LDA	#HEROSLOT
	JSR	KILLSPRT	;GET RID OF THE OLD SPRITE
	LDA	STATEX
	JSR	SETUP_HERO	;SET UP THE STATE MACHINE FOR THE NEW HERO

;PUT UP AND INITIALIZE AND POSITION THE HERO.  

	LDA	#0
	STA	STATEY			;SET FLAG OF DIDN'T NEED REARRANGE
	JSR	INITHERO		;INIT THE HERO SPRITE
	CMP	#0
	BEQ	DRS20
      	JSR	HIDEENEMIES		;IF CAN'T INIT, MUST REARRANGE
	INC	STATEY			;SET FLAG OF DID HAVE TO REARRANGE
	JSR	INITHERO

DRS20:	PLA
	STA	SAFEY2
	PLA
	STA	SAFEX2
	PLA
	STA	SAFEY
	PLA
	STA	SAFEX			;RESTORE STUFF WE SAVED

	LDA	SAFEX2
	SEC
	SBC	HEROWIDE		;MAKE DIFFERENCE IN WIDTH
	CLC
	ADC	SAFEX			;MOVE HERO OVER ACCORDINGLY
	TAX

	LDA	SAFEY2
	SEC
	SBC	HEROROWS		;MAKE DIF IN HEIGHT
	JSR	TIMES8			;NEED *8
	CLC
	ADC	SAFEY
	TAY
	JSR	PUTFIND

	LDX	HERO_SOLID+1	;GET HIGH SOLID REG VALUE
	BEQ	DRS30
	JSR	SOLIDHERO	;SET AS SOLID BACKGROUND

DRS30:	LDX	#$20			;FLAG OF ALIGN HORIZONTALLY
	LDY	#2			;AND WE CHANGE HERO ANIMATION EVERY 4
	LDA	#HEROSLOT
	JSR	ALIGNANIM		;MAKE HERO ALIGN TO BACKGROUND
	JSR	MIRROR_HERO		;MAKE HIM FACE THE CORRECT DIRECTION
	JSR	PLAY_ENGINE		;START THE CORRECT SOUND FOR THIS HERO

;-------- DON'T RESET HIS JUMPSTART OR JUMPING!   RTB 5/6/90
	JMP	DONTJIMP
;-------------------------------------------------
	LDA	#0
	STA	JUMPLEFT
	STA	JUMPING
	STA	JUMPSTART		;CATCH POSSIBLE SPECIAL MODE BUG
DONTJIMP:		;MY LABEL FOR NOT JUMPING!
	LDA	STATEY			;SEE IF WE HAD TO REARRANGE
	BEQ	DRS40
	JSR	SCANFLAGS
DRS40:	RTS

;THIS ROUTINE WILL TAKE A REQUESTED HERO SPECIFICATION IN THE TABLE
;HEROTABLE AND WILL SET UP THE STATE MACHINE TO USE THE NEW VALUES.  IT
;IS CALLED AT WORLD START, WHEN THE DRESSING ROOM COMMAND IS USED, AND
;WHEN THE HERO LOOSES SOME CHANGE IN STATE BECAUSE HE GOT SHOT OR HIT
;3 TIMES.

;ON ENTRY, A HAS THE DESIRED ENTRY.  ON RETURN, THE INFO IS SET UP BUT 
;THE HERO HAS NOT BEEN UPDATED ANIMATION WISE NOR HAS ENGINESLOT
;BE ACTIVATED WITH THAT HERO'S SOUND.  HERONUM IS SET TO THE
;VALUE YOU USE HERE SO IT CAN BE USED IN THE DRESSING ROOM COMMAND.

SETUP_HERO:
	STA	HERONUM
	TAX
	LDY	#DRESSWIDE
	JSR	MUL		;POINT TO THE DATA FOR THE NEW HERO
	TXA
	CLC
	ADC	#HEROTABLE & $FF	;MAKE FULL POINTER TO THE DATA
	STA	SETUP_PTR
	TYA
	ADC	#HEROTABLE >> 8
	STA	SETUP_PTR+1

	LDY	#0
	LDA	(SETUP_PTR),Y
	INY
	ORA	(SETUP_PTR),Y	;SEE IF WE NEED ANY CHANGE AT ALL
	BEQ	SEH10
	DEY
	LDA	(SETUP_PTR),Y
	STA	CUR_HERO
	INY
	LDA	(SETUP_PTR),Y
	STA	CUR_HERO+1	;IF THERE IS ONE GET IT
	JSR	POINT_FIRST	;AND SET UP FOR USERS.
	
	LDY	#1
	LDA	(FIRST_HERO),Y	;GET WIDTH OF ANIMATION IN CELLS
	ASL	A
	ASL	A		;MAKE HALF WIDTH IN PIXELS
	STA	HEROWIDE	;NEED HERE FOR CORRECTION ROUTINES

SEH10: 	LDY	#3
	LDA	(SETUP_PTR),Y
	CMP	#-1
	BEQ	SEH12
	STA	JPOWER		;SET JUMP POWER VALUE

SEH12: 	INY
	LDA	(SETUP_PTR),Y
	CMP	#-1
	BEQ	SEH13	
	STA	MOML
	INY
	LDA	(SETUP_PTR),Y
	STA	MOML+1
	INY
	LDA	(SETUP_PTR),Y
	STA	GMOML
	INY
	LDA	(SETUP_PTR),Y
	STA	GMOML+1		;SET NEW MOMENTUM LIMITS

SEH13:	LDY	#8
	LDA	(SETUP_PTR),Y
	CMP	#-1
	BEQ	SEH14
	STA	GRAV
	INY
	LDA	(SETUP_PTR),Y
	STA	GRAV+1		;SET NEW GRAVITY

SEH14:	LDY	#10
	LDA	(SETUP_PTR),Y
	CMP	#-1
	BEQ	SEH15
	STA	GDIS

SEH15:	INY
	LDA	(SETUP_PTR),Y
	STA	HERO_SOLID
	INY
	LDA	(SETUP_PTR),Y
	STA	HERO_SOLID+1

	INY
	LDA	(SETUP_PTR),Y
	STA	XFRICTION
	INY
	LDA	(SETUP_PTR),Y
	STA	YFRICTION

	INY
	LDA	(SETUP_PTR),Y
	STA	REVERT

	INY
	LDA	(SETUP_PTR),Y
	STA	ENGINESND
	INY
	LDA	(SETUP_PTR),Y
	STA	ENGINESND+1

	LDX	#0		;MAKE LOOP COUNTER TO GET MOMENTUMS
SEH16: 	INY
	LDA	(SETUP_PTR),Y
	STA	LXMOM,X		;LOAD OUR JOYSTICK CONTROL FROM THE TABLE.
	INX
	CPX	#8
	BNE	SEH16

	INY
	LDA	(SETUP_PTR),Y
	STA	XINERTIA
	INY
	LDA	(SETUP_PTR),Y
	STA	YINERTIA

	INY
	LDA	(SETUP_PTR),Y
	STA	HEROINIT	;GET HERO INIT BYTE

	LDY	#2
	LDA	(SETUP_PTR),Y	;GET BULLET TYPE
	JSR	GETBULLET
	RTS

;THIS ROUTINE WILL TAKE ENGINESND AS SET UP BY SETUP_HERO AND START THAT
;NOISE.

PLAY_ENGINE:
	LDA	#ENGINESLOT
	JSR	SILENCE
	LDX	ENGINESND
	LDY	ENGINESND+1
	LDA	#ENGINESLOT
	JSR	PLAY
	RTS
	
;THIS ENTRY POINT CAN BE CALLED TO SEE IF THE HERO IS OVER A DOOR OR
;ENTRANCE COMMAND AND THUS NEEDS TO BE WALKED OUT OF IT.  ON RETURN,
;IF A=0 AND Z THEN THE HERO WAS NOT OVER A DOOR.  IF A<>0 THEN THE
;HERO WAS OVER A DOOR AND THE STATE MACHINE HAS BEEN SET UP TO WALK
;HIM OUT.

OVERDOOR:
	LDX	HEROCOL
;;	JSR	HERORAM
	LDA	WORLDRAM,X	;GET NEW POSITION'S FLAG
;;	CMP	#$0F		;ELEVATOR DOOR?
;;	BEQ	ETD40
	CMP	#$16		;ENTRANCE?
	BEQ	ETD40
	CMP	#$1D		;DOOR?
	BEQ	ETD40
;;	CMP	#$27		;DRESSING ROOM?
;;	BEQ	ETD40
;---------------SPECIAL ELEVATOR DOOR CHECK --- RTB 4/21/90
	CMP	#$3C		;SPECIAL ELEVATOR DOOR
	BEQ	ETD40
;----------------------------------------------------------
	LDA	#0
	RTS

;THERE IS A DOOR COMMAND AT THE RECEIVING COLUMN.  WE NEED TO MOVE THE
;HERO TO THE PROPER ROW AND SET UP FOR AN EXIT.

ETD40:	JSR	BF07		;PUT HERO BEHIND
	LDY	WORLD_INDX
	LDA	USE_TABLE,Y
	STA	TEST_JMP
	LDA	USE_TABLE+1,Y
	STA	TEST_JMP+1	;MAKE POINTER TO THE FLAGS

	LDX	HEROCOL
;;	JSR	HERORAM
	LDY	#0
	JSR	RESADJ		;Adjust for resolution.	-KHB
	TXA			;GET THE INDEX WE WANT
	ASL	A
	BCC	ETD41
	INC	TEST_JMP+1
	INC	TEST_JMP+1	;THIS BIT HAS *2 VALUE
ETD41:	ASL	A
	BCC	ETD42
	INC	TEST_JMP+1	;NEED TO MAKE *4 INDEX AND KEEP TRACK OF CARRY
ETD42:	CLC
	ADC	TEST_JMP
	STA	TEST_JMP
	BCC	ETD43
	INC	TEST_JMP+1

ETD43:
;---------------SPECIAL ELEVATOR CHECK ---- RTB 4/21/90
	LDY	#0
	LDA	(TEST_JMP),Y	;GET FLAGBYTE!
	CMP	#$3C
	BNE	ETDRTBA
	LDY	INDX3C		;GET MY VARIABLE
	LDA	FLIPRMR,Y	;GET FLIP HALVE INDEX
	TAY
	LDA	RROWBYTE,Y
	LDY	#1
	JMP	ETDRTBB
ETDRTBA:
;------------------------------------------------------
 	LDY	#1		;POINT TO THE ROW BYTE IN THE COMMAND BYTES
	LDA	(TEST_JMP),Y
ETDRTBB:
	STA	ROWBYTE		;SAVE THE ROW HERE FOR CALL TO THE SUB
	JSR	ELEVPTRS	;MAKE ELEVROW, ELEVCOL, ELEVDOOR
	LDX	HEROCOL
;;	JSR	HERORAM
	LDA	WORLDRAM,X	;GET COMMAND BYTE
;;	CMP	#$0F		;SEE IF DOOR
;;	BEQ	ETD60
	CMP	#$1D		;OR THIS DOOR
	BEQ	ETD60
;--------------------SPECIAL ELEVATOR CHECK ---- RTB 4/21/90
	CMP	#$3C		;SPECIAL ELEVATOR DOOR
	BEQ	ETD60		;SAME AS 1D CMD
;-----------------------------------------------------------
;;	CMP	#$27		;DRESSING ROOM DOOR?
;;	BEQ	ETD60
	LDA	#-1
	STA	ELEVDOOR	;IF NOT A DOOR, DISABLE ANIMATION

ETD60:	LDA	ELEVROW
	JSR	TIMES8		;MAKE Y TO PUT HERO AT
	SEC
	SBC	#8		;AND BACK UP 8
	TAY	
	LDA	HEROSCENTER	
	SEC
	SBC	HEROWIDE
	BCC	ETD62
	SBC	#8
	BCS	ETD65
ETD62: 	LDA	#0
ETD65:	TAX
	JSR	PUT_HERO	;MOVE HERO TO STARTING POSITION FOR COMMAND.

	JSR	STARTEXIT	;SET NMI STATE TO LEAVING THE DOOR
	LDA	#-1
	RTS

;THIS STATE IS USED TO WALK THE HERO DOWN OR OUT OF A DOOR.  LOAD
;ELEVSTATE WITH 0.  POSITION THE HERO FOR START (8 UP AND 8 TO LEFT).
;LOAD ELEVDOOR WITH 0 OR 1 OR -1 IF NO DOORS.  SET ELEVROW AND ELEVCOL.
;WHEN DONE, RESUME_REAL WILL BE CALLED AND MOMENTUM WILL BE ZEROED.

EXITDOOR:
	JSR	MVSOME2		;MOVE SOME ENEMIES ACCORDING TO TIMETICK
	JSR	EVERY2	

	LDA	ELEVSTATE
	BNE	ED10
	JSR	BF07		;PUT HERO BEHIND ASAP

ED5:	LDA	#0
	STA	ELEVFRAME
	STA	WORLD_DONE
	INC	ELEVSTATE
	LDA	ELEVSTATE

ED10:	CMP	#1		;OPENING DOORS?
	BNE	ED20
	JSR	OPENTHEM	;IF SO, DO IT.
	CMP	#0
	BNE	ED40
;;	JSR	BF08		;MOVE IN FRONT
	JMP	ED5

ED20:	CMP	#2		;WALKING DOWN?
	BNE	ED30
	JSR	WALKDN		;IF SO, DO IT
	CMP	#0
	BEQ	ED5		;WHEN DONE, GO TO NEXT STATE
	RTS

ED30:	JSR	CLOSETHEM	;FINALLY, CLOSE THE DOORS
	CMP	#0
	BNE	ED40  
	JMP	ETD20
ED40:	RTS	


;THIS SUB WILL OPEN THE DOORS USING THE DOOR ANIMATION.  SET ELEVDOOR
;TO 0 OR 1 TO SPECIFY THE DOORS.  SET ELEVFRAME AND WORLD_DONE TO 0 THE 
;FIRST TIME YOU CALL.  SET ELEVROW AND ELEVCOL TO POINT TO THE UPPER
;LEFT CORNER OF THE PLACE TO PUT THE ANIMATION.

;ON RETURN, IF THE DOORS HAVE COMPLETED THEN A=0.  IF A<>0 THEN YOU
;SHOULD KEEP CALLING.  YOU CAN SET ELEVDOOR TO -1 TO FORCE THIS ROUTINE
;TO RETURN DONE IMMEDIATLY.

OPENTHEM:

	LDA	WORLD_DONE	;TIME TO PAINT ANOTHER?
	BNE	OPN10
	LDY	ELEVFRAME	;POINT TO NEXT FRAME TO GET
	LDA	OPENDOOR,Y
	STA	ELEVPTR
	LDA	OPENDOOR+1,Y	;GET NEXT FRAME POINTER
	STA	ELEVPTR+1
	LDA	ELEVDOOR	;SEE WHAT WE WERE SUPPOSED TO USE
	BEQ	OPN6	 	;IF OPENDOOR, OK
	CMP	#-1		;IS IT THE DISABLE ANIMATION FLAG?
	BEQ	OPN20
	LDA	OPENDR2,Y
	STA	ELEVPTR
	LDA	OPENDR2+1,Y	;GET NEXT FRAME POINTER FOR ALTERNATE ANIMATION
	STA	ELEVPTR+1

OPN6:	LDA	ELEVPTR
	ORA	ELEVPTR+1	;NULL POINTER?
	BEQ	OPN20		;IF SO, DONE PAINTING OPENING DOORS
	LDA	#ELEVTIME
	STA	WORLD_DONE
	LDA	#$40
	JSR	ORBLOCKS
	JMP	OPN11
OPN10:	DEC	WORLD_DONE
	BNE	OPN11
	INC	ELEVFRAME	
	INC	ELEVFRAME	;NEXT FRAME TO PAINT
OPN11:	LDA	#-1		;RETURN NOT DONE
	RTS
OPN20:	LDA	#0
	RTS

;THIS SUB WILL CLOSE THE DOORS USING THE DOOR ANIMATION.  SET ELEVDOOR
;TO 0 OR 1 TO SPECIFY THE DOORS.  SET ELEVFRAME AND WORLD_DONE TO 0 THE 
;FIRST TIME YOU CALL.  SET ELEVROW AND ELEVCOL TO POINT TO THE UPPER
;LEFT CORNER OF THE PLACE TO PUT THE ANIMATION.

;ON RETURN, IF THE DOORS HAVE COMPLETED THEN A=0.  IF A<>0 THEN YOU
;SHOULD KEEP CALLING.  YOU CAN SET ELEVDOOR TO -1 TO FORCE THIS ROUTINE
;TO RETURN DONE IMMEDIATLY.

CLOSETHEM:

	LDA	WORLD_DONE	;TIME TO PAINT ANOTHER?
	BNE	CLS10
	LDY	ELEVFRAME	;POINT TO NEXT FRAME TO GET
	LDA	SHUTDOOR,Y
	STA	ELEVPTR
	LDA	SHUTDOOR+1,Y	;GET NEXT FRAME POINTER
	STA	ELEVPTR+1
	LDA	ELEVDOOR	;SEE WHAT WE WERE SUPPOSED TO USE
	BEQ	CLS6	 	;IF OPENDOOR, OK
	CMP	#-1		;IS IT THE DISABLE ANIMATION FLAG?
	BEQ	CLS20
	LDA	SHUTDR2,Y
	STA	ELEVPTR
	LDA	SHUTDR2+1,Y	;GET NEXT FRAME POINTER FOR ALTERNATE ANIMATION
	STA	ELEVPTR+1

CLS6:	LDA	ELEVPTR
	ORA	ELEVPTR+1	;NULL POINTER?
	BEQ	CLS20		;IF SO, DONE PAINTING OPENING DOORS
	LDA	#ELEVTIME
	STA	WORLD_DONE
	LDA	#$40
	JSR	ORBLOCKS
	JMP	CLS11
CLS10:	DEC	WORLD_DONE
	BNE	CLS11
	INC	ELEVFRAME	
	INC	ELEVFRAME	;NEXT FRAME TO PAINT
CLS11:	LDA	#-1		;RETURN NOT DONE
	RTS
CLS20:	LDA	#0
	RTS

;THIS ROUTINE WILL WALK THE HERO UP 8 PIXELS, PUT HIM BEHIND THE
;BACKGROUND, AND THEN WALK TO THE LEFT 8.  SET ELEVFRAME AND 
;WORLD_DONE TO 0 THE FIRST TIME YOU CALL. ON RETURN, A=0 IF DONE, 
;A<>0 IF NOT DONE.  

WALKUP:	JSR	BF07		;MOVE HERO BEHIND BACKGROUND	-KHB
	LDX	#0
	LDY	#-1		;ASSUME GOING UP.
	LDA	ELEVFRAME	;GOING UP?
	BEQ	WU10		;IF SO, WE HAVE THE MOVEMENT
	LDX	#-1
	LDY	#0
WU10:	JSR	MOVE_HERO
	INC	WORLD_DONE
	LDA	WORLD_DONE
	CMP	#9
	BNE	WU15
	LDA	#0
	STA	WORLD_DONE	;ZERO FOR NEXT TIME
	INC	ELEVFRAME
	LDA	ELEVFRAME
	CMP	#2
	BEQ	WU12
;;	JSR	BF07		;MOVE HERO BEHIND WHEN DONE GOING UP
	LDX	#1
	JSR	MIRHERO		;MAKE HERO FACE LEFT TO GO LEFT
	LDA	#-1
	JMP	WU15
WU12:	LDA	#0		;DONE WHEN ELEVFRAME=2
WU15:	RTS

;THIS ROUTINE WILL WALK THE HERO RIGHT 8 PIXELS, PUT HIM IN FRONT OF THE
;BACKGROUND, AND THEN WALK DOWN 16.  SET ELEVFRAME AND 
;WORLD_DONE TO 0 THE FIRST TIME YOU CALL. ON RETURN, A=0 IF DONE, 
;A<>0 IF NOT DONE.  

WALKDN:	LDX	#0
	JSR	MIRHERO		;MAKE HERO FACE RIGHT TO GO RIGHT
	LDX	#1
	LDY	#0		;ASSUME GOING RIGHT.

	LDA	ELEVFRAME	;See if in walking right mode.
	BEQ	WKD_CNT		;Go if not.
	LDA	WORLD_DONE	;Get counts we have moved.
	CMP	#8		;If walking down, done with 8 of 16 steps?
	BCS	WKD_SKP		;Leave solid checking on for last 8 steps.
WKD_CNT:
	LDA	#$FF		;Set hero to ignore solid checking.	-KHB
	STA	HERO_NSF
WKD_SKP:
	LDA	ELEVFRAME	;GOING UP?
	BEQ	WKD10		;IF SO, WE HAVE THE MOVEMENT
	LDX	#0
	LDY	#1

WKD10:	JSR	MOVE_HERO

	LDA	#0		;Set hero to obey solid checking.	-KHB
	STA	HERO_NSF

	INC	WORLD_DONE
	LDA	WORLD_DONE	;GET COUNTS WE HAVE MOVED
	LDX	ELEVFRAME	;SEE IF IN WALKING RIGHT MODE
	BNE	WKD15
	CMP	#9		;IF WALKING RIGHT, DONE 8 STEPS?
	BNE	WKD12
	LDA	#0
	STA	WORLD_DONE	;ZERO FOR NEXT TIME
	INC	ELEVFRAME
	JSR	BF08		;MOVE HERO INFRONT WHEN DONE GOING RIGHT
WKD12:	LDA	#-1
	RTS

WKD15:	CMP	#17		;IF WALKING DOWN, DONE WITH 16 STEPS?
	BNE	WKD12
	LDA	#0		;IF SO, RETURN DONE FLAG
	RTS

;THIS SUB WILL MOVE THE HERO SPRITE AND KEEP HEROX AND HEROY UP TO DATE.
;DON'T CALL MOVESPRT DIRECTLY FOR THE HERO!

MOVE_HERO:			;JUMP HERE TO SHARE CODE.
	LDA	#HEROSLOT
	JSR	MOVESPRT	;MOVE THE HERO UP AND IN.
	BNE	MHRO10
	LDA	RESULTX
	STA	HEROX
	LDA	RESULTY
	STA	HEROY
	LDA	#0
MHRO10:	RTS

;;;THIS STATE IS FOR WHEN THE HERO IS FALLING TO HIS DEATH.
;;
;;CLIFFEND:
;;	JSR	MVSOME2		;MOVE SOME ENEMIES ACCORDING TO TIMETICK
;;	LDA	HEROSFEET
;;	CMP	SINKING		;SUNK YET?
;;	BCC	CLE10
;;	JSR	BF07		;IF SO, PUT HERO BEHIND
;;CLE10: 	LDA	HEROSFEET
;;	CMP	FALLEN		;FALLEN YET?
;;	BCS	CLE20
;;	LDX	HEROX
;;	LDY	HEROY
;;	INY
;;	JSR	PUTFIND		;KEEP HIM MOVING DOWNWARDS
;;	RTS
;;CLE20:	JSR	DIEHERO		;KILL THE HERO
;;	RTS

;;;GOING DOWN INTO A HOLE.  MOVE THE HERO THE DISTANCE IN WORLD_DONE FOR
;;;THE INCREMENTS IN STATEX AND STATEY.  OK TO SHARE WITH OTHER SPECIAL
;;;ENDINGS.  STATEX AND STATEY WILL BE MOVED EACH NMI UNTIL WORLD_DONE
;;;IS SATISFIED THEN FOLLOW_WORLD WILL BE ACTIVATED.
;;
;;HOLE_ENDING:
;;	JSR	MVSOME2		;MOVE SOME ENEMIES
;;	LDA	HEROX
;;	CLC
;;	ADC	STATEX
;;	TAX
;;	LDA	HEROY
;;	CLC
;;	ADC	STATEY
;;	TAY
;;	JSR	PUT_HERO
;;	DEC	WORLD_DONE
;;	BNE	HEN10
;;	LDA	FOLLOW_WORLD
;;	STA	WORLD_REQUEST
;;HEN10:	RTS


;IN A REAL WORLD.    THE HERO IS RUNNING AROUND EXPLORING AND SHOOTING.

;*******  MOVE THE HERO AND HERO'S BULLETS. *****
;THIS PARAGRAPH ONLY ACTIVE FOR NMI WITH LOW BITS 00.  THIS STATE
;MUST REMAIN AS STATE 0 BECAUSE THE MAINLINE SYNCS THE ENEMIES OFF IT.

REAL_WORLD:

	LDA	TIMETICK
	AND	#3
	TAX
	BNE	RWL50

	JSR	MOVESOME	;MOVE SOME ENEMIES

	LDA	SHOTDELAY	
	BEQ	RWL4
     	DEC	SHOTDELAY
	BNE	RWL5
RWL4: 	LDA	NEEDSHOT
	BEQ	RWL5
	JSR	INIT_HBULLET	;INITIALIZE THE HERO'S BULLET IF SO

RWL5: 	
;------------- CHECK TO GET OUT OF HAMMER MODE!   RTB 4/18/90
	JSR	HBULRTA		;SEE IF IN HAMMER MODE
;------------------------------------------------------------	
	LDA	NEWHCOL		;CAN'T MOVE HERO IF UNTESTED COLUMN.
	BNE	RWL7		;THIS FEATURE USED WHEN MOVING TO NEW LOCATION
				;SO THAT SCREEN BORDERS CAN BE OVERRIDDEN.
	JSR	MOVEHERO	;MOVE THE HERO WITH SUPPORT FOR GRAVITY.

RWL7: 	LDA	NEWBCOL		;IF BULLET GOT SKIPPED LAST TEST DON'T MOVE
	BNE	RWL8
	JSR	MOVEHBULLET	;MOVE THE HERO'S BULLET IF ACTIVE

RWL8:
;;	LDA	HEROSFEET	;GET RESULTING Y POSITION
;;	CMP	FALLEN
;;	BCC	RWL10
;;	JSR	DIEHERO		;IF FALLEN DOWN COMPLETELY, HE'S DEAD.
;;	RTS
;;
;;RWL10:
;;	CMP	SINKING
;;	BCC	RWL20
;;	JSR	BF07		;IF JUST SUNK A LITTLE, MOVE BEHIND
;;RWL20:
	RTS

;*********** CHECK IF FLAGS NEED TESTING. ************
;ONLY ACTIVE FOR NMI WITH LOW BITS 01.  

RWL50:	DEX
	BNE	RWL100

	JSR	MOVESOME	;MOVE SOME ENEMIES
	JSR	BULLCOL		;CHECK FOR BULLET COLLISION FROM LAST MOVE

	LDA	NEWHCOL
	BEQ	RWL60
	LDA	#0
	STA	NEWHCOL		;IF NEW COLUMN RESET FLAG TO SHOW WE DID IT
	JSR	HEROFLAGS	;AND DO THE FLAGS TEST
	LDA	NEEDBLOCKS
	BNE	RWL70		;IF WE USED SOME FLAGS, CAN'T TEST BULLET NOW
RWL60: 	LDA	NEWBCOL
	BEQ	RWL70
      	LDA	#0
	STA	NEWBCOL
	JSR	BFLAGS
RWL70:	RTS

;*********** CHECK FOR HERO OR BULLET COLLISION WITH ENEMIES ************
;ACTIVE FOR CYCLES %10.  ITS ENOUGH TO TEST ONLY 1 OR THE OTHER
;COLLISION EACH PASS.  WE ALSO MOVE THE HERO'S BULLET HERE TOO BECAUSE WE
;NEED MORE SPEED THAN 8 PER MOVEMENT TICKS AND WE WOULD MISS A COLUMN IF WE
;DID MORE THAN 8 EACH TICK.

RWL100:	DEX	
	BEQ	RWL100A
	JMP	RWL200

RWL100A:
	LDA	NEWBCOL		;IF BULLET GOT SKIPPED LAST TEST DON'T MOVE
	BNE	RWL106A
	JSR	MOVEHBULLET	;MOVE THE HERO'S BULLET IF ACTIVE

 	LDA	NEWBCOL
	BEQ	RWL106A
      	LDA	#0
	STA	NEWBCOL
	JSR	BFLAGS

RWL106A:
	LDA	CANTSTICK
	BEQ	RWL107
       	DEC	CANTSTICK		;COUNT DOWN ENEMY STICKING LOCK

RWL107:	JSR	MOVESOME

	LDA	#HEROSLOT
	JSR	COLLISION		;RETURNS SLOT OR -1 IF NO COLLISION
RWL107A:CPX	#HEROSLOT		;SEE IF THE COLLISION DOESN'T MATTER
	BCC	RWL108
RWL107B:JMP	RWL120

RWL108: CPX     #6              ;IF BULLET, ITS A GOOD COLLISION
	BCS	RWL101A		

	LDA	STUCK    
	BEQ	RWL109		;SKIP IF NOT STUCK TO ANY ENEMIES
	CPX	STICKENEMY	;SEE IF ITS THE ENEMY WE ARE STUCK TO
	BEQ	RWL109A		;IF SO, SKIP THIS ONE

RWL109:	LDY	ENEMY0,X	;GET ENEMY INDEX
	LDA	SPECENEMY,Y	;SEE IF TYPE THAT HAS TO COLLIDE WITH FEET
	AND	#$20
	BEQ	RWL101A		;IF NOT, TAKE NORMAL ACTION
	LDA	JUMPING
	ORA	JUMPSTART
	BNE	RWL109A		;CAN'T BE IN JUMP MODE
	LDA	ENEMYY,X	;GET ENEMIES Y LOCATION
	ADC	ENEMYHIGH,X	;MAKE BOTTOM OF ENEMY POINTER
	CMP	HEROSFEET	;SEE IF HEROS FEET FALL IN RANGE
	BCS	RWL101A		;IF SO, ITS A GOOD COLLISION
RWL109A:	
	LDA	#HEROSLOT
	JSR	NEXT_COLLISION	;LAST COLLISION WAS TO BE IGNORED.  TRY AGAIN.
	JMP	RWL107A

;WE COLLIDED WITH AN ENEMY OR AN ENEMIES BULLET.  WE ALWAYS GET RID
;OF THE BULLETS.  WE FREEZE THE ENEMY.  WE TAKE SOME DAMAGE.

RWL101A:
        CPX     #6              ;SEE IF BULLET
	BCC	RWL102		;SKIP IF NOT

	DEX
	DEX
	DEX
	DEX
        DEX
	DEX			;MAKE CORRECTED INDEX
	JSR	KILLEBULLET	;GET RID OF THE BULLET
	TAX			;PUT HEALTH DAMAGE INTO LOOP COUNTER

	TXA
	PHA
	JSR	CHECKFLASH	;MAKE THE HERO FLASH AND CHECK FOR REVERSION
	PLA
	TAX

RWL101:	DEC	HEALTH
	BEQ	RWL115
	DEX
	BNE	RWL101		;LOWER HEALTH BY REQUIRED AMOUNT
	JMP	RWL110		;IF WE DIDN'T DIE, MAKE THE SOUND.

RWL115:	JMP	DIEHERO		;IF NO MORE HEALTH, KILL THE HERO

;AN ENEMY HIT US.  WE DON'T CARE IF HE IS FROZEN.  BUT IF HE ISN'T, WE MUST
;TAKE SOME DAMAGE.  IF HE IS AN EXPLODER, WE MUST DIE.  IF HES AN IMMEDIATE
;PRIZE, WE JUST TAKE THE POINTS.

RWL102:	
	STX	SAFEBYTE	;SAVE ENEMY NUMBER

	LDA	ENEMYFREEZE,X	;SEE IF ENEMY IS FROZEN
	BEQ	RWL103

;ENEMY IS FROZEN.  SEE IF ITS A PRIZE.

	LDA	ENEMYFLGS,X
	AND	#2		;PRIZE?
	BNE	RWL114
	JSR	STICK		;SEE IF WE SHOULD STICK TO THE ENEMY
	JMP	RWL120		;SKIP IF NOT.

;ENEMY IS NOW A PRIZE OR IT CONTAINS A PRIZE ALWAYS.

RWL114:	LDA	ENEMYHEALTH,X	;LOWER IT ENOUGH TO GUARANTEE GOING
	JSR	LOWER_ENEMY	;MAKE IT GO AWAY IF SO
	LDX	SAFEBYTE
	LDY	ENEMY0,X	;GET ENEMY NUMBER
	LDA	ENEMYPNTS,Y
	BMI	RWL114A
	LDA	SAFEBYTE
	JSR	KILLSPRT	;GET RID OF THE ENEMY SO WE CAN SHOW THEM
 	JSR	SHOWPOINTS	;IF JUST POINTS, SHOW THEM
	JSR	EXE80		;AND DO WHAT EX_ENEMY WOULD HAVE DONE.
	JMP	PRIZENOISE

RWL114A:
	CMP	#-1		;IS IT A HEALTH?
	BNE	RWL102A
	JSR	INCHEALTH
	JMP	PRIZENOISE

RWL102A:
;;	CMP	#-2
;;	BNE	RWL102B
;;	INC	EXPLODEPROOF
;;	INC	EXPLODEPROOF	;IF EXPLOSION PROOF BOOTS, ADD TO PROTECTION
;;	INC	EXPLODEPROOF
;;	JMP	PRIZENOISE
;;
;;RWL102B:
	CMP	#-3		;FREE HERO?
	BNE	RWL102C
	JMP	INCHERO		;IF SO, AWARD IT

RWL102C:
	CMP	#$A0	      	;NEW GUN?
	BCC	RWL102D
	AND	#$0F		;IF SO, GET TYPE
	JSR	GETBULLET
	JMP	PRIZENOISE

RWL102D:
	AND	#$7F
	TAX
	JMP	INCPRIZE

;ENEMY IS NOT FROZEN.  SEE IF ITS AN IMMEDIATE POINTS OR PRIZE AWARDER
;OR IF ITS AN EXPLODER.

RWL103: JSR     CRAT    ;SEE IF KRAT COLLISION
        BNE     CKRT20
        JMP     RWL120          ;IF KRAT IN HURT MODE, IGNORE COLLISION

CKRT20: LDA     BEHAVIOR,Y      ;SEE IF EXPLODING ENEMY
        AND     #%10010000
	BEQ	RWL103A

;ITS AN EXPLODER.  SEE IF IT JUST LOWERS HEALTH BY AN AMOUNT OR IF IT
;KILLS COMPLETELY.

	PHA

;-----------------------CHECK FOR TEMP. INVULNERABILITY --- JGT 05/09/90
	LDA	INVULN
	BEQ	RWL103JT
	PLA
	JMP	RWL120		;SKIP IF INVULNERABLE.
RWL103JT:
;-----------------------------------------------------------------------

	LDA	ENEMYHEALTH,X	;LOWER IT ENOUGH TO GUARANTEE GOING
	JSR	LOWER_ENEMY	;WE ALWAYS GET RID OF EXPLODERS
;---------------------fix so exploders don't bounce-----JGT 05/27/90----
        LDX     SAFEBYTE
        LDA     #0
        STA     BOUNCECT,X
;-----------------------------------------------------------------------
	PLA
	BMI	RWL106		;IF KILLS HERO, GO DO IT

	JSR	CHECKFLASH	;MAKE THE HERO FLASH AND CHECK FOR REVERSION
	LDA	HEALTH
	SEC
	SBC	#LOWHEALTH	;LOWER BY EXPLODER'S AMOUNT
	BCS	RWL103D
	LDA	#0
RWL103D:
	STA	HEALTH		;PUT BACK RESULTING AMOUNT
	BNE	RWL110
	JMP	DIEHERO		;IF NO MORE HEALTH, KILL THE HERO

;ITS AN IMMEDIATE PRIZE OR POINTS.

RWL103A:
	LDA	SPECENEMY,Y
	AND	#$10		;IMMEDIATE PRIZE OR POINTS?
	BEQ	RWL104
	JMP	RWL114

;NOTHING SPECIAL ABOUT THE ENEMY.  WE DO DAMAGE TO THE HERO ONLY.

RWL104:	

	JSR	STICK		;SEE IF WE SHOULD STICK TO THE ENEMY

;;      LDA     STUCK           ;IF STUCK TO ENEMY, NO HARM
;;      BNE     RWL120          
;;
;;-JGT 05/15/90

;------------------------------------------------------- JGT 05/09/90 -----
; CHECK FOR TEMP. INVULNERABILITY FIRST...

	LDA	INVULN
	BNE	RWL120		;INVULNERABLE, SO SKIP

;------------------------------------------------------- JGT 05/09/90 -----
; CHECK FOR "PLATFORM"(19), "FAUCET"(71) OR "CASE"(76)--- THESE
; ENEMY TYPES CAN NOT DAMAGE YOU...

	LDX	SAFEBYTE
	LDA	ENEMY0,X	;GET ENEMY TYPE
	CMP	#19		;PLATFORM?
        BEQ     RWL104JT
        CMP     #71             ;FAUCET?
        BEQ     RWL104JT
        CMP     #76             ;CASE?
        BNE     RWL105JT

RWL104JT:
        JMP     RWL109A         ;check for next collision

RWL105JT:

;----- GOT ONE THAT'S DEADLY...DO NORMAL CODE -----------------------------


	LDX	SAFEBYTE

;--------------------------------------------- JGT 05/15/90 --------------
; Don't freeze if enemy type is 2, 3, or 36 (falling bug).

        LDA     #0
        STA     ENEMYFREEZE,X  ;assume no freeze

        LDA     ENEMY0,X
        CMP     #2
        BEQ     FREEZEJT
        CMP     #3
        BEQ     FREEZEJT
        CMP     #36
        BEQ     FREEZEJT

        LDA     BOUNCECT,X
        BNE     FREEZEJT        ;skip if "bouncing" or "falling"
;-------------------------------------------------------------------------

	LDA	#BUMPFREEZE
	STA	ENEMYFREEZE,X	;FREEZE THE ENEMY TO GIVE US A CHANCE

FREEZEJT:       ;-JGT 05/15/90

	JSR	CHECKFLASH	;MAKE THE HERO FLASH AND CHECK FOR REVERSION

	DEC	HEALTH
	BNE	RWL110
RWL106:	JMP	DIEHERO		;IF NO MORE HEALTH, KILL THE HERO

RWL110:	JSR	STOP_HSOUND		;MAKE A COLLISION SOUND.
	LDX	#HEROHITS & $FF
	LDY	#HEROHITS >> 8
	JSR	PLAY_HSOUND

;AGAIN CHECK OUR BULLET TO SEE IF IT HIT SOMETHING.



;----- JGT 05/09/90 -------------------------------------------------------
;
;PLEASE LEAVE "RWL120" AS ENTRY TO SKIP COLLIDE WITH HERO BUT DO REST...
;

RWL120:				
;--------------------------------------------------------------------------


;THIS ROUTINE WILL CHECK OUR BULLET TO SEE IF IT HIT SOMETHING.

BULLCOL:
	LDA	HAVEBULLET  	;SEE IF WE HAVE A BULLET
	BNE	KILLRTB0	;Continue if so.
	JMP	BUL140		;IF NONE, NO CHECK


;----------- DON'T KILL ENEMIES UNLESS IN HERO 6 OR 7 AND IN PROPER FRAMES!
;----------- RTB 5/6/90
KILLRTB0:
	LDA	CURWORLD
	CMP	#5
	BEQ	KILLRTBZ
	CMP	#7
	BEQ	KILLRTBZ	;SKIP THIS IF NO MAN ON SCREEN!

	LDA 	HERONUM
	CMP	#6
	BEQ	KILLRTBA
	CMP	#7
	BEQ	KILLRTBA
	JMP	BUL140		;NO REASON TO KILL ANYTHING IF NOT IN 6 OR 7
KILLRTBA:
	LDA	#HEROSLOT
	JSR	ANIMINDX
	LDA	ANIM_RAM+FR,X	;GET CURRENT ANIMATION FRAME!
	CMP	#2
	BCC	KILLRTBZ
	JMP	BUL140		;ANIMATION DOESN'T SHOW A BUG BEING HIT, SKIP
	
KILLRTBZ:
;----------------------------------------------------------------------
	LDA	#HEROSHOT	;NOW SEE IF OUR BULLETS ARE DOING SOMETHING
	JSR	COLLISION	;RETURNS SLOT OR -1 IF NO COLLISION
	CPX	#HEROSLOT	;SEE IF THE COLLISION DOESN'T MATTER
	BCS	BUL140
        STX     SAFEBYTE

;OUR BULLET HIT AN ENEMY.  WE JUST LOWER ITS HEALTH AND FREEZE IT
;FOR A BIT UNLESS ITS A BULLET IN WHICH CASE WE KILL IT.  ALSO, IF ITS
;A PRIZE OR HEALTH, THE COLLISION DOESN'T MATTER.

        CPX     #6
	BCS	BUL125
	LDA	ENEMYFLGS,X	;IF ENEMY, IS IT A HIDDEN PRIZE?
	AND	#2		;PRIZE?
	BNE	BUL140		;IF SO, IGNORE THE COLLISION

        JSR     CHECKKRAT
        BNE     BUL124
        LDA     HEROSFEET
        CMP     #172            ;KRAT IS ONLY VULNERABLE IN THE HEAD
        BCS     BUL140
        JSR     CRAT            ;SEE IF WE SHOULD FLING KRAT.
        LDA     KRATSTATE
        CMP     #2
        BNE     BUL124
        LDY     #SQUEEK >> 8
        LDX     #SQUEEK & $FF
        LDA     #ENEMYNOISE
        JSR     PLAY
        JSR     CHECKKRAT

BUL124:	LDA	SPECENEMY,Y	;SEE IF ITS AN IMMEDIATE POINTS OR PRIZE
	AND	#$10
	BNE	BUL140		;IF SO, IGNORE THE COLLISION	

BUL125:	TXA
	PHA
	JSR	KILLBULLET	;GET RID OF OUR BULLET
	PLA
	TAX

        CPX     #6              ;BULLET?
	BCS	BUL130


;------------------------------------------------------- JGT 05/09/90 -----
; CHECK FOR "PLATFORM"(19), "FAUCET"(71) OR "CASE"(76) OR (6) --- THESE
; ENEMY TYPES YOU CAN *NOT* HIT...

        LDA     ENEMY0,X        ;GET ENEMY TYPE
        CMP     #19             ;PLATFORM?
        BEQ     BUL130
        CMP     #71             ;FAUCET?
        BEQ     BUL130
        CMP     #76             ;CASE?
        BEQ     BUL130
        CMP     #6              ;CONVEYOR GEARS?
        BEQ     BUL130

;----- GOT ONE THAT'S DEADLY...DO NORMAL CODE
;--------------------------------------------------------------------------             

        LDA     BPOWER          ;GET AMOUNT OF POWER TO LOWER IT BY
        JMP     LOWER_ENEMY     ;LOWER THE ENEMIES HEALTH OR KILL IT.

BUL130:	DEX
	DEX
	DEX
	DEX
	DEX
        DEX
	JSR	KILLEBULLET	;FIX INDEX AND KILL THE BULLET.

BUL140:	RTS

CRAT:                           ;CALLED WITH HIT TO KRAT OR COLLISION WITH HIM
        JSR     CHECKKRAT       ;KRAT?
        BNE     NOTKRAT
        LDY     #KRAT >> 8
        LDX     #KRAT & $FF
        LDA     SAFEBYTE
        JSR     SWAPSPRT
        JSR     CHECKKRAT       ;RESTORE X AND Y
        LDA     #0
        STA     ENEMYINDX,X
        LDA     KRATSTATE       ;GET CURRENT STATE OF KRAT
        PHA
        LDA     #2
        STA     KRATSTATE
        PLA
        CMP     #2
NOTKRAT: RTS                 ;RETURNS NZ IF NOT KRAT, Z IF KRAT IN HURT MODE

;THIS ROUTINE WILL CHECK ENEMY SAFEBYTE TO SEE IF IT IS KRAT.  IT RETURNS
;Z IF KRAT, NZ IF NOT.  X HAS SAFEBYTE, Y HAS ENEMY0,X.

CHECKKRAT:
        LDX     SAFEBYTE
        LDY     ENEMY0,X
        CPY     #80             ;KRAT?
        RTS     

;THIS ROUTINE SHOULD BE CALLED WHEN THE HERO TAKES DAMAGE.  IT WILL
;FLASH THE HERO USING FLASHHERO AND CHECKS FOR THE POSSIBILITY OF THE
;HERO REVERTING FROM A DRESSING ROOM COMMAND OR NEW GUN PRIZE.  IF THE HERO 
;REVERTS TO A PREVIOUS HEROTABLE ENTRY, HE IS INSTANTLY CHANGED BUT IS NOT
;FLASHED.   IF HIS GUN REVERTS, THE NEW GUN TYPE IS SET UP.

CHECKFLASH:

;----------------------------------------------------- JGT 05/11/90 -----
	LDA	REVERT
	BEQ	CFH10			;IF NO REVERT, CHECK GUN
	DEC	REVERT
	BNE	CFH10
	LDA	HERONUM		;GET HERO BEFORE CHANGE
	PHA				;SAVE IN CASE MATERIALIZE OVER SOLID
	LDA	WORLDHERO
	JSR	CHANGEHERO		;IF REVERT RUNS OUT, CHANGE HERO
	PLA
	STA	HERONUM			;RESTORE HERO WE USED TO HAVE
	LDX	#0
	LDY	#0
	JSR	MOVE_HERO		;SEE IF MATERIALIZED OVER SOLID
	BEQ	CFH5
	LDA	HERONUM
	JSR	CHANGEHERO		;CHANGE BACK IF NO GOOD
	LDA	#1
	STA	REVERT
	JMP	CFH10			;AND SET TO RUN OUT AGAIN LATER

CFH5:	LDA	WORLDHERO
	STA	HERONUM			;IF IT WAS GOOD, KEEP THAT HERO
	LDA	#0
	STA	REVERT			;BUT NO REVERT FROM THIS ONE.

CFH10:	LDA	GREVERT
      	BEQ	FLASHHERO		;SKIP IF GUN CAN'T REVERT
      	DEC	GREVERT
      	BNE	FLASHHERO
      	LDA	WORLDGUN
      	JSR	GETBULLET
      	LDA	#0
      	STA	GREVERT

;THIS ROUTINE WILL MAKE THE HERO FLASH FOR 1 SECOND.  

FLASHHERO:

;-----------------------------------------------------JGT 05/09/90---
;
; Setup hero to show "hit sprite" and be temporarily 
; invulnerable...

                JSR     REMHAM          ;remove hammer, if on -JGT

                        LDA     #14
			STA	INVULN
                        LDA     #4
			STA	HITFLAG		;assume small bounce

                        LDY     SAFEBYTE
                        CPY     #6
                        BCS     FLASH1

                        LDX     ENEMY0,Y
                        LDA     BEHAVIOR,X
                        AND     #$08           ;check "bounce" bit
			BEQ	FLASH1

                        LDA     #18
                        STA     INVULN
                        LDA     #6
			STA	HITFLAG		;big bounce

FLASH1:

; cheesy patch to cause enemy to "bump" back on X-axis when hit.!  -JGT

                        LDA     #50
                        STA     BUMPX
                        LDA     #50
                        STA     BUMPY
                                  
                        LDA     SAFEBYTE        ;hope this is still corr.!!
                        JSR     SPRTCTR         ;GET SPRITE COORDS.

                        LDA     HEROX
                        CLC
                        ADC     #12
                        CMP     TEMP_JX
			BCS	FLSHJGT
;make negative "bump"...	   
                        LDA     #-50
                        STA     BUMPX

FLSHJGT:                LDA     HEROY
                        CLC
                        ADC     #20
                        CMP     TEMP_JY
                        BCS     FLSHJ2

                        LDA     #-50
                        STA     BUMPY

FLSHJ2:                 RTS


SPRTCTR:                PHA                     ;save slot #
                        JSR     GETSPRT         ;get sprt. loc. in X & Y
                        PLA
                        CMP     #6              ;bullet?
                        BCS     SPRTSHOT
;enemy...
                        STY     TEMP_JY
                        TAY
                        LDA     ENEMYHIGH, Y    ;adjust for height
                        LSR     A               ; (halve it)
                        CLC
                        ADC     TEMP_JY
                        STA     TEMP_JY
                        STX     TEMP_JX
                        LDA     ENEMYWIDE, Y    ;adjust for width
                        LSR     A               ; (halve it)
                        CLC
                        ADC     TEMP_JX
                        STA     TEMP_JX
                        RTS

;got a bullet...adjust for standard bullet size of 8x8

SPRTSHOT:               STY     TEMP_JY
                        LDA     #4
                        CLC
                        ADC     TEMP_JY
                        STA     TEMP_JY
                        STX     TEMP_JX
                        LDA     #4
                        CLC
                        ADC     TEMP_JX
                        STA     TEMP_JX
                        RTS                     

;--------------------------------------------------------------------

                
;THIS ROUTINE WILL RESET THE FLAG THAT WE ARE STUCK TO AN ENEMY AND 
;SET CANTSTICK FOR 1 SECOND.

UNSTICK:
 	LDA	#0
	STA	STUCK    	;IF WE BUMP SOMETHING, FALL OFF.
        LDA     #1
        STA     CANTSTICK       ;DISALLOW STICKING FOR 1/15 SECOND      
	JMP	MOVEAGAIN	;FREE UP THE HERO'S FEET

;THIS ROUTINE WILL CHECK TO SEE IF THE HERO SHOULD STICK TO AN ENEMY HE
;HAS COLLIDED WITH.  IF CANTSTICK IS TRUE, IT WILL IGNORE THE POSSIBLILITY.
;OTHERWISE, IT CHECKS THE ENEMY INDEX IN X AND IF WE ARE TOUCHING THE
;TOP 8 SCAN LINES AND ARE JUMPING OR FALLING, AND THE ENEMY
;SUPPORTS BEING JUMPED ON, WE WILL STICK TO HIM.

STICK:	LDA	CANTSTICK
	BNE	STK50

	LDA	JPOWER
	BEQ	STK50		;IF CAN'T JUMP, CAN'T STICK

	LDY	ENEMY0,X
	LDA	BEHAVIOR,Y	;GET STICK BIT
	AND	#4		;CAN WE STICK?
	BEQ	STK50

	LDA	JUMPING		;CAN'T BE JUMPING
	BNE	STK50
	LDA	JUMPSTART	;WE MUST BE FALLING FROM A JUMP
	BNE	STK10
      	LDA	GRAVROW		;OR FALLING IN THE GRAVITY REGION
	BNE	STK50

STK10:	LDA	HEROSFEET	;GET HERO'S FEET LOCATION
	SEC
	SBC	ENEMYY,X	;SEE IF WE ARE IN TOP 8 SCAN LINES
	CMP	#9
	BCS	STK50
	STX	STICKENEMY	;WE ARE GOING TO STICK, SET ENEMY #
	LDA	#255
	STA	STUCK    	;SET FOR MAX SECONDS OF IT
;---------- MAKE SURE HE DOESN'T STICK WITH THE WRONG HERO RTB 5/6/90
	JSR	REMHAM		;GET RID OF HAMMER MAN?
;--------------------------------------------------------------------
	LDA	#0
	STA	JUMPSTART
	JSR	JUMPFREEZE	;FREEZE HERO ANIMATION IN JUMPING POSITION
STK50:	RTS

;*********** DO SPECIAL FUNCTIONS AND HEALTH OR SCORE BAR *****************
;ACTIVE FOR TICKS %11

RWL200:	JSR	MOVESOME

;UPDATE THE HEALTH BAR UNLESS THE SELECT SCREEN HAS BEEN REQUESTED.

RWL300:	LDA	CURWORLD
	BEQ	RWL310
	LDA	SELREQUEST
	BNE	RWL320
	JSR	SHOWSCORE	
RWL310:	RTS

;STATUS SCREEN CODE.  WE JUST GOT THE REQUEST TO GO INTO STATUS SCREEN MODE.

RWL320:	JSR	ALLOW_WRITES	;Moved from INITBACK.	-KHB
	LDA	REG2001
	AND	#$EF		;TURN OFF SPRITES DISPLAY
	STA	REG2001
	JSR	ALLSILENCE
       	LDX	#2
RWL330:	LDA	XBACK,X
	STA	SAVEXBACK,X	;SAVE CURRENT BACKGROUND POSITION
	DEX
	BPL	RWL330

;PUT UP THE STATUS SCREEN.

	JSR	ZEROSCROLLS
	LDA	#0
	JSR	SELBKSET	;SELECT THE CHAR SET TO USE

	LDX	#STATSCRN & $FF
	LDY	#STATSCRN >> 8 - $80	;added the -$80 to match retail rom - Evenball
	JSR	INITBACK
		
	LDX	#BOOTPAL & $FF
	LDY	#BOOTPAL >> 8
	JSR	BACKPAL			;SELECT THE PALETTE

;SHOW THE SCORE

	SCORELOC = $2000+6*32+16

	LDY	#SCORELOC >> 8
	LDX	#SCORELOC & $FF
	JSR	PUTSCORE

;SHOW HOW MANY HEROS WE HAVE LEFT.  

	HEROLOC = $2000+9*32+22

	LDY	#HEROLOC >> 8
	LDX	#HEROLOC & $FF
	JSR	ADDR_VID	;ADDRESS THE LINES WE ARE USING

	LDX	HEROS
	DEX			;MUST SHOW AS IF 1 IS 0.
	BPL	NOV10
	INX
NOV10:	JSR	SHOWTEN

;SHOW LEVEL WE ARE ON.

	LEVELLOC = $2000+14*32+21
	DASH = $26		;Dash character in set 0.

	LDY	#LEVELLOC >> 8
	LDX	#LEVELLOC & $FF
	JSR	ADDR_VID	;ADDRESS THE LINES WE ARE USING

	LDA	CURWORLD
	CMP	#8
	BNE	NOV20		;Continue if not level 8.
	STA	$2007
	LDA	#DASH
	STA	$2007		;Display as "LEVEL 8-1".
	LDA	#1
	JMP	NOV30		;Continue.

NOV20:	CMP	#9
	BNE	NOV25		;Continue if not level 9.	-KHB
	LDA	#8
	STA	$2007
	LDA	#DASH
	STA	$2007		;Display as "LEVEL 8-2".
	LDA	#2
	JMP	NOV30		;Continue.

NOV25:	LDX	#$40
	STX	$2007
	STX	$2007

NOV30:	STA	$2007

;SHOW BUGS LEFT ON CURRENT LEVEL.

	BUGSLLOC = $2000+17*32+22

	LDY	#BUGSLLOC >> 8
	LDX	#BUGSLLOC & $FF
	JSR	ADDR_VID	;ADDRESS THE LINES WE ARE USING

	LDX	BUGS_LEFT
	JSR	SHOWTEN

;SET STATUS SCREEN MODE.

	JSR	RESUME_NMI		;Moved from INITBACK.	-KHB
	LDA	#$FF
	STA	STATSCRF		;Set status screen active flag. -KHB
	LDA	#0
	STA	SELREQUEST		;RESET REQUEST
 	LDX	#IN_STAT & $FF
	LDY	#IN_STAT >> 8
	JMP	SET_NMI			;CHANGE STATE TO STATUS SCREEN.

SHOWTEN:		;DIVIDES X BY 10 AND STORES RESULT IN VIDEO MEM.
	LDY	#0	;HAS LEADING ZERO SUPPRESSION.
	LDA	#10
	JSR	DIVIDE		;MAKE 2 DIGITS FOR HEROS
	CPX	#0
	BNE	SHOWTENB
	LDX	#$40
SHOWTENB:
	STX	$2007
	STY	$2007		;ONLY UP TO 99 ALLOWED SO THIS DOES IT
	RTS

;WE ARE IN STATUS SCREEN MODE WAITING FOR THE COMMAND TO GO OUT.

IN_STAT:
	LDA	SELREQUEST		;REQUEST TO GO OUT?
	BNE	IT10
	RTS

IT10:	JSR	ALLOW_WRITES	;Moved from INITBACK.	-KHB
	LDA	REG2001
	ORA	#$10		;TURN ON SPRITES DISPLAY
	STA	REG2001
	JSR	WORLDBACK	;RESTORE THE BACKGROUND
	LDA	HORZWORLD
	BEQ	IT20
	JSR	KILLBACK	;FOR SPECIAL WORLD MODE, NEED KILLED BACK.

IT20:	JSR	INIT_SETS	;RESTORE THE CHARACTER SETS

       	LDX	#2
IT30:	LDA	SAVEXBACK,X
	STA	XBACK,X		;RESTORE BACKGROUND X POSITION
	DEX
	BPL	IT30

	JSR	QUICKMOVE	
	JSR	RESUME_SOUNDS	;RESUME THE SOUNDS OF THE GAME
	LDA	#0
	STA	STATSCRF		;Clear status screen active flag. -KHB
	STA	SELREQUEST
	JSR	RESUME_NMI		;Moved from INITBACK.	-KHB
	JMP	RR2			;RESUME THE REAL WORLD.

;THIS ROUTINE WILL MOVE ENEMIES AND ENEMY BULLETS ACCORDING TO THE
;VALUE IN TIMETICK.  IT IS SMART ABOUT THE AMOUNT OF PROCESSING POWER USED
;BY EACH TIME TICK DIVISION IN REAL_WORLD BUT ALSO CAN BE CALLED FROM
;SPECIAL STATES SUCH AS GOING IN AND OUT OF A DOOR.  IF YOU ARE GOING
;IN OR OUT OF A DOOR YOU SHOULD SET THE FLAG INDOOR TRUE TO STOP ENEMIES
;FROM TRYING TO SHOOT OR CHASE YOU IN THERE.

MVSOME2:			;ITS COMMON TO CALL INDOORS BEFORE MOVESOME
				;SO THIS ENTRY POINT WAS PROVIDED.
	JSR	INDOORS

MOVESOME:
	LDA	TIMETICK
	AND	#%11
	TAX
	BNE	MSM10

;IF 00 WE JUST MOVE BULLETS.

	LDX	#0
	JSR	MOVEBULLETS
	LDX	#1
	JSR	MOVEBULLETS
        LDX     #2
        JSR     MOVEBULLETS
        LDX     #3
	JMP	MOVEBULLETS

;IF 01.

MSM10: 	DEX
	BNE	MSM20
	LDX	#0
  	JSR	MOVEENEMY
	LDX	#1
  	JMP	MOVEENEMY

;IF 10

MSM20:	DEX
	BNE	MSM30
	LDX	#2
  	JSR	MOVEENEMY
        LDX     #3
        JSR     MOVEENEMY
        LDX     #4
	JMP	MOVEBULLETS

;IF 11

MSM30:  LDX     #4
        JSR     MOVEENEMY
        LDX     #5
        JSR     MOVEENEMY
        LDX     #5
        JMP     MOVEBULLETS


;		MISC ROUTINES FOR VARIOUS FUNCTIONS.

ORBLOCKS:			;CALL HERE TO OR A TO NEEDBLOCKS
	ORA	NEEDBLOCKS
	STA	NEEDBLOCKS
ORBL10:	RTS

;THIS ROUTINE WILL KILL THE HERO.  

DIEHERO:
	LDA	CANTDIE
	BNE	ORBL10
DIEHERO2:
	JSR	ALLSILENCE	;STOP ALL SOUNDS

	LDX	#HEROEND & $FF
	LDY	#HEROEND >> 8
	JSR	PLAY_MS1

	LDA	HEROX
	PHA
	LDA	HEROY
	PHA			;SAVE HEROS CURRENT LOCATION

	LDA	#HEROSLOT
	JSR	KILLSPRT	;REMOVE THE WALKING SPRITE

	LDA	CURWORLD	;Check world number,		-KHB
	CMP	#5		;   skip ahead if not world 5 (Swamp).
	BNE	NOTSWAMP
	LDX	#DEAD_H2 & $FF		;Do helicopter death animation.
	LDY	#DEAD_H2 >> 8
	JMP	DH_CONT		;Continue.
NOTSWAMP:
	LDX	#DEAD_HERO & $FF	;Do hero death animation.
	LDY	#DEAD_HERO >> 8
DH_CONT:
      	JSR	SOMEHERO
	LDA	#HEROSLOT
	JSR	AUTOKILL	;MAKE IT AUTOKILL

	PLA
	TAY
	PLA
	TAX
	JSR	PUT_HERO	;POSITION THE DIEING HERO

	LDA	#0
	STA	WORLD_DONE

 	LDX	#END_HERO & $FF
	LDY	#END_HERO >> 8
	JMP	SET_NMI		;SET STATE TO DEAD HERO

INITHERO:			;SHARED ENTRY POINT TO INITIALIZE STANDARD HERO
	LDY	CUR_HERO+1
	LDX	CUR_HERO

SOMEHERO:
	LDA	#HEROSLOT	;ENTRY POINT IF USING A DIFFERENT HERO.
	JMP	INITSPRT	;PUT UP THE DEAD ONE

;THIS ROUTINE WILL TEST THE BLOCK WRITE FLAGS TO SEE IF WE NEED TO WRITE
;OUT SOME BLOCK OF INFO.  IT ERASES THE FLAG ONLY IF IT DID WRITE OUT DATA.

;THIS ROUTINE MUST BE CALLED EACH NMI TO CLEAR THE FLAGS OUT.  ALSO,
;FLAG BITS MUST NOT BE SET IF ALREADY IN USE, SO IF YOU DETECT A FUNCTION
;THAT WILL REQUIRE A BIT, WAIT TILL NEXT NMI CHANCE TO PROCESS ANOTHER
;FUNCTION.

;THERE ARE 8 BITS IN NEEDBLOCKS TO SIGNAL WHAT TO DO:

;01 = ERASE 1 WIDE BY 2 HIGH SQUARE.  GBTROW AND GBTCOL.
;02 = ERASE 2 BY 2 SQUARE.  GSQROW AND GSQCOLL AND GSQCOLH.
;04 = UNUSED
;08 = UNUSED
;10 = DRAW SCENE. SCROW, SCCOL, SCCHAR.  BUILDS 2 BY 2 SCENE FROM SCCHAR.
;20 = PAINT A 1 BY 1 SQUARE WITH A CHARACTER VALUE.  HLTROW AND HLTCOL HAS 
;     LOCATIONS, HLTCHAR HAS THE CHARACTER VALUE TO USE.
;40 = PAINT 4 BY 4 BLOCK SPECIFIED BY POINTER ELEVPTR.  PAINT AT ELEVCOL
;     AND ELEVROW.
;80 = ERASE 1 HIGH BY 2 WIDE SQUARE.  PRROW AND PRCOL.

BLOCKWRITES:
	JSR	GET_ROOM	;SEE HOW MUCH ROOM IN THE SCREEN BUFFER
	CMP	#28
	BCC	BW5		;SKIP IF CAN'T HOLD ALL FLAG TYPES
	LDA	NEEDBLOCKS	;GET FLAG TO SEE IF NEED SOME WRITES
	BNE	BW10
BW5:	RTS

;WE DO NEED A BLOCK WRITE.  A HAS THE FLAGS.

BW10:	ROR	A		;1 BY 2?
	BCC	BW20
	LDX	GBTCOL
	LDY	GBTROW
	JSR	ERASE_BOTTLE
	LDA	#$FE		;MAKE ERASE FLAG BIT
	
BW15:	AND	NEEDBLOCKS	;PUT AN AND MASK TO RESET A BIT INTO A AND
	STA	NEEDBLOCKS	;JUMP HERE WHEN DONE.
	RTS

BW20:	ROR	A		;2 BY 2?
	BCC	BW30
	LDX	GSQCOLL
	LDY	GSQROW
	JSR	ERASE_BLOCK
	LDA	#$FD		;MAKE ERASE FLAG BIT
	JMP	BW15
	
BW30:  	ROR	A		;UNUSED
	BCC	BW40

	LDA	#$F7		;GET BACK ERASE VALUE
	JMP	BW15

BW40:	ROR	A		;ERASE RAIN
	BCC	BW50
	LDA	#$F7
	JMP	BW15

BW50: 	ROR	A
	BCC	BW60
	LDX	SCCOL		;DRAW SCENE
	LDY	SCROW
	LDA	SCCHAR
	JSR	DRAW_SCENE
	LDA	#$EF		
	JMP	BW15


BW60:	ROR	A		;FILL 1 BY 1?
	BCC	BW70
	LDX	HLTCOL
	LDY	HLTROW
	LDA	HLTCHAR	
	JSR	FILL_CELL
	LDA	#$DF		;MAKE ERASE FLAG BIT
	JMP	BW15
	
BW70:	ROR	A    		;ELEVATOR?
	BCC	BW80
	JSR	ELEV_SCENE
	LDA	#$BF
	JMP	BW15

BW80: 				;ERASE 1 HIGH BY 2 WIDE.
	LDX	PRCOL
	LDY	PRROW
	LDA	#$FA
	JSR	FILL_CELL

	LDX	PRCOL
	INX
	LDY	PRROW
	LDA	#$FA
	JSR	FILL_CELL

	LDA	#$7F		
	JMP	BW15
	
;THIS ROUTINE WILL ERASE A 2 BY 2 BLOCK POINTED TO BY X (COL) AND Y (ROW).
;THE BLOCK IS ASSUMED TO BE IN THE BACKGROUND.  TMP_NMI4 AND 5 ARE
;NOT USED.

ERASE_BLOCK:

	JSR	FIX_PTRS	

	LDX	SCCNT
	JSR	ERASE2
	JSR	NEXT_ROW	;GO TO NEXT ROW
	JSR	ERASE2
	STX	SCCNT
	RTS

;THIS LITTLE SUB WILL ERASE A ROW 2 WIDE USING TMP_NMI2 AND 1 AS POINTERS.

ERASE2:	JSR	ADDRESS_2
	LDA	#ERASECHAR	;GET EMPTY CHAR
	JSR	STINC		;SET IN CHAR

STINC:	STA	SCBUF,X		;CALL HERE TO STORE A AND INC X.
	INX			;TWICE
	RTS

;THIS ROUTINE PERFORMS A COMMON ADDRESS FUNCTION FOR A 2 WIDE WRITE
;SET UP BY FIX_PTRS.

ADDRESS_2:
	LDA	TMP_NMI2
	JSR	STINC		;SET HIGH
	LDA	TMP_NMI1
	JSR	STINC		;SET LOW	
	LDA	#2
	JMP	STINC		;SET COUNT

;THIS ROUTINE MOVES THE VALUES CREATED BY FIX_PTRS TO THE NEXT ROW.

NEXT_ROW:
	LDA	TMP_NMI1	;GET BACK LOW
	CLC
	ADC	#$20		;MOVE TO NEXT ROW
	STA	TMP_NMI1
	LDA 	TMP_NMI2	;GET BACK HIGH
	ADC	#0		;BRING UP CARRY
	STA	TMP_NMI2
	RTS

;THIS ROUTINE PREFORMS A COMMON POINTER ADJUSTMENT FUNCTION FOR
;ERASE_BLOCK, ERASE_CELL.

FIX_PTRS:

	STX	TMP_NMI1	;SAVE COL FOR NOW
	STY	TMP_NMI2	;SAVE ROW WHICH NEEDS NO CORRECTION

;CORRECT THE COLUMN INTO A 0-31 COLUMN WITH PAGE OFFSET

	LDX	TMP_NMI1
	TXA			;SAVE A COPY
	AND	#$1F
	STA	TMP_NMI1	;CORRECT TO 0-31
	LDA	#$20
	STA	TMP_NMI3	;ASSUME PAGE 0
	TXA			;GET BACK PAGE BIT
	AND	#$20
	BEQ	EBL20
	LDA	#$24
	STA	TMP_NMI3	;IF PAGE 2, STARTS HERE

;TEMP 1 HAS COL, 2 HAS ROW, 3 HAS PAGE

EBL20:	LDX	TMP_NMI2
	LDY	#$20
	JSR	MUL		;MAKE OFFSET TO ROW
	LDA	TMP_NMI1
	JSR	ADD_WORD	;MAKE OFFSET TO COL
	STX	TMP_NMI1	;SAVE LOW BYTE
	TYA
	CLC
	ADC	TMP_NMI3	;AND CORRECT FOR SCREEN TO MAKE HIGH OFFSET
	STA	TMP_NMI2	;SAVE IT
	RTS

;THIS ROUTINE WILL ERASE A SINGLE TEXT CELL  USING THE SAME RULES AS
;ERASE_BLOCK

ERASE_CELL:
	LDA	#$FA		;GET CHAR TO ERASE WITH

FILL_CELL:			;JUMP HERE WITH A=VALUE TO FILL IN WITH.
	PHA
	JSR	FIX_PTRS	

	JSR	STADDR		;PUT HIGH AND LOW ADDRESSES IN FROM TMP_NMIs
	LDA	#1
	JSR	STINC		;SET COUNT
	PLA			;GET CHAR TO SET IN
	JSR	STINC		;SET IN CHAR
	STX	SCCNT
	RTS

;THIS ROUTINE WILL ERASE A BLOCK THAT IS 2 HIGH BY 1 WIDE SIMILAR TO
;ERASE_BLOCK.

ERASE_BOTTLE:
	TXA
	PHA
	TYA
	PHA
	JSR	ERASE_CELL
	PLA
	TAY
	INY
	PLA
	TAX
	JMP	ERASE_CELL

;THIS ROUTINE WILL DRAW A 2 BY 2 SCENE AT X (COL) AND Y (ROW).
;THE BLOCK IS ASSUMED TO BE IN THE BACKGROUND. THE CHAR TO USE TO PAINT THIS
;SCENE IS PASSED IN A.  THE SCENE WILL BE A,A+1 FOR THE FIRST ROW AND
;A+$20,A+$21 FOR THE SECOND ROW.

DRAW_SCENE:

	STA	SAFEBYTE		;SAVE CHAR
	JSR	FIX_PTRS	

	JSR	ADDRESS_2	;PUT HIGH AND LOW ADDRESSES WITH COUNT = 2
	LDA	SAFEBYTE		;GET CHAR
	JSR	STINC		;SET IN CHAR
	CLC
	ADC	#1
	JSR	STINC		;TWICE

	LDA	TMP_NMI1	;GET BACK LOW
	CLC
	ADC	#$20		;MOVE TO NEXT ROW
	STA	TMP_NMI1
	LDA 	TMP_NMI2	;GET BACK HIGH
	ADC	#0		;BRING UP CARRY
	JSR	STINC  		;SET HIGH
	LDA	TMP_NMI1
	JSR	STINC  		;SET LOW	
	LDA	#2
	JSR	STINC  		;SET COUNT
	LDA	SAFEBYTE
	CLC
	ADC	#$20		;NOW DO SECOND ROW VALUES
	JSR	STINC  		;SET IN CHAR
	CLC
	ADC	#1
	JSR	STINC  
	STX	SCCNT
	RTS

;HERE'S A COUPLE MORE SUBS TO SHARE SOME CODE.

STADDR:	LDX	SCCNT
STADDR2:
	LDA	TMP_NMI2
	JSR	STINC		;SET HIGH
	LDA	TMP_NMI1
	JMP	STINC		;SET LOW	

;THIS ROUTINE WILL DRAW A 4 BY 4 SCENE AT ELEVCOL (COL) AND ELEVROW (ROW)
;USING THE DATA POINTED TO BY ELEVPTR. THE BLOCK WILL BE PAINTED IN THE 
;BACKGROUND. 

ELEV_SCENE:

	LDA	#4
	STA	SAFEWORD		;SET ROW LOOP COUNT
	LDX	ELEVCOL
	LDY	ELEVROW
	JSR	FIX_PTRS	
	
	LDX	SCCNT
	LDY	#0

ELS10:	JSR	STADDR2

	LDA	ELEVDOOR
	CMP	#1		;Check for DOOR type 2.		-KHB
	BNE	ELS14		;Go if not.
	LDA	#3		;Set to only 3 characters wide.
	JMP	ELS16		;Continue.

ELS14:	LDA	#4
ELS16:	STA	SAFEWORD+1	;SET MINILOOP COUNT
	JSR	STINC  		;SET COUNT

ELS20:	LDA	(ELEVPTR),Y	;GET A CHAR
	INY
	JSR	STINC  		;SET IN CHAR
	DEC	SAFEWORD+1
	BNE	ELS20

	LDA	TMP_NMI1	;GET BACK LOW
	CLC
	ADC	#$20		;MOVE TO NEXT ROW
	STA	TMP_NMI1
	LDA 	TMP_NMI2	;GET BACK HIGH
	ADC	#0		;BRING UP CARRY
	STA	TMP_NMI2

	DEC	SAFEWORD		;4 ROWS?
	BNE	ELS10

	STX	SCCNT
	RTS


;THIS ROUTINE PUTS UP GAME STATUS INFO WHICH CURRENTLY IS JUST THE 
;HEALTH BAR.

;LIFETAB HAS THE CHARS WHICH GO AT SPRAM+LIFEBASE*4+1

	HBASECHAR = SPRAM+LIFEBASE*4+1

SHOWSCORE:
	LDA	HEALTH
	CMP	#20
	BCC	SHT5
	LDA	#20
SHT5:	LSR	A
	STA	SAFEBYTE		;WE USE /2 RESOLUTION
	LDA	#5
	STA	SAFEWORD+1	;SET A LOOP COUNTER
	LDY	#16		;SET INDEX TO WHERE TO SHOW THEM
SHT10:	LDA	SAFEBYTE		;GET REMAINING HEALTH
	CMP	#2		;SEE IF FULL AMOUNT LEFT
	BCC	SHT20
	LDA	#2
SHT20:	STA	SAFEWORD
	LDA	SAFEBYTE
	SEC
	SBC	SAFEWORD
	STA	SAFEBYTE		;UPDATE COUNT
	LDX	SAFEWORD		;GET VALUE TO SHOW NEXT
	LDA	LIFETAB,X	;GET THE CHAR TO USE FOR IT
	STA	HBASECHAR,Y	;PUT INTO SPRITE CHAR POSITION	
	DEY
	DEY	
	DEY
	DEY				;BACK UP 4
	DEC	SAFEWORD+1
	BNE	SHT10			;DO ALL 5	
	RTS

;THIS ROUTINE WILL SCAN ALL WORLDRAM FLAGS PRESENTLY ON SCREEN AND DO
;WHATEVER IS NEEDED FOR THEM.   IT ONLY ACTIVATES COMMANDS WHICH ARE 
;SCREEN SCAN ENABLED.

SCANFLAGS:
	LDA	#0
	STA	STOPSCAN	;RESET FLAG OF WE NEED TO STOP SCANNING
	LDA	#0		;AND WE NEED TO TEST 32 OF THEM
SFG10: 	LDX	STOPSCAN	;SEE IF LAST ONE TOLD US TO STOP
	BNE	SFG20
	PHA			;SAVE THE ONE WE ARE TESTING
	CLC
	ADC	STARTCOL
	TAX
;;	LDA	STARTCOL+1
;;	ADC	#0
;;	TAY			;MAKE FULL WORD OF COLUMN TO TEST
	JSR	SCREENFLAGS	;DO THIS FLAG
	PLA
	TAX			;GET BACK INDEX
	INX			;GO TO NEXT SCREEN COLUMN
	TXA
	CMP	#32		;DONE WITH 32 OF THEM?
	BNE	SFG10
SFG20:	RTS	

;THIS ROUTINE TESTS THE WORLD FLAGS TO SEE WHAT TO DO WHEN A COLUMN ON
;SCREEN IS SCROLLED ONTO.  Y:X SHOULD HAVE THE SCREEN COLUMN YOU WANT TO
;TEST.    

SCREENFLAGS:
	LDA	#2
	STA	WHATKIND
	JMP	TESTFLAGS

;THIS ROUTINE TESTS THE WORLD FLAGS TO SEE WHAT WE ARE TO DO WHEN THE
;HERO TOUCHES IT.  HEROCOL HAS THE FLAG TO TEST.  

HEROFLAGS:
	LDA	HEROTOP
	STA	TESTTOP
	LDA	HEROBOT
	STA	TESTBOT		;SET UP BOTTOM FOR TEST
	LDA	#$01
	STA	WHATKIND	;SET FLAG OF ITS A WALK ON.
	LDA	JUMPING		;BUT SEE IF WE WERE JUMPING
	BEQ	HFG10
	LDA	JUMPLEFT	;WITH SOMETHING LEFT
	BEQ	HFG10
	LDA	#$04
	STA	WHATKIND	;IF SO, HERO FLAGS ACT DIFFERENTLY
HFG10:	LDA	JUMPSTART	;BUT ARE WE JUMPING FROM THE 3D AREA?
	BEQ	HFG15		;IF SO, THAT OVERRIDES THE OTHER.
	LDA	#$08
	STA	WHATKIND
HFG15:	LDA	STUCK    	;OR STUCK TO AN ENEMY?
	BEQ	HFG20
	LDA	#$10
	STA	WHATKIND
HFG20:	LDX	HEROCOL
;;	LDY	HEROCOL+1
	JMP	TESTFLAGS

;THIS ROUTINE WILL ADJUST Y:X FOR THE WORLD RESOLUTION BY SHIFTING THEM
;DOWN ACCORDINGLY.  SUBSVAR1 AND 2 AND 3 ARE USED.  THE RESULT IS RETURNED IN
;X SINCE THE RULES DON'T ALLOW GREATER THAN 255.  BITS THROWN OUT ARE
;SHIFTED INTO AND AVAILABLE IN SUBSVAR3. SUBSVAR2 HAS THE HIGH BYTE JUST
;IN CASE YOU WANT TO LOOK AT IT.

RESADJ:
	STY	SUBSVAR2
	STX	SUBSVAR1	;PREPARE FOR RESOLUTION ADJUSTMENT
	LDA	#0
	STA	SUBSVAR3	;CLEAR REMAINDER BITS
	LDX	CURWORLD	;GET THE CURRENT WORLD
	LDY	TABLERES,X	;GET THE RESOLUTION OF THIS TABLE
	BEQ	REA30
REA20:
	LSR	SUBSVAR2	;SHIFT ONE MORE
	ROR	SUBSVAR1
	ROR	SUBSVAR3
	DEY			;KEEP SHIFTING DOWN FOR REQUESTED AMOUNT
	BNE	REA20
REA30:	LDX	SUBSVAR1
	RTS

;THIS ROUTINE WILL TAKE A WORLD FLAGS COLUMN NUMBER AND ADJUST IT
;TO THE SCREEN COLUMN.  IT ACCOUNTS FOR THE CURRENT FLAG RESOLUTION.  IT
;IS THE REVERSE OF RESADJ.  THE VALUE IS IN A ON ENTRY, THE RESULT IN 
;RETURNED IN SUBSVAR2:SUBSVAR1.

;COLADJ:
;	STA	SUBSVAR1
;;;	LDA	#0
;;;	STA	SUBSVAR2
;	LDX	CURWORLD	;GET THE CURRENT WORLD
;	LDY	TABLERES,X	;GET THE RESOLUTION OF THIS TABLE
;	BEQ	CEA30
;CEA20:	ASL	SUBSVAR1	;SHIFT ONE MORE
;;;	ROL	SUBSVAR2
;	DEY			;KEEP SHIFTING DOWN FOR REQUESTED AMOUNT
;	BNE	CEA20
;CEA30:	RTS

;THIS IS THE TESTING POINT IF THE BULLET HITS A FLAG. 

BFLAGS:
	LDA	BULLETROW
	STA	TESTTOP
	STA	TESTBOT
	LDA	#$80
	STA	WHATKIND	;SET FLAG IF ITS A SHOT
	LDX	BULLETCOL
;;	LDY	BULLETCOL+1
;;	JSR	RESADJ
	LDA	WORLDRAM,X	;IF BULLET, MUST HAVE BIT $80 SET OR NO USE
	BPL	TF5
	LDX	BULLETCOL
;;	LDY	BULLETCOL+1

;JUMP HERE TO TEST THE FLAGS.  SET UP TESTTOP, TESTBOT, WHATKIND,
;AND Y:X (WORD POSITION IN BACKGROUND).

TESTFLAGS:
;;	STY	WORLDCOL+1
	STX	WORLDCOL  	;SAVE FULL WORD POSITION IN BACKGROUND

;;	JSR	RESADJ		;ADJUST THE VALUES FOR OUR RESOLUTION
;;	LDA	SUBSVAR3	;SEE IF NOT ON EVEN BOUNDRY
;;	BNE	TF5	
	LDA	WORLDRAM,X	;SEE IF THERE IS SOMETHING TO CHECK
	BNE	TF10
TF5:
	RTS			;NOTHING TO CHECK IF ZERO.

TF10:	STX	TESTINDX	;SAVE INDEX INTO WORLDRAM
	LDY	WORLD_INDX
	LDA	USE_TABLE,Y
	STA	TEST_JMP
	LDA	USE_TABLE+1,Y
	STA	TEST_JMP+1	;MAKE POINTER TO THE FLAGS

	LDY	#0
	JSR	RESADJ		;Adjust for resolution.		-KHB
	TXA
	ASL	A
	BCC	TF11
	INC	TEST_JMP+1
	INC	TEST_JMP+1	;THIS BIT HAS *2 VALUE
TF11:	ASL	A
	BCC	TF12
	INC	TEST_JMP+1	;NEED TO MAKE *4 INDEX AND KEEP TRACK OF CARRY
TF12:	CLC
	ADC	TEST_JMP
	STA	TEST_JMP
	BCC	TF13
	INC	TEST_JMP+1

TF13: 	LDY	#3
	LDA	(TEST_JMP),Y	;GET AUX BYTE 2 CAUSE IT ISN'T IN RAM
	STA	AUX2
	LDY	#1		;NEED TO POINT TO THE ROW BYTE NOW
	LDA	(TEST_JMP),Y
	STA	ROWBYTE		;AND GET THE ROW BYTE
	AND	#$1F		;GET ROW COMPONENT ONLY
	BEQ	TF14		;IF 0 ROW, NO ROW CHECK

	CMP	TESTTOP		;SEE IF ITS BELOW OR = TO TOP ROW ALLOWED
	BCC	TF5		;IF NOT, ITS NOT A HIT
	CMP	TESTBOT
	BEQ	TF14
	BCS	TF5		;BUT MUST BE ABOVE OR = TO BOTTOM ALLOWED ROW

TF14:	LDX	TESTINDX
 	LDA	WORLDAX1,X
	STA	AUX1	  	;AUX BYTE 1 IS KEPT IN RAM

	LDA	WORLDRAM,X	;AND SO IS THE FLAG BYTE. GET IT.
	STA	FLAGBYTE
	AND	#$7F		;REMOVE THE SHOOTABLE BIT
	CMP	#LASTFVAL
	BCC	TF15
     	LDA	#2		;FOR ERROR RECOVERY SET NO ACTION IF BAD VALUE
TF15:	ASL	A		;MAKE IT INTO AN INDEX
	TAX
	LDA	HEROFLGS,X
	STA	TEST_JMP
	LDA	HEROFLGS+1,X
	STA	TEST_JMP+1	;MAKE PLACE TO GO TO PROCESS THIS FLAG

	LDA	WHATKIND	;IF BULLET AND ON CORRECT ROW, NEED ACTION
	BPL	TF17
	JSR	KILLBULLET	;GET RID OF IT, IT HIT SOMETHING.

;BEFORE WE GO THERE, SEE IF THE FUNCTION IS ALLOWED IN THE CURRENT MODE.

TF17:	LDA	FLAGBYTE
	AND	#$7F
	TAX
	LDA	WHATSOK,X	;GET FLAG THAT ENABLES EACH THING
	AND	WHATKIND	;SEE IF THE CORRECT BIT IS SET
	BNE	TF19
	RTS			;IF NOT, NO ACTION HERE	

TF19:	LDA	AUX1		;GET AUX1 BECAUSE WE COMMONLY NEED IT
	LDX	TESTINDX	;AND X IS ALSO GOOD TO HAVE VALID
	JMP	(TEST_JMP)

;THESE JUMP LOCATIONS SPECIFY WHERE TO GO FOR EACH OF THE WORLD FLAG TYPES
;THAT THE HERO RUNS INTO.  MANY ENTRIES POINT TO "NA" WHICH MEANS THE HERO 
;TAKES NO ACTION.  AT ENTRY TO EACH ROUTINE, AUX1 IS IN A AND THE INDEX
;TO THE WORLD FLAGS IS IN X.  TESTTOP HAS THE TOPMOST ROW BEING TOUCHED
;AND TESTBOT HAS THE BOTTOMMOST ROW.  

;IF YOU ADD AN ENTRY HERE, YOU MUST ALSO SET THE CORRECT BITS IN THE
;TABLE ENTRY FOR "WHATSOK".

;ON ENTRY TO EACH ROUTINE, IF THE ROUTINE HAS MULTIPLE ACTIONS BASED ON
;WHETHER IT WAS SHOT, WALKED ONTO, OR SCANNED YOU CAN CHECK THE FLAGS 
;AS FOLLOWS:

;WHATKIND=1 IF WALKED ONTO
;WHATKIND=2 IF SCANNED WHEN THE SCREEN SCROLLS
;WHATKIND=4 IF HERO JUMPS ONTO IT FROM THE GRAVITY REGION
;WHATKIND=8 IF THE HERO JUMPS ONTO IT FROM THE NON-GRAVITY (3D) REGION.
;WHATKIND=$10 IF THE HERO IS STUCK TO AN ENEMY.
;WHATKIND=$80 IF SHOT 

;TO UNDERSTAND WHAT TO DO, YOU NEED TO UNDERSTAND THE INTENT OF THE STATE
;MACHINE.  ENEMIES ARE INTENDED TO BE PERMANENTLY ALIVE IN THE BACKGROUND
;UNTIL KILLED.   THATS WHY WHEN THE SCREEN IS SCROLLED ONTO WE CALL HERE
;TO CHECK FOR COMMANDS WHICH ACTIVATE WHEN THEY COME ON SCREEN.  NEXT, THE
;HERO CAN SHOOT AND SOME THINGS NEED TO BE ONLY SHOOTABLE OR BOTH SHOOTABLE
;AND TOUCHABLE.  FINALLY, THE HERO JUMPS UP AND DOWN, WALKS, AND ALSO CAN
;INHABIT A "PSEUDO 3D" AREA.  THIS 3D AREA SHOULD BEHAVE AS IF THE HERO WERE
;JUMPING UP WITHIN A PLANE AND THUS WHILE JUMPING THERE HE SHOULD NOT
;TOUCH SOMETHING WHICH SHOULD BE ATTACHED TO THE GROUND EVEN THOUGH IN
;REALITY HIS SPRITE COLLIDES WITH IT ON SCREEN.  SO EVEN THE HERO FUNCTIONS
;IN 3 MODES WHEN HE COLLIDES WITH SOMETHING; HE WALKED ONTO IT, JUMPED INTO
;IT, OR JUST PASSED THAT COLUMN IN SPACE AS HE JUMPED FROM THE 3D AREA.
;SOME FUNCTIONS MUST ACTIVATE NO  MATTER HOW THE HERO GOT THERE SUCH AS THE
;SET CLIFF LEVEL OR GO TO NEXT WORLD.  OTHERS SUCH AS THE BOMB MUST HAPPEN
;ONLY IF THE HERO "STEPS" ON THEM.  OTHERS SUCH AS HIDDEN PRIZES SHOULD
;ALLOW THE HERO TO JUMP UP AND BUMP THEM WITH HIS HEAD SO LONG AS HE IS IN
;THE SAME "PLANE" AS THAT OBJECT.

HEROFLGS:
	.word 	NA 	;NO ACTION OR TARGET.
	.word 	NA	;UNUSED
	.word 	NA	;;BF02 	;02 HEALTH
	.word 	NA	;;BF03	;03 DELAY
	.word 	NA	;;BF04	;04 FIRE CRACKER 
	.word 	NA	;;BF05	;05 PROPEL HERO
	.word 	NA	;UNUSED
	.word 	NA	;;BF07A	;07 PUT HERO BEHIND BACKGROUND
	.word 	NA	;;BF08A	;08 PUT HERO IN FRONT OF BACKGROUND
	.word 	NA	;;BF09	;09 TRANSPORT HERO TO NEW LOCATION 
	.word 	NA	;;BF0A	;0A VERTICAL SCREEN CONNECTION
	.word 	NA	;0B 
	.word 	NA	;;BF0C	;0C NEW WORLD. 
	.word 	NA	;;BF0D 	;UP BUTTON.  
	.word 	NA	;;BF0E 	;DOWN BUTTON.
	.word 	NA	;;BF0F	;0F ELEVATOR OR DOOR ENTRANCE.
	.word 	NA  	;
	.word 	NA  	;
	.word 	NA  	;
	.word 	NA  	;
	.word 	NA  	;
	.word 	NA  	;
	.word 	BF16	;UPWARDS ENTRANCE TO ANOTHER WORLD
	.word 	BF17 	;FREE HERO TARGET.
	.word 	NA	;;BF18	;HIDDEN LIFE FORCE
	.word 	NA 	;UNUSED.
	.word 	NA	;UNUSED
	.word 	NA	;UNUSED.
	.word 	NA	;;BF1C	;GO TO NEXT WORLD
	.word 	BF1D 	;CONNECTING DOOR
	.word 	NA 	;1E.  
	.word 	NA	;;BF1F 	;1F. CLIFF
	.word 	BF20	;20 LAUNCH ENEMY 
	.word 	BF21	;21 FORCED LAUNCH ENEMY
	.word 	NA	;;BF22  	;22 GOTO WORLD WHEN ENEMY IS KILLED.
	.word 	NA  	;23 LEFT WORLD LIMIT DOESN'T HAPPEN HERE
	.word 	NA	;24 RIGHT WORLD LIMIT DOESN'T HAPPEN HERE
	.word 	NA	;;BF25 	;HOLE IN GROUND
	.word 	NA	;;BF26	;26 SET SINK AND DEATH LEVEL.
	.word 	NA	;;BF27	;27 DRESSING ROOM
	.word 	NA  	;
	.word 	NA	;
	.word 	NA	;;BF2A	;2A. PRIZE0-5
	.word 	NA	;;BF2B	;2B.  CLEAR PATH.
	.word 	BF2C	;2C. NEW HORIZONTAL LOCATION
	.word 	NA	;;BF2D	;CLIFF LEVEL
	.word 	NA	;
     	.word 	NA	;;BF2F	;END SCENE
	.word 	NA	;;BF30	;30 SAME AS 20 BUT EXPLODES
	.word 	NA	;;BF31	;31 ""      21 ""
	.word 	NA	;;BF32  	;STOP SCREEN SCAN
	.word 	NA	;;BF33 	;ERASE WORLDRAM FLAG
	.word 	NA	;;BF34	;FIRE AVAILABLE ENEMY BULLET.
	.word 	NA	;;BF35  	;FREE HERO
	.word 	NA	;
	.word 	NA	;;BF37	;CONDITIONAL WORLD END
	.word 	NA	;;BF38	;LAUNCH ENEMY IF IN UPPER HALF
	.word 	NA	;;BF39	;LAUNCH ENEMY IF IN LOWER HALF
	.word 	NA	;;BF3A	;ERASE COLUMN FLAG IF NOT THIS WORLD
	.word 	BF3B	;STAIRS UP RIGHT --- RTB 4/19/90
	.word 	BF3C	;SPECIAL ELEVATOR DOOR -- RTB 4/20/90

;THIS TABLE HAS FLAG BITS FOR EACH FUNCTION.  THE BITS DETERMINE IF
;THE FUNCTION IS ACTIVATED IF THE HERO WALKS ONTO IT, IF THE GUN HITS IT,
;OR IF WE ARE SCANNING THE SCREEN FOR IT.  IN SOME CASES, SUCH AS THE
;LEFT AND RIGHT SCREEN LIMITS, NOTHING HAPPENS HERE.  THOSE SPECIAL CASES
;PUT 0 HERE BUT THEY CAN ALSO SET THE JUMP TO NA.  

;NOTE THAT THE SHOOTABLE BIT IN THE COMMAND BYTE STILL OVERRIDES ENABLING
;SHOOTING HERE.  ALSO, THE BITS CAN BE ADDED TOGETHER.  FLAG USAGE:

;01 = HERO ACTIVATION ALLOWED
;02 = SCAN ACTIVATION ALLOWED
;04 = JUMP INTO IT ALLOWED (WHILE GOING UP FROM JUMP)
;08 = JUMP IN ANOTHER PLANE ALLOWED (WHILE JUMPING UP OR FALLING DOWN 
;     IN PSEUDO 3D AREA)
;10 = HERO IS STUCK TO AN ENEMY
;80 = GUN ACTIVATION ALLOWED

WHATSOK:
	.byte 	%00000000	;NO ACTION OR TARGET.
	.byte 	0	;;%00000000	;
	.byte 	0	;;%10000101 	;02 HEALTH
	.byte 	0	;;%00001101 	;03 DELAY
	.byte 	0	;;%10000101 	;04 FIRE CRACKER 
	.byte 	0	;;%00001101 	;05 PROPEL HERO
	.byte 	0	;;%00000000
	.byte 	0	;;%00000101 	;07 PUT HERO BEHIND BACKGROUND
	.byte 	0	;;%00000101 	;08 PUT HERO IN FRONT OF BACKGROUND
	.byte 	0	;;%00000101 	;09 TRANSPORT HERO TO NEW LOCATION 
	.byte 	0	;;%00011101	;0A
	.byte 	0	;;%00000000	;0B
	.byte 	0	;;%00011101 	;0C NEW WORLD. 
	.byte 	0	;;%10000001 	;ELEVATOR BUTTON.  
	.byte 	0	;;%00000010 	;SET ELEVATOR BUTTON.
	.byte 	0	;;%00000001 	;0F ELEVATOR ENTRANCE.
	.byte 	%00000000
	.byte 	%00000000
	.byte 	%00000000
	.byte 	%00000000
	.byte 	%00000000
	.byte 	%00000000
	.byte 	%00000101 	;16 UPWARDS ENTRANCE TO ANOTHER WORLD
	.byte 	%10000000 	;17 FREE HERO TARGET.
	.byte 	0	;;%10000000 	;HIDDEN LIFE FORCE
	.byte 	0	;;%10000000 	;RAIN CLOUD.  AUX1 = PATH REG#.  PATH REGS = 0-3
	.byte 	0	;;%00000101 	;1A PATH ENTRANCE  AUX1 = PATH REG#.  AUX2 = LEFT/RIGHT
	.byte 	0	;;%00000000 	;UNUSED.
	.byte 	0	;;%00011101 	;GO TO NEXT WORLD
	.byte 	%00000001 	;1D CONNECTING DOOR
	.byte 	0	;;%00000000 	;1E.  USED ONLY FROM DOOR STATE.
	.byte 	0	;;%00000001 	;1F  CLIFF
	.byte 	%00000010 	;20 LAUNCH ENEMY 
	.byte 	%00000010 	;21 FORCED LAUNCH ENEMY
	.byte 	0	;;%10011101 	;22 GOTO WORLD IF ENEMY IS KILLED
	.byte 	%00000000 	;23 LEFT WORLD LIMIT DOESN'T HAPPEN HERE
	.byte 	%00000000 	;24 RIGHT WORLD LIMIT DOESN'T HAPPEN HERE
	.byte 	0	;;%00000001 	;HOLE IN GROUND
	.byte 	0	;;%00011101 	;26 SET SINKING AND DEATH LEVEL.
	.byte 	0	;;%00000001 	;27 DRESSING ROOM
	.byte 	0	;;%00000000
	.byte 	0	;;%00000000
	.byte 	0	;;%10000101 	;2A. PRIZE0-5
	.byte 	0	;;%00000101 	;2B.  CLEAR PATH.
	.byte 	%00011101 	;2C NEW HORIZONTAL LOCATION
	.byte 	0	;;%00011101 	;2D=CLIFF LEVEL
	.byte 	0	;;%10000001 	;SECRET PASSAGE
     	.byte 	0	;;%10011101 	;END SCENE
	.byte 	0	;;%00000010 	;30 SAME AS 20 BUT EXPLODES
	.byte 	0	;;%00000010 	;31 ""      21 ""
	.byte 	0	;;%00000010 	;32 STOP SCREEN SCAN
	.byte 	0	;;%10011101 	;33 ERASE WORLDRAM COLUMN
	.byte 	0	;;%10011101 	;LAUNCH AVAILABLE BULLET
	.byte 	0	;;%10000101 	;35 FREE HERO
	.byte 	0	;;%10011101 	;MAKE ALL ENEMY LAUNCHES BE FAST.
	.byte 	0	;;%00001101 	;37 CONDITIONAL NEW WORLD. 
	.byte 	0	;;%00000010 	;38 LAUNCH ENEMY IF IN UPPER HALF
	.byte 	0	;;%00000010 	;39 LAUNCH ENEMY IF IN LOWER HALF
	.byte 	0	;;%00000010	;3A ERASE FLAG IF NOT SPECIFIC WORLD
	.byte 	%00000001	;3B STAIRS UP RIGHT --- RTB 4/19/90
	.byte 	%00000001	;3C SPECIAL ELEVATOR -- RTB 4/20/90

;HERE ARE THE PIECES OF CODE TO HANDLE EACH OF THE HERO FLAG TYPES

NA:	RTS		;NO ACTION.  ALSO USED BY GUN LOGIC.

;;;THIS SUB WILL ERASE A 1 BY 1 IF THE ROW BYTE SAYS WE SHOULD
;;
;;ERASE1_1:
;;	JSR	POINT_TARGET	;POINT TO THE THING TO ERASE
;;	BCS	E1110		;SKIP IF NOT SUPPOSED TO

;;ERASEX_Y:
;;	STX	HLTCOL
;;	STY	HLTROW
;;	LDA	#$FA
;;	STA	HLTCHAR
;;	LDA	#$20
;;	JSR	ORBLOCKS	;SET FLAG TO CAUSE BLOCK ERASE	
;;E1110:	RTS

;;;THIS SUB WILL ERASE A 1 WIDE BY 2 HIGH IF THE ROW BYTE SAYS WE SHOULD
;;
;;ERASE1_2:
;;	JSR	POINT_TARGET	;POINT TO THE THING TO ERASE
;;	BCS	E1210		;SKIP IF NOT SUPPOSED TO
;;
;;E1205:	STX	GBTCOL
;;	STY	GBTROW
;;	LDA	#1
;;	JSR	ORBLOCKS	;SET FLAG TO CAUSE BLOCK ERASE	
;;E1210:	RTS
;;
;;;THIS SUB WILL ERASE A 2 WIDE BY 1 HIGH IF THE ROW BYTE SAYS WE SHOULD.
;;;THE COMMAND IS ASSUMED IN THE LEFT SQUARE OF THE 2.  USE ER2_1B FOR
;;;RIGHT HALF.
;;
;;ERASE2_1:
;;	JSR	POINT_TARGET	;POINT TO THE THING TO ERASE
;;	BCS	E2110		;SKIP IF NOT SUPPOSED TO
;;
;;E2105:	STX	PRCOL
;;	STY	PRROW
;;	LDA	#$80
;;	JSR	ORBLOCKS	;SET FLAG TO CAUSE BLOCK ERASE	
;;E2110:	RTS
;;
;;ER2_1B:				;CALL HERE FOR COMMAND IS RIGHT HALF.
;;	JSR	POINT_TARGET
;;	BCS	E2110
;;	DEX
;;	JMP	E2105
;;
;;;THIS SUB WORKS LIKE ERASE1_2 EXCEPT THAT THE COMMAND IS ASSUMED IN THE
;;;LOWER SQUARE OF THE 2.
;;
;;ERASEL_2:
;;	JSR	POINT_TARGET
;;	BCS	E1210
;;	DEX
;;	JMP	E1205
;;
;;;THIS SUB WILL ERASE A 2 BY 2 IF THE ROW BYTE SAYS WE SHOULD. COMMAND
;;;IS ASSUME LOCATED IN LOWER LEFT CORNER.
;;
;;ERASE2_2:
;;	JSR	POINT_TARGET	;POINT TO THE THING TO ERASE
;;	BCS	E2210		;SKIP IF NOT SUPPOSED TO
;;
;;E2205:	DEY			;MOVE DOWN 1 COL TO ERASE AREA
;;	STX	GSQCOLL
;;	STY	GSQROW
;;	LDA	#0
;;	STA	GSQCOLH
;;	LDA	#2
;;	JSR	ORBLOCKS	;SET FLAG TO CAUSE BLOCK ERASE	
;;E2210:	RTS
;;
;;ER2_2B:	JSR	POINT_TARGET	;CALL HERE FOR 2 BY 2 IN LOWER RIGHT CORNER.
;;	BCS	E2210
;;	DEX
;;	JMP	E2205

;;;THIS COMMAND IS ALSO SHARED BY HIDDEN LIFE FORCE WHICH CONVERTS ITSELF
;;;INTO THIS COMMAND.
;;
;;BF02:	JSR	INCHEALTH 	;02. LIFE FORCE.  ADD 4 TO HEALTH
;;	JSR	ERASE1_1
;;	JSR	CLEAR_IF
;;	JMP	HEROSOUND

;THIS ROUTINE WILL INCREMENT THE HEALTH COUNT BUT IT DOES NOT MAKE A NOISE.
;IT ADDS 4 TO THE COUNT BUT WILL NOT WRAP ABOVE 20.

INCHEALTH:
	LDA	HEALTH	 	;02. LIFE FORCE.  ADD 4 TO HEALTH
	CLC
	ADC	#4
	BCC	IHL10
	LDA	#-1
IHL10:	STA	HEALTH
	RTS


;;BF03:	LDA	AUX1    	;03 PAUSE.  DELAY AUX1
;;	STA	HERODELAY	;SET DELAY
;;	JSR	ERASE1_2	
;;	JSR	CLEAR_IF
;;	LDA	AUX2
;;	BNE	BF0310
;;	JSR	HEROSOUND	;MAKE THE SOUND IF ANY
;;BF0310:	RTS

;;BF04: 	LDA	ROWBYTE		;04 EXPLOSIVE CHARGE.  SEE IF FOOT SENSITIVE
;;	BPL	BF045
;;	LDA	TESTBOT		
;;	EOR	ROWBYTE
;;	AND	#$1F
;;	BNE	BF0410		;MUST BE ON THE COMMAND ROW IF AUX BIT 1 SET
;;
;;BF045:	JSR	ERASEL_2	;ERASE IT IF SPECIFIED
;;	JSR	SHOW_EXPLODE	;SHOW THE EXPLOSION
;;	JSR	HEROSOUND	;MAKE THE SOUND
;;	JSR	CLEAR_IF	;GET RID OF IT NOW
;;	LDA	WHATKIND	;SEE IF SHOT HIT IT
;;	BMI	BF0410
;;	LDA	EXPLODEPROOF	;SEE IF EXPLOSION PROTECTION AVAILABLE
;;	BNE	BF0415
;;	JSR	DIEHERO		;MAKE THE HERO DIE IF HE WALKS ON IT.
;;BF0410:	RTS
;;BF0415:	DEC	EXPLODEPROOF
;;	RTS

;;BF05:  	LDA	ROWBYTE		;05=PROPEL HERO
;;	BPL	BF0510		;SKIP IF JUST ADDING.
;;
;;	LDA	AUX1		;NOT ADDING, ITS A REPLACE
;;	BEQ	BF0505		;SKIP IF ZERO VALUE (NO CHANGE)
;;	STA	XMOMENTUM
;;BF0505:	LDA	AUX2
;;	BEQ	BF0507
;;	STA	YMOMENTUM
;;BF0507:	JMP	BF0513
;;
;;BF0510:	LDA	AUX1   		;WE ARE ADDING
;;	CLC
;;	ADC	XMOMENTUM
;;	BVS	BF0512
;;	STA	XMOMENTUM
;;BF0512:	LDA	AUX2
;;	CLC
;;	ADC	YMOMENTUM
;;	BVS	BF0513
;;	STA	YMOMENTUM
;;BF0513:	JMP	HEROSOUND

;;SHOW_LIFE:			;SHARED CODE TO SHOW A LIFE FORCE AT X,Y
;;	LDA	#LIFECHAR
;;	STA	HLTCHAR
;;SLF10:
;;	STX	HLTCOL
;;	STY	HLTROW
;;	LDA	#$20		;SET FLAG TO PAINT A LIFE FORCE THERE
;;	JMP	ORBLOCKS

;;BF07A:			 	;07 PUT HERO BEHIND IF GOING RIGHT 
;;	JSR	HEROSOUND
;;	LDA	XMOMENTUM
;;	BPL	BF07
;;	JMP	BF08

;THIS STATE MAY ALSO BE CALLED AS A SUB.  IT WILL PUT THE HERO BEHIND
;THE BACKGROUND.

BF07:	LDX	#$20
	JMP	FRONTHERO

;;BF08A:			 	;07 PUT HERO BEHIND IF GOING LEFT
;;	JSR	HEROSOUND
;;	LDA	XMOMENTUM
;;	BMI	BF07
;;	JMP	BF08

;THIS STATE MAY ALSO BE CALLED AS A SUB.  IT WILL PUT THE HERO IN FRONT OF
;THE BACKGROUND.

BF08:	LDX	#0	;08 PUT HERO IN FRONT OF BACKGROUND

FRONTHERO:
	LDA	#HEROSLOT
	JSR	INFRONT
BF0810:	RTS

;;;BF09 IS SHARED BY BF14 WHICH FAKES IT OUT.
;;
;;BF09: 				;09= TRANSPORT HERO TO NEW LOCATION
;;	LDA	AUX1		;GET REQUESTED BACKGROUND POSITION FOR X
;;	CMP	WORLDWIDE	;MAKE SURE ITS WITHIN THE BACKGROUND
;;	BCC	BF09B
;;BF09A:	RTS			;IGNORE COMMAND IF NOT ON SCREEN
;;BF09B:	LDA	AUX2		;AND THEN CHECK Y LOCATION
;;	CMP	BACKHIGH	
;;	BCS	BF09A	
;;
;;	LDA	AUX1
;;	CLC
;;	ADC	BACKFIX		;MAKE X POSITION USING THE LEFT SIDE LIMIT
;;	TAX
;;	STA	SAFEBYTE		;SAVE A COPY FOR CORRECTION
;;	LDA	HEROWIDE	;GET HALF WIDTH IN PIXELS
;;	LSR	A
;;	LSR	A		;MAKE CELL WIDTH
;;	CLC
;;	ADC	SAFEBYTE		;MAKE CENTER LOCATION FOR HEROCOL
;;	STA	HEROCOL
;;	LDA	#0
;;	STA	HEROCOL+1	
;;
;;	LDY	AUX2		;USE Y AS IS
;;BF09RTB:			;MY LABEL FOR CMD 3C  RTB 4/20/90
;;	STY	HEROTOP
;;	LDX	HEROCOL
;;	LDA	HEROCOL+1
;;	JSR	VISUAL_POINT	;MAKE VISUAL POINT WITHIN BACKGROUND TO PUT HIM
;;	JSR	PUTFIND
;;	JMP	HEROSOUND

;THIS SUB WILL DO PUTSPRT FOR THE HERO AND KEEP HEROX AND Y IN STEP.  DON'T
;CALL PUTSPRT EXCEPT THROUGH HERE!

PUT_HERO:
	STX	HEROX
	STY	HEROY
	LDA	#HEROSLOT
	JSR	PUTSPRT		;PUT THE SPRITE THERE
	RTS

SOLIDHERO:
	LDA	#HEROSLOT
	JMP	SOLID		;RESET HIS SOLID CHAR DEFINITION

;;BF0A:	STA	UPWORLD		;SPECIFY VERTICAL WORLD CONNECTIONS
;;	LDA	AUX2
;;	STA	DNWORLD
;;	RTS

;;BF0C: 	LDA	ROWBYTE		;0C = NEW WORLD OR NEW PLACE
;;	BPL	BF0C02
;;	JMP	NEWPLACE	;WE ARE MOVING TO A NEW PLACE IN THIS WORLD
;;
;;BF0C02:	LDA	AUX2		;NEW WORLD.  AUX1 HAS THE WORLD TO USE
;;	STA	STATEX		;SAVE SPECIAL CONDITION
;;	CMP	#1		;SEE IF SPECIAL OPTIONS
;;	BNE	BF0C10	
;;	LDA	#HEROSLOT
;;	JSR	KILLSPRT	;MAKE THE SPRITE DISAPEAR
;;
;;;SHARED ENTRY POINT TO GO TO WORLD AUX1 AFTER WAITING 2 SECONDS.
;;
;;BF0C05:	LDA	#120
;;	STA	WORLD_DONE
;;	LDA	AUX1
;;	STA	FOLLOW_WORLD	;IF DISAPEAR AND WAIT, SET NEXT WORLD
;;	JSR	ALLSILENCE
;;	LDX	#DIS0CWAIT & $FF
;;	LDY	#DIS0CWAIT >> 8
;;	JMP	SET_NMI		;SET TO WAIT 2 SECONDS
;;
;;BF0C10:	CMP	#2
;;	BEQ	BF0C05
;;	CMP	#3
;;	BEQ	BF0C05
;;	LDA	AUX1
;;	STA	WORLD_REQUEST	
;;	JMP	HEROSOUND

;;;THIS ROUTINE IS USED TO IMPLEMENT COMMAND 22 WHERE AN ENEMY IS DESIGNATED
;;;AS THE ENEMY THAT WHEN KILLED ACTIVATES A WORLD.  GOTOWORLD SHOULD HAVE
;;;BEEN SET AS THE NON-ZERO WORLD NUMBER TO GO TO AND MAINENEMY AS THE
;;;COLUMN OF THE ENEMY.  LOAD A WITH THE COLUMN THAT WAS JUST KILLED AND
;;;CALL.  IT CHECKS FOR NOT ACTIVE (GOTOWORLD=0).
;;
;;MAINCHECK:
;;	CMP	MAINENEMY	;SEE IF ENEMY KILLED MATCHES MAIN ENEMY
;;	BNE	MCK10
;;	LDA	#2
;;	STA	STATEX		;ZERO FLAG USED BY BF0C05
;;	LDA	GOTOWORLD	;IF MATCH, IS IT ACTIVE?
;;	BEQ	MCK10
;;	CMP	#-1		;IS THE GO TO WORLD END OF GAME MODE?
;;	BEQ	MCK20
;;	STA	AUX1
;;	BNE	BF0C05		;IF SO, GO DO IT
;;MCK10:	RTS
;;MCK20:	JMP	GOEND

;;;THIS ROUTINE WILL TAKE AUX1 AS A NEW LEFTMOST SCREEN COLUMN AND AUX2
;;;AS A ROW/2+(COL/2)*16 NEW HERO POSITION AND SET IT UP WITHIN THE 
;;;CURRENT WORLD.
;;
;;NEWPLACE:
;;	JSR	HIDEENEMIES	;GET RID OF THE ENEMIES WE HAVE
;;	LDA	#0
;;	STA	XBACK+1
;;	LDX	CURWORLD
;;	LDA	BACKFIX		;GET THE STARTING OFFSET IN THIS WORLD
;;	CLC
;;	ADC	AUX1		;GET NEW OFFSET TO MOVE TO
;;	JSR	SHIFTXBACK	;MAKE STARTING COLUMN INTO PIXEL COLUMN
;;
;;	JSR	QUICKMOVE	;MOVE TO THE NEW LOCATION
;;
;;	LDA	AUX2
;;	AND	#$0F
;;	ASL	A
;;	ASL	A
;;	ASL	A
;;	ASL	A		;MAKE PIXEL ROW
;;	TAY
;;	LDA	AUX2
;;	AND	#$F0
;;	TAX			;GET PIXEL COL
;;	JSR	PUTFIND
;;	JMP	SCANFLAGS	;SCAN FOR ENEMIES AT DESTINATION

;;BF0D:	STA	ELEVWORLD 	;ELEVATOR BUTTON.  
;;	RTS
;;
;;BF0E:	STA	ELEVWORLD 	;SET ELEVATOR BUTTON
;;	JMP	CLEAR_TARGET	;AND THEN CLEAR IT SO IT WON'T HAPPEN AGAIN
;;
;;BF0F:				;0F ELEVATOR ENTRANCE. AUX1 = DOWN BUTTON,2=UP
;;	JSR	PUSHING_UP	;MAKE SURE WE ARE IN COMMAND PUSHING UP.
;;	BNE	BF0F5
;;BF0F4: 	RTS
;;
;;BF0F5: 	LDA	AUX1		;ASSUME USING AUX1 FOR NEXT WORLD
;;	BNE	BF0F10
;;	LDA	ELEVWORLD	;IF WORLD 0, USE ELEVATOR WORLD
;;BF0F10:	STA	FOLLOW_WORLD
;;
;;;WE HAVE SET UP AS IF WE ARE GOING TO ENTER THE ELEVATOR.  SEE IF THERE ARE
;;;QUALIFYING CONDITIONS.
;;
;;	LDA	AUX2
;;	BEQ	BF0F40
;;	BMI	BF0F14
;;
;;;ITS A LOCKED DOOR.  MAKE SURE THE PRIZE SPECIFIED IS PRESENT.  THE HIGH
;;;BITS HAVE THE NUMBER REQUIRED.  THE LOW HAVE THE PRIZE.
;;
;;	AND	#$0F		;GET PRIZE NUMBER
;;	TAX
;;	LDA	AUX2
;;	JSR	DIV16		;MAKE COUNT REQUIRED
;;	STA	SAFEBYTE
;;	LDA	PRIZE0,X	;SEE IF THERE ARE ENOUGH
;;	SEC
;;	SBC	SAFEBYTE
;;	BCS	BF0F12
;;	RTS
;;BF0F12:	STA	PRIZE0,X
;;	JMP	BF0F40		;IF WE HAVE ONE, LOWER COUNT AND PROCEED
;;
;;;ALL ENEMIES MARKED MUST DEFEAT MUST BE DEFEATED.  SEE IF THAT IS SO.
;;
;;BF0F14:	LDY	FLAGSLEN	;GET WIDTH OF WORLD
;;BF0F15:	LDA	WORLDRAM-1,Y	;GET NEXT FLAG TO CHECK
;;	AND	#$FE		;REMOVE LOWEST BIT
;;	CMP	#$20
;;	BEQ	BF0F20
;;	CMP	#$30
;;	BNE	BF0F25
;;
;;BF0F20:	LDA	WORLDAX1-1,Y	;IF THIS IS ONE AND NOT GONE YET, GET ENEMY #
;;	TAX
;;	LDA	SPECENEMY,X
;;	AND	#$08		;SEE IF MUST DEFEAT BIT IS SET
;;	BEQ	BF0F25		;IF NOT, WE ARE OK.
;;
;;	LDA	AUX2
;;	STA	FOLLOW_WORLD	;SET TO REQUEST THIS INSTRUCTIONS SCREEN
;;	LDA	CURWORLD
;;	STA	DOORMSG		;SET SPECIAL MODE THAT RETURNS TO THIS WORLD
;;	JMP	BF0F40
;;
;;BF0F25:	DEY	      		;TRY NEXT
;;	BNE	BF0F15
;;
;;;THERE ARE NO QUALIFYING CONDITIONS.  GO AHEAD AND ENTER THE DOOR OR ELEVATOR
;;
;;BF0F40:	
;;;---------SET HERO TO NON-HAMMER MAN! RTB 5/6/90
;;	JSR	REMHAM		;REMOVE HAMMER MAN?
;;;-----------------------------------------------
;;	JSR	ELEVPTRS	;MAKE THE ELEVATOR POINTERS
;;
;;	LDA	#0
;;	STA	ELEVSTATE	;SET STATE IF OPENING DOORS
;;
;;	JSR	KILLBULLET	;GET RID OF OUR BULLET
;;
;;	LDX	#WORLDDOOR & $FF
;;	LDY	#WORLDDOOR >> 8	;SET STATE FOR NMI TO DOOR ENDING
;;	JMP	SET_NMI

;THIS SUB WILL MAKE ELEVATOR DOOR ANIMATION LOCATIONS IN ELEVROW AND
;ELEVCOL AND AN ANIMATION # IN ELEVDOOR FROM ROWBYTE AND HEROCOL.

ELEVPTRS:
	LDA	ROWBYTE		;GET ROW ELEVATOR COMMAND IS ON
	AND	#$1F
	SEC
	SBC	#3
	STA	ELEVROW
	LDA	HEROCOL
	CLC
	ADC	BACKFIX		;MAKE CORRECTION TO FIND LOC WITHIN BACKGROUND
	STA	ELEVCOL		;SAVE HERE FOR A WHILE
	LDA	ROWBYTE		;GET AUX BIT 1
	ROL	A
	LDA	ELEVCOL
	SBC	#1		;BACK UP ACCORDING TO AUX BIT 1
	AND	#$3F		;SINCE WE DO THIS, WE CAN IGNORE HEROCOL+1
	STA	ELEVCOL		;SET ANIMATION LOCATIONS. 
	LDA	#0
	STA	ELEVDOOR	;AND ASSUME ANIMATION 0
	LDA	ROWBYTE
	AND	#$40		;AUX BIT 2?
	BEQ	EVP10
	INC	ELEVDOOR
EVP10:
;;	LDA	ROWBYTE
;;	AND	#$20		;DON'T USE ANIMATION AT ALL?
;;	BEQ	EVP20
;;     	LDA	#-1
;;	STA	ELEVDOOR
;;EVP20:
	RTS

;THIS SUB WILL CHECK IF WE ARE PUSHING UP WITH THE UP ARROW KEY AND ARE
;ON THE COMMAND ROW OR THE ONES ABOVE AND  BELOW IT.  ON RETURN, Z IF NOT, 
;NZ IF WE ARE.

PUSHING_UP:
;--------- MAKE A DELAY BETWEEN DOOR PUSHES!  RTB 5/6/90
	LDA	DOORDLY
	BEQ	DORDLYZ
	DEC	DOORDLY
	JMP	PUP4	;SKIP FOR NOW!
DORDLYZ:
;------------------------------------------------------
	LDA	J1FLAGS		
	ORA	J2FLAGS
	AND	#UP		;UP MUST BE PUSHED AT SAME TIME TO ENTER IT.
	BNE	PUP5
PUP4: 	LDA	#0
	RTS

;--------------- CHECK ALSO FOR PUSHING DOWN! ---- RTB 4/19/90
PUSHDOWN:
	LDA	J1FLAGS
	ORA	J2FLAGS
	AND	#DOWN		;DOWN MUST BE PUSHED AT SAME TIME TO ENTER IT.
	BNE	PUP5
PUP4S:	LDA	#0
	RTS
;-------------------------------------------------------------

PUP5:
;-------------- SPECIAL ELEVATOR CHECK 3C ---- RTB 4/20/90
	LDA	FLAGBYTE
	CMP	#$3C		;IF COMMAND 3C IGNORE ROW!
	BEQ	PUP6  
;---------------------------------------------------------
 	LDA	ROWBYTE		;GET ROW COMMAND IS ON
	AND	#$1F		;KEEP ONLY THE ROW
	STA	SAFEBYTE
	LDA	HEROSFEET	;GET HERO'S FEET LOCATION
	JSR	DIV8
	DEC	SAFEBYTE	;START WITH ROW ABOVE CHECK
	CMP	SAFEBYTE	;SEE IF HERO'S FEET IN THE COMMAND ROW
	BEQ	PUP6		;IF SO, ITS GOOD
	INC	SAFEBYTE
	CMP	SAFEBYTE	;COMMAND ROW IS GOOD TOO
	BEQ	PUP6		
	INC	SAFEBYTE
	CMP	SAFEBYTE	;AND THE ONE BELOW THAT
	BNE	PUP4
PUP6:	LDA	#-1
	RTS

BF16:				;16. UPWARDS ENTRANCE TO ANOTHER WORLD OR LOC
	JSR	PUSHING_UP	;MAKE SURE WE ARE IN TOP 4 PUSHING UP.
	BNE	BF165
BF164: 	RTS

BF165:
	LDA	AUX1		;ASSUME NEW WORLD WHEN DONE
	STA	FOLLOW_WORLD
	LDA	#-1
	STA	ELEVDOOR	;DISABLE ANIMATIONS
	LDA	#0
	STA	ELEVSTATE	;RESET STATE FOR WORLDDOOR
	LDA	ROWBYTE		;SEE IF NEXT WORLD COMMAND
	BMI	BF1620
	JSR	KILLBULLET	;GET RID OF OUR BULLET
	LDX	#WORLDDOOR & $FF
	LDY	#WORLDDOOR >> 8	;SET STATE FOR NMI TO DOOR ENDING

BF1610:	LDA	#0		;RESET STATE FLAG FOR OUR FINISH CODE
	STA	ELEVSTATE
        JSR     SET_NMI         ;GO SET TO Y:X FOR STATE OF NMI
;-----------------------------------JGT 05/12,27/90----------------
        LDA     #0
        STA     HITFLAG
        STA     INVULN          ;reset to proper hero anim./spr.
                LDA     #HEROSLOT
                LDX     CUR_HERO
                LDY     CUR_HERO+1
                JSR     SWAPSPRT
;;              LDA     #HEROSLOT
;;              LDX     HEROX
;;              LDY     HEROY
;;              JSR     PUTSPRT
;---------------------------------------------------------------
        RTS

;THE COMMAND IS TO GO TO A NEW LOCATION WITHIN THIS WORLD.  THIS
;ENTRY POINT SHARED WITH COMMAND 1D.

BF1620:	LDA	AUX1		;GET NEW LEFTMOST SCREEN POSITION
	CMP	#-1		;SEE FLOATING
	BEQ	BF1621
;;	JSR	COLADJ		;IF NOT, MAKE NEW LEFTMOST POSITION
;;	LDA	SUBSVAR1
	STA	STARTCOL
;;	LDA	SUBSVAR2
;;	STA	STARTCOL+1	;TAKE SPECIFIED LOCATION
	LDA	#-1
	STA	STATEX		;AND SET NEW POSITION FLAG
	JMP	BF1625

BF1621:	LDA	#0
	STA	STATEX		;ASSUME FLOATING WILL WORK WITHOUT RE-INIT
	LDA	AUX2		;IF FLOATING, GET DESIRED HERO LOCATION
;;	JSR	COLADJ
	SEC
;;	LDA	SUBSVAR1
	SBC	STARTCOL
	STA	STATEY		;MAKE DIFFERENCE TO WHERE ITS WANTED
;;	LDA	SUBSVAR2
;;	SBC	STARTCOL+1
	BCC	BF1622		;IF OVERFLOW, POINT IS PAST LEFT
	LDA	STATEY		;SEE IF RESULT IS IN SCREEN RANGE
	CMP	#2
	BCC	BF1622
	CMP	#30
	BCC	BF1625		;IF STARTCOL IS IN RANGE, USE IT

;WE ARE SUPPOSED TO LET THE POINT FLOAT BUT IT ISN'T IN RANGE SO WE GENERATE
;THE LEFT POINT AUTOMATICALLY.

BF1622:	LDA	AUX2		;GET HERO'S POSITION
	SEC
	SBC	#16		;MOVE LEFT BY 1/2 SCREEN
	STA	STARTCOL
;;	LDA	SUBSVAR2
;;	SBC	#0
;;	STA	STARTCOL+1
	BCS	BF1623
       	LDA	#0		;IF TOO FAR LEFT, USE 0
	STA	STARTCOL
;;	STA	STARTCOL+1
BF1623:	LDA	#-1
	STA	STATEX		;SET FLAG OF NEED RE-INIT

	LDA	RIGHTCOL
	SEC
	SBC	STARTCOL
;;	LDA	RIGHTCOL+1
;;	SBC	STARTCOL+1	;MAKE SURE NEW COLUMN IS NOT TOO HIGH
	BCS	BF1625
	LDA	RIGHTCOL	
	STA	STARTCOL
;;	LDA	RIGHTCOL+1
;;	STA	STARTCOL+1	;IF SO, GO RIGHTMOST ALLOWED.

;NOW STARTCOL HAS THE NEW LEFTMOST BACKGROUND POSITION AND ITS IN RANGE
;TO MAKE THE HERO SHOW UP ON SCREEN.

BF1625:
	LDA	AUX2		;GET HERO POSITION WITHIN BACKGROUND
;;	JSR	COLADJ		;AND MAKE INTO CORRECTED COLUMN
	SEC
;;	LDA	SUBSVAR1
	SBC	STARTCOL
	JSR	TIMES8		;MAKE PIXEL LENGTH IN COLUMNS
	SEC
	SBC	HEROWIDE
	BCS	BF1630
	LDA	#0
BF1630:	STA	STATEY		;SET NEW COLUMN FOR HERO	
	JSR	KILLBULLET	;GET RID OF OUR BULLET
	LDX	#ENTERDOOR & $FF
	LDY	#ENTERDOOR >> 8	
	JMP	BF1610

BITMASK:	.byte  1,2,4,8,16,32,64,128	;BIT MASKS FOR A GIVEN INDEX

BF17: 	LDA	WHATKIND	;FREE HERO TARGET
	BPL	BF1710		;IT RESPONDS ONLY TO SHOOTING

	LDX	AUX2		
	LDA	BITMASK,X	;GET BIT MASK FOR THIS HERO
	AND	FREEFLGS	;SEE IF THIS HERO AVAILABLE STILL
	BEQ	BF1709		;IF NOT, RESET TARGET.

	JSR	HEROSOUND	;IF SO, MAKE THE SOUND
	
	LDX	TESTINDX
	DEC	WORLDAX1,X	;SEE IF TIME TO GIVE THE FREE HERO
	BNE	BF1710		;SKIP IF NOT	

BF1702:				;BF35 SHARES WITH FREE HERO TARGET
;;        LDA     #COLIDESLOT
;;        JSR     KILLSPRT
;;        LDX     CUR_HERO
;;        LDY     CUR_HERO+1
;;        LDA     #COLIDESLOT
;;        JSR     INITSPRT
;;        LDA     #COLIDESLOT
;;        JSR     AUTOKILL        ;AND MAKE IT AUTOKILL
;;
;;        JSR     POINT_TARGET
;;;;      PHA                     ;SAVE TOP BYTE OF X
;;        TYA
;;        SEC
;;        SBC     HEROROWS        ;PUT HERO EXACTLY ABOVE TARGET
;;        BCS     BF1703          ;SKIP IF WE COULD
;;        LDA     #0              ;STOP AT TOP IF WE COULDN'T
;;BF1703: TAY
;;;;      PLA
;;        JSR     VISUAL_POINT    ;POINT TO THE TARGET ON SCREEN USING SPRITES
;;        TXA
;;        SEC
;;        SBC     HEROWIDE        ;AND CENTER HIM
;;        BCC     BF1705
;;        TAX                     ;CENTER ON X
;;BF1705: LDA     #COLIDESLOT
;;        JSR     PUTSPRT

	JSR	INCHERO

	LDX	AUX2		
	LDA	BITMASK,X	;GET BIT MASK FOR THIS HERO
	EOR	FREEFLGS	
	STA	FREEFLGS	;CLEAR THIS FREE HERO, WE USED IT UP
BF1709:	JSR	CLEAR_TARGET	;AND CLEAR THE TARGET TO PREVENT REPEATS
BF1710:	RTS

;THIS ROUTINE WILL INCREMENT THE HERO COUNT AND MAKE A NOISE.  THE HERO
;COUNT WILL NOT GO ABOVE 99.

INCHERO:
	INC	HEROS
	JSR	FREENOISE
	LDA	HEROS
	CMP	#100	;DON'T ALLOW TOO MANY
	BNE	IH10
    	DEC	HEROS	;SET BACK TO 99 IF TOO MANY.
IH10:	RTS

FREENOISE:			;THIS ROUTINE WILL MAKE THE FREE HERO SOUND
	JSR	STOP_HSOUND
	LDX	#FREEHERO & $FF
	LDY	#FREEHERO >> 8
	JSR	PLAY_HSOUND	;IF SO, PLAY A SONG
	RTS

;;BF18: 				;HIDDEN LIFE FORCE.
;;	LDA	WHATKIND	;MUST BE A SHOT TO OPEN THIS ONE
;;	BPL	BF1810
;;	LDX	TESTINDX
;;	DEC	WORLDAX1,X	;SEE IF TIME TO GIVE THE 
;;	BNE	BF1810		;SKIP IF NOT	
;;
;;	LDA	WORLDRAM,X
;;	AND	#$80
;;	ORA	#2
;;	STA	WORLDRAM,X	;WHEN IT OPENS, CONVERT IT TO A LIFE FORCE
;;
;;	JSR	POINT_TARGET
;;	JSR	SHOW_LIFE	;AND SHOW THE LIFE FORCE
;;BF1810:	RTS

;;BF1C:	LDA	CURWORLD	;1C NEXT WORLD.  
;;	CLC
;;	ADC	#1
;;	STA	WORLD_REQUEST
;;	RTS

BF1D:				;1D. CONNECTING DOOR
	JSR	PUSHING_UP	;MAKE SURE WE ARE IN TOP 4 PUSHING UP.
	BNE	BF1D5
BF1D4: 	RTS

BF1D5:
	LDA	ROWBYTE
	AND	#$20		;Check if we need a KEYCARD (prize #0).	-KHB
	BEQ	BF1D6		;Continue if not.
	LDA	PRIZE0
	BNE	BF1D6		;Continue if we have it.
	RTS

BF1D6: 	JSR	ELEVPTRS	;MAKE THE ELEVATOR POINTERS
	JMP	BF1620		;AND GO SHARE ENDING OF WHERE TO GO

;;BF1F:  	LDA	GRAVROW		;CLIFF.   SEE IF AUX1 IS TO LEFT OR RIGHT
;;	BEQ	BF1F50		;IF IN GRAVITY REGION, NO FUNCTION
;;	LDA	GRAV+1
;;	BEQ	BF1F50		;IF NO GRAVITY, WE ALSO DON'T DO IT.
;;	LDA	JUMPING
;;	ORA	JUMPSTART
;;	ORA	CANTDIE
;;	BNE	BF1F50
;;	LDX	AUX1
;;	LDY	AUX2
;;	CPX	HEROWIDE	;WE ARE SLOPPY HORIZONTALLY FOR NOW
;;	BCC	BF1F50
;;
;;	LDA	ROWBYTE
;;	AND	#$40		;SEE IF AUX2 IS ABOVE OR BELOW
;;	BEQ	BF1F30
;;	DEY
;;	CPY	HEROSFEET	;IF ITS CLEAR ABOVE, SEE IF FEET ARE ABOVE IT
;;	BCS	BF1F40
;;BF1F50:	RTS
;;
;;BF1F30:	CPY	HEROSFEET	;ITS CLEAR BELOW THIS.
;;	BCS	BF1F50
;;
;;BF1F40:	LDA	ROWBYTE
;;	BPL	BF1F45
;;	JSR	BF07		;PUT HERO BEHIND IF USER WANTS IT
;;BF1F45:	LDX	#CLIFFEND & $FF      
;;	LDY	#CLIFFEND >> 8		
;;	JMP	SET_NMI	 	

BF20: 	JSR	NOTLAUNCHED	;20. LAUNCH ENEMY. MAKE SURE NOT ALREADY GOING
	JSR	FINDENEMY	;TRY TO FIND ONE
	BNE	BF1D4		;DONE IF NONE.
BF2005:	LDY	#0		;SET NON-EXPLODING FLAG
	
;SHARED ENTRY POINT FOR EXPLODERS.  Y HAS THE VALUE TO "OR" TO THE
;ENEMY FLAGS TO GET SPECIAL ENEMY TYPES SUCH AS EXPLODING (04).  THE
;ENEMY IS AVAILABLE FOR SURE.

BF2010:	STY	SAFEWORD		;SAVE Y HERE FOR A WHILE
	STX	SAFEBYTE		;SAVE ENEMY INDEX HERE FOR LATER USE

	LDA	ROWBYTE
	AND	#$E0		;GET FAST AND PERMA LAUNCH AND LAUNCH BEHIND
	ORA	SAFEWORD		;OR IN EXPLODING FLAG IF ANY
	ORA	#8		;SET NEED GENERATION BIT
	STA	ENEMYFLGS,X	;THIS IS OUR FINAL FLAG 
	LDA	#0
	STA	ENEMYFREEZE,X	;AND UNFREEZE THE ENEMY TOO.
	LDA	TESTINDX
	STA	ENEMYRAM,X	;SET THE ORIGIN OF THIS LAUNCH IN CASE ENEMY
				;IS KILLED.

;MAKE THE BACKGROUND LOCATION TO LAUNCH FROM

	LDA	#0
	JSR	MAKELOC		;CREATE THE COLUMN IN A:X
;;	PHA
	TXA
	LDX	SAFEBYTE		;GET BACK INDEX
	STA	LAUNCHXL,X		;SAVE THEM HERE
	STA	GSQCOLL		;ASSUME NEED ERASE TOO
;;	PLA
;;	STA	LAUNCHXH,X	;AND MUST USE HIGH BYTE TOO
;;	STA	GSQCOLH
	LDA	AUX2		;GET ROW TO USE
	STA	LAUNCHY,X
	STA	GSQROW		

;SEE IF SHOOTABLE.  MEANS WE MIGHT NEED TO ERASE.

	LDA	FLAGBYTE	;SHOOTABLE?
	BPL	BF2016		;SKIP IF NOT
	LDA	WHATKIND	;IF SHOOTABLE, MUST BE SHOT
	BMI	BF2012		
BF2011:	RTS			;IF NOT, DON'T DO IT

BF2012:	LDA	ENEMYFLGS,X	;IF SHOOTABLE, WE NEVER LAUNCH BEHIND.
	AND	#$DF		
	STA	ENEMYFLGS,X	;RESET BIT TO PREVENT IT

	LDA	ROWBYTE		;IF SO, ERASE 2 BY 2?	
	AND	#$20
	BNE	BF2016		;SKIP IF NOT

	LDA	#2		;SET ERASE 2 BY 2 FLAG
	JSR	ORBLOCKS
	JMP	BF2017

;WASN'T SHOOTABLE.  CAN'T BE SHOT THEN.

BF2016:	LDA	WHATKIND
	BMI	BF2011

;ALL SET UP TO LAUNCH THIS ONE.

BF2017:	LDA	AUX1		;GET ENEMY TYPE
	CMP	#80		;Killer RAT?
	BNE	BF2018		;Continue if not.
	LDA	BUGS_LEFT
	CMP	#1
	BNE	BF2011		;Abort launch if not only bug left.
	LDA	AUX1

BF2018:	STA	ENEMY0,X	;SET AS ACTIVE ENEMY
	RTS

BF21: 	JSR	NOTLAUNCHED	;21. FORCED ENEMY LAUNCH. MAKE SURE NOT ACTIVE
	JSR	FREEENEMY	;THEN FORCE LAUNCHING ONE
	JMP	BF2005

;THIS SUB WILL MAKE SURE THE ENEMY THAT WOULD BE LAUNCHED BY TESTINDX
;IS NOT ALREADY ACTIVE.  IT CHECKS ENEMYRAM TO SEE IF THERE IS A MATCH.
;IF THERE IS, IT POPS THE RETURN ADDRESS ON THE STACK AND RETURNS.

NOTLAUNCHED:
	LDY	#0		;Reset SHARK counter.
	LDX	#5
NLH10: 	LDA	ENEMY0,X	;MAKE SURE ITS VALID
	CMP	#-1
	BEQ	NLH5

	CMP	#76		;Check for CASE in warehouse.	-KHB
	BNE	NLH12		;Continue if not CASE.
	CMP	AUX1		;Check if trying to launch CASE again.
	BEQ	NLH20		;Abort if so.
	JMP	NLH14		;Continue.

NLH12:	CMP	#57		;Check for SHARK in WATER level.	-KHB
	BNE	NLH14		;Continue if not SHARK.
	INY			;Increment SHARK counter.
	CMP	AUX1		;Check if trying to launch SHARK now.
	BNE	NLH14		;Continue if not.
	CPY	#2		;Check if already 2 SHARKs active.
	BEQ	NLH20		;Abort if so.

NLH14:	LDA	ENEMYRAM,X
	CMP	TESTINDX
	BEQ	NLH20		;Abort if already launched.	-KHB

NLH5:	DEX
	BPL	NLH10
	RTS

NLH20:	PLA
	PLA
	RTS

;THIS SUB WILL FIND AN AVAILABLE ENEMY AND RETURN THE INDEX IN X.  IF NONE
;IS AVAILABLE IT RETURNS NZ, ELSE Z.

;THIS ROUTINE WILL NOT FIND ENEMY #5 WHICH IS USED BY COMMAND 21

FINDENEMY:
	LDX	#0
FEN10:	LDA	ENEMY0,X
	CMP	#-1
	BEQ	FEN20
	INX
	CPX	#5
	BNE	FEN10
	LDA	#-1	;NONE AVAILABLE
	RTS

FEN20:	LDA	#0	;X HAS THE FREE ENEMY.
	RTS

;THIS ROUTINE WILL FIND A FREE ENEMY EVEN IF IT HAS TO STEAL ONE.

FREEENEMY:
        LDA     ENEMY0+5        ;FIRST SEE IF #5 IS AVAILABLE
        CMP     #-1
        BEQ     FEN22
 	JSR	FINDENEMY	;21. FORCED ENEMY LAUNCH.  
	BEQ	FEN30
FEN22:  LDX     #5              ;IF NONE, USE 0
FEN30:	RTS


;;BF22:	STA	GOTOWORLD	;22.  GOTO WORLD WHEN ENEMY IS KILLED.
;;	LDA	AUX2
;;	STA	MAINENEMY
;;	TAX
;;	LDA	WORLDRAM,X	;MAKE SURE NOT ALREADY DEAD FOR ERR RECOVERY
;;	BNE	BF2210
;;	TXA
;;	JSR	MAINCHECK	;IF ALREADY DEAD, LET HERO OUT!
;;BF2210:	RTS

;;BF25:	CMP	#0		;25=HOLE IN GROUND.  0=NEXT WORLD
;;	BNE	BF2502
;;	LDA	CURWORLD
;;	STA	AUX1
;;	INC	AUX1
;;BF2502:	LDA	J1FLAGS		
;;	ORA	J2FLAGS
;;	CMP	#DOWN		;MUST BE ONLY DOWN FOR THIS ONE
;;	BNE	BF2510
;;	LDA	AUX1
;;	STA	FOLLOW_WORLD	;SET WORLD TO GO TO
;;	LDA	AUX2
;;	STA	WORLD_DONE	;SET DISTANCE TO DROP
;;	JSR	BF07		;MOVE THE HERO BEHIND THE BACKGROUND
;;	JSR	ALLSILENCE
;;	JSR	KILLBULLET	;GET RID OF OUR BULLET
;;	LDX	#HOLE_ENDING & $FF
;;	LDY	#HOLE_ENDING >> 8	;SET STATE FOR NMI TO ELEVATOR ENDING
;;	JSR	SET_NMI
;;	LDA	#1
;;	STA	STATEY
;;	LDA	#0
;;	STA	STATEX	;SET DIRECTION TO MOVE
;;BF2510:	RTS


;;BF26:	STA	SINKING		;26 SET SINKING AND DEATH LEVEL.
;;	LDA	AUX2
;;	STA	FALLEN
;;	RTS

;;BF27:				;27. DRESSING ROOM.
;;	JSR	PUSHING_UP	;MAKE SURE WE ARE IN COMMAND AND PUSHING UP.
;;	BNE	BF275
;;BF274: 	RTS
;;
;;BF275:	JSR	ELEVPTRS	;MAKE THE ELEVATOR POINTERS
;; 	LDA	AUX1		;ASSUME USING THIS NEW HERO
;;	CMP	HERONUM		;SEE IF ITS SAME AS LAST ONE WE DID
;;	BNE	BF2720
;;	LDA	AUX2
;;BF2720:	STA	STATEX
;;	LDX	#DRESSING & $FF
;;	LDY	#DRESSING >> 8	
;;	LDA	#0		;RESET STATE FLAG FOR OUR FINISH CODE
;;	STA	ELEVSTATE
;;	JMP	SET_NMI	 	;GO SET TO Y:X FOR STATE OF NMI

;;BF2A: 	LDX	AUX1		;PRIZE.  GET TYPE.
;;	JSR	INCPRIZE
;;	LDA	ROWBYTE
;;	AND	#$40		;SEE IF 2 HIGH PRIZE BUNDLE
;;	BEQ	BF2A10
;;	JSR	INCPRIZE	;IF SO, DOUBLE PRIZE COUNT
;;
;;BF2A10:	LDA	ROWBYTE		;SEE IF COMMAND IN RIGHT HALF
;;	ROL	A
;;	BCS	BF2A20		;SKIP IF IN RIGHT HALF
;;	BMI	BF2A15		;AND SKIP IF 2 HIGH
;;	JSR	ERASE2_1	;COMMAND IN LEFT AND ONLY 1 HIGH
;;	JMP	BF2A30
;;       	
;;BF2A15: JSR	ERASE2_2	;COMMAND IN LEFT AND 2 HIGH PRIZE
;;	JMP	BF2A30
;;
;;BF2A20:	BMI	BF2A25
;;	JSR	ER2_1B		;COMMAND IN RIGHT AND 1 HIGH
;;	JMP	BF2A30
;;
;;BF2A25:	JSR	ER2_2B		;COMMAND IN RIGHT AND 2 HIGH
;;BF2A30:	JMP	CLEAR_IF

;THIS ROUTINE WILL INCREMENT A PRIZE COUNT AND SEE IF IT WRAPPED TO
;GIVE A FREE HERO.  IT MAKES THE PRIZE NOISE UNLESS A FREE HERO IS AWARDED.
;ON ENTRY, X SHOULD HAVE THE PRIZE INDEX (0-5).

INCPRIZE:
	INC	PRIZE0,X	;UP PRIZE COUNT
	LDA	PRIZE0,X
	CMP	PRIZE_WRAP,X	;SEE IF TIME TO WRAP THE PRIZE
	BCC	IP50
	SEC
	SBC	PRIZE_WRAP,X
	STA	PRIZE0,X	;IF FREE HERO, LOWER COUNT OF PRIZES
	JSR	INCHERO		;AND UP COUNT OF HEROS
	RTS

PRIZENOISE:
IP50:	JSR	STOP_HSOUND
	LDX	#PRIZE_SND & $FF
	LDY	#PRIZE_SND >> 8
	JMP	PLAY_HSOUND	;IF SO, PLAY A SONG

;;BF2B: 	LDA	TESTTOP		;2B CLEAR PATH.  AUX1 HAS TOPMOST ALLOWED
;;	CMP	AUX1		;IS OUR TOPMOST ROW OK?
;;	BCC	BF2B5
;;	LDA	TESTBOT
;;	CMP	AUX2		;IS OUR BOTTOMMOST ROW OK?
;;	BEQ	BF2B10
;;	BCC	BF2B10
;;
;;BF2B5:	LDA	TESTBOT
;;	STA	ROWBYTE		;FAKE ROW AT BOTTOM OF HERO
;;	JSR	SHOW_EXPLODE	;SHOW THE EXPLOSION THERE
;;	JSR	HEROSOUND	;MAKE THE SOUND
;;	JSR	DIEHERO		;MAKE THE HERO DIE IF HE WALKS ON IT.
;;BF2B10:	RTS


BF2C:				;NEW HORIZONTAL LOCATION
	JSR	HIDEENEMIES	;GET RID OF THE ENEMIES WE HAVE
	LDA	#0
	STA	XBACK+1
	LDX	CURWORLD
	LDA	BACKFIX		;GET THE STARTING OFFSET IN THIS WORLD
	CLC
	ADC	AUX1		;GET NEW OFFSET TO MOVE TO
	JSR	SHIFTXBACK	;MAKE STARTING COLUMN INTO PIXEL COLUMN
	JSR	QUICKMOVE	;MOVE TO THE NEW LOCATION
	LDY	HEROY
	LDX	AUX2
	JSR	PUTFIND		;MOVE HERO TO NEW LOCATION
	JMP	SCANFLAGS	;SCAN FOR ENEMIES AT DESTINATION


;;BF2D:	STA	CLIFFLEVEL	;CLIFF LEVEL
;;	RTS

;;BF2F:				;2F = DO END SCENE.
;;	LDX	AUX1		;SEE IF PRIZE OF SOME KIND REQUIRED
;;	CPX	#-1
;;	BEQ	BF2F05
;;     	LDA	PRIZE0,X	;IF PRIZE REQUIRED, DO WE HAVE IT?
;;	BEQ	BF2F10		;IF NOT, DON'T GO INTO END OF GAME.
;;
;;;CALL THIS SUB TO GO INTO END OF GAME MODE.
;;
;;GOEND:
;;BF2F05:	LDA	#0
;;	STA	SHAREDSTATE	;FLAG THE STATE FOR ENDSCENE
;;	LDX	#ENDSCENE & $FF
;;	LDY	#ENDSCENE >> 8
;;	JSR	SET_NMI
;;BF2F10:	RTS


;;BF30: 	JSR	NOTLAUNCHED	;30 LAUNCH EXPLODING ENEMY 
;;	JSR	FINDENEMY
;;	BNE	BF3010
;;BF3005:	LDY	#4		
;;	JMP	BF2010		;JUST SET EXPLODING FLAG AND SHARE CODE.
;;BF3010:	RTS

;;BF31: 	JSR	NOTLAUNCHED	;31. FORCED EXPLODING ENEMY LAUNCH.
;;	JSR	FREEENEMY    
;;	JMP	BF3005

;;BF32: 	LDA	#-1		;32. STOP SCREEN SCAN
;;	STA	STOPSCAN
;;	LDA	AUX1
;;	BEQ	BF3210
;;	JSR	CLEAR_TARGET	;CLEAR OURSELF IF SPECIFIED
;;BF3210:	RTS

;;BF33:	LDX	AUX1		;ERASE WORLDRAM FLAG.  SHARED BY COMMAND 3A
;;	LDA	#0
;;	STA	WORLDRAM,X  	;ERASE DESIRED WORLDRAM FLAG
;;	TXA
;;;;	JSR	MAINCHECK	;MAKE SURE ITS NOT A MAIN ENEMY
;;	JSR	CLEAR_TARGET	;SELF DESTRUCT
;;	RTS


;;BF34:	LDX	#5		;34. LAUNCH AVAILABLE ENEMY BULLET.
;;
;;BF3410:	LDA	BULLETRANGE-1,X	;SEE IF AVAILABLE BULLET
;;	BEQ	BF3420
;;	DEX
;;	BNE	BF3410
;;	RTS			;IF NONE AVAILABLE, IGNORE COMMAND.	
;;
;;BF3420:	DEX
;;	STX	SAFEBYTE	;SET UP THINGS FOR LAUNCH_BULLET
;;	LDA	AUX1
;;	STA	BULLETFLG,X
;;	AND	#$20
;;	ORA	#$1F
;;	LSR	A
;;	STA	BULLETRANGE,X	;SET RANGE TO TRAVEL
;;
;;	LDA	SAFEBYTE
;;	CLC
;;	ADC	#ENEMYSHOT	;MAKE SLOT TO USE FOR SPRITE.
;;	STA	SAFEWORD+1
;;
;;	LDX	#WALLSHOT & $FF
;;	LDY	#WALLSHOT >> 8
;;	LDA	SAFEWORD+1
;;	JSR	INITSPRT	;INITIALIZE THE SPRITE
;;
;;	JSR	POINT_TARGET	;MAKE LOCATION OF THIS COLUMN
;;	JSR	VISUAL_POINT
;;
;;	LDA	ROWBYTE		;SEE IF LAUNCHING TO LEFT
;;	BPL	BF3425
;;	TXA
;;	SEC
;;	SBC	#8
;;	TAX
;;BF3425:	LDA	ROWBYTE
;;	AND	#$40
;;	BEQ	BF3427
;;	TXA
;;	CLC
;;	ADC	#8
;;	TAX
;;
;;BF3427:	LDY	AUX2		;GET THE LAUNCHING Y VALUE
;;	LDA	SAFEWORD+1
;;	JMP	PUTSPRT		;PUT IT DOWN FOR THE FIRST TIME.

;;BF35:	LDX	AUX2		;FREE HERO 
;;	LDA	BITMASK,X	;GET BIT MASK FOR THIS HERO
;;	AND	FREEFLGS	;SEE IF THIS HERO AVAILABLE STILL
;;	BEQ	BF3510		;IF NOT, RESET TARGET.
;;	JMP	BF1702
;;BF3510:	RTS

;;BF37: 	LDA	ROWBYTE		;37. CONDITIONAL NEW WORLD
;;	AND	#$C0		;GET AUX BITS TO FORM THE CONDITION
;;	JSR	DIV8		;PUT THE 2 BITS INTO PROPER POSITION FOR CHECK
;;	STA	SAFEX
;;
;;;ALL PRIZES OR ENEMIES MUST BE DEFEATED.  SAFEX HAS WHICH BITS MUST NOT BE ON.
;;
;;	LDY	FLAGSLEN	;GET WIDTH OF WORLD IN FLAGS
;;BF3715:	LDA	WORLDRAM-1,Y	;GET NEXT FLAG TO CHECK
;;	AND	#$FE		;REMOVE LOWEST BIT
;;	CMP	#$20
;;	BEQ	BF3720
;;	CMP	#$30
;;	BNE	BF3725
;;
;;BF3720:	LDA	WORLDAX1-1,Y	;IF THIS IS ONE AND NOT GONE YET, GET ENEMY #
;;	TAX
;;	LDA	SPECENEMY,X
;;	AND	SAFEX		;SEE IF PRIZE OR MUST DEFEAT BIT IS SET
;;	BEQ	BF3725		;IF NOT, WE ARE OK
;;
;;	LDA	CURWORLD
;;	STA	DOORMSG		;SET SPECIAL MODE THAT RETURNS TO THIS WORLD
;;	LDA	AUX2
;;	JMP	BF3740
;;
;;BF3725:	DEY	      		;TRY NEXT
;;	BNE	BF3715
;;
;;	LDA	AUX1
;;
;;BF3740:	STA	FOLLOW_WORLD	;SET NEXT WORLD
;;	LDA	#60
;;	STA	WORLD_DONE
;;	LDX	#DISWAIT & $FF
;;	LDY	#DISWAIT >> 8
;;	JMP	SET_NMI		;SET TO WAIT A LITTLE FIRST

;;BF38:				;38 = LAUNCH ENEMY IF IN UPPER HALF
;;	LDA	BACKHIGH	;GET BACKGROUND HEIGHT
;;	LSR	A		;DIVIDE BY 2 TO MAKE CENTER LINE
;;	CMP	HEROBOT		;MAKE SURE HERO IS STANDING ABOVE IT
;;	BCC	BF3810
;;	JMP	BF20
;;BF3810:	RTS

;;BF39:				;39 = LAUNCH ENEMY IF IN LOWER HALF
;;	LDA	BACKHIGH	;GET BACKGROUND HEIGHT
;;	LSR	A		;DIVIDE BY 2
;;	CMP	HEROTOP		;MAKE SURE HERO IS BELOW CENTER LINE
;;	BEQ	BF3910
;;	BCS	BF3810
;;BF3910:	JMP	BF20

;;BF3A:	LDA	AUX2		;ERASE WORLDRAM IF NOT SPECIFIC WORLD
;;	CMP	CURWORLD
;;	BEQ	BF3A5
;;	LDA	ROWBYTE		;SEE IF ITS SUPPOSED TO MATCH
;;	BMI	BF3A10
;;BF3A2:	JMP	BF33		;SHARE THE UNIVERSAL ERASE
;;BF3A5:	LDA	ROWBYTE
;;	BMI	BF3A2
;;BF3A10:	RTS

;--------------------STAIR COMMAND ADD ON --- RTB 4/19/90

STAIRCMD:
	LDA	AUX1		;SEE IF COUNT DEPLETED
	BNE	STARCMDA
	LDX	#0
	LDY	#0
	JSR	MOVE_HERO	;MOVE JUST TO RESET ELEVALUES!
	JSR	FIND_HERO	;GET NEW LOCATION
        LDA     #0
        STA     NEEDSHOT
	JMP	RESUME_REAL	;YES! END OF THIS!

STARCMDA:
	JSR	MVSOME2		;Move enemies.	-KHB
	LDA	#HEROSLOT
	JSR	GETSPRT		;GET X AND Y LOC OF HERO INTO X AND Y

	LDA	ROWBYTE
	BMI	STRCMDDN	;IF NEG MOVING DOWN!

;-HE'S MOVING UP!
	TYA			;GET Y VAL
	SEC
	SBC	AUX2		;INC/DEC VALUE IN AUX2
	TAY			;SAVE Y VAL

STARCMDB:
	LDA	ROWBYTE
	AND	#$40
	BNE	STRCMDRT	;SET MEANS MOVING RIGHT

;-HE'S MOVING LEFT!
	TXA			;GET X VALUE
	SEC
	SBC	AUX2
	TAX			;SAVE X VALUE

STARCMDM:	
	JSR	BF3BAA		;POSITION IT!
	DEC	AUX1
	JSR	REMHAM	 	;CHANGE 5/7/90
	JSR	MOVEAGAIN	;CHANGE 5/7/90
	RTS

;-HE'S MOVING DOWN!
STRCMDDN:
	TYA
	CLC
	ADC	AUX2		;INC/DEC VALUE IN AUX2
	TAY
	JMP	STARCMDB

;-HE'S MOVING RIGHT!
STRCMDRT:
	TXA
	CLC
	ADC	AUX2
	TAX
	JMP	STARCMDM
;=====================================================
;STAIR COMMAND
BF3B:	LDA	ROWBYTE		;BIT $80 0-JOYSTICK UP 1-JOYSTICK DOWN
        AND     #$1F           ;KEEP ONLY THE ROW
        STA     SAFEBYTE
        LDA     HEROSFEET       ;GET HERO'S FEET LOCATION
        JSR     DIV8
        CMP     SAFEBYTE        ;REQUIRE HIM TO BE IN THAT ROW
        BNE     BF3BZ

        LDA     ROWBYTE         ;BIT $80 0-JOYSTICK UP 1-JOYSTICK DOWN
	BMI	BF3BA
;-HERO IS MOVING UP CHECK FOR UP KEY
	JSR	PUSHING_UP	;MAKE SURE HE'S PUSHING UP!
	BNE	BF3BB
BF3BZ:	RTS

;-HERO IS MOVING DOWN CHECK FOR DOWN KEY
BF3BA:	JSR	PUSHDOWN
	BEQ	BF3BZ

;-MAKE HERO FACE IN PROPER DIRECTION!
BF3BB:

;-----------------------------------JGT 05/12,27/90----------------
	LDA	#0
	STA	HITFLAG
	STA	INVULN		;reset to proper hero anim./spr.
                LDA     #HEROSLOT
                LDX     CUR_HERO
                LDY     CUR_HERO+1
                JSR     SWAPSPRT
;;              LDA     #HEROSLOT
;;              LDX     HEROX
;;              LDY     HEROY
;;              JSR     PUTSPRT
;---------------------------------------------------------------

	LDA	ROWBYTE
	AND	#$40
	BEQ	BF3BBA 	
	LDX	#0
	STX	HERODIR		;MAKE DIRECTION RIGHT
	JSR	MIRHERO		;MAKE FACE RIGHT
	JMP	BF3BBB
BF3BBA:
	LDX	#1
	STX	HERODIR		;MAKE DIRECTION LEFT
	JSR	MIRHERO		;MAKE FACE LEFT

;- ALL OK, LET'S MAKE AN NMI FOR THE STAIR COMMAND!
BF3BBB:
	LDX	#STAIRCMD & $FF
	LDY	#STAIRCMD >> 8
	JMP	SET_NMI			;SET FOR NEXT NMI!

;=====================================================

;-PUT HERO SPRITE AT NEW LOCATION
BF3BAA:				;UNI MOVE SPRITE
	LDA	#HEROSLOT
	JMP	PUTSPRT		;MOVE HIM TO NEXT LOCATION!

;==========================================================

;-SPECIAL ELEVATOR DOOR COMMAND
BF3C: 				;3C. ELEVATOR DOOR
	LDX	#2
BF3CA:	LDA	ROOMRNGE,X	;SEE IF IN ROOM RANGES
	CMP	HEROCOL
	BCC	BF3CB		;IN RANGE! GO ON!
	DEX
	BPL	BF3CA
	RTS			;CAN'T BE, BUT RTS ANYWAY

BF3CB:	LDA	HEROBOT		;GET ROW OF FEET
	CMP	#12
	BCC	BF3CC
	
	CPX	#2		;IF ON HOTEL, ONLY 1 ELEVATOR, IF GOING IN,
	BEQ	BF3CC		;JUST GO TO BOTTOM!
;-HERO ON BOTTOM HALF OF SCREEN, MULTIPLY X BY 2
	TXA
	CLC
	ADC	RMRWIDTH	;GET SECOND HALF
	TAX
BF3CC:
	STX	INDX3C		;SAVE INDEX!
	LDA	#$1D		;SET COMMAND 1D
	STA	FLAGBYTE	;PROBABLY NOT NECESSARY
	LDA	RROWBYTE,X	;GET ROOM ROWBYTE
	STA	ROWBYTE
	LDA	RAUX1,X		;GET ROOM AUX1
	STA	AUX1
	LDA	RAUX2,X		;GET ROOM AUX2
	STA	AUX2

	LDA	HEROCOL
	AND	#1
	BEQ	BF3CK		;Continue if on even column.	-KHB
	LDA	ROWBYTE
	AND	#$7F
	STA	ROWBYTE		;Turn off AUX BIT #1 if odd column.
		
;===============================
;-USE OUR MODIFIED COMMAND
BF3CK:	JSR	PUSHING_UP	;MAKE SURE WE ARE IN TOP 4 PUSHING UP.
	BNE	BF3CL
 	RTS

BF3CL: 	JSR	ELEVPTRS	;MAKE THE ELEVATOR POINTERS
	JMP	BF1620		;AND GO SHARE ENDING OF WHERE TO GO
;===============================
;-THIS IS OUR TABLE OF NEW COMMANDS  HIGHER HALF IS BOTTOM HALF OF SCREEN

RMRWIDTH:
	.byte 	3		;# OF ENTRIES PER HALF

ROOMRNGE:
	.byte 	0,96,160	;LEFT SIDE OF RANGE ONLY

FLIPRMR:
	.byte 	3,4,5		;FLIP VALUES
	.byte 	0,1,2

RROWBYTE:
	.byte 	$89,$89,$95	;TOP HALF
	.byte 	$95,$95,$95	;BOT HALF
RAUX1:
   	.byte 	96,160,32    	;TOP HALF LEFT EDGE RESET
	.byte 	-1,-1,-1	;BOT HALF FLOATING FOR GOING UP!
RAUX2:
	.byte 	120,186,50	;TOP HALF X HOTSPOT
	.byte 	50,120,186	;BOT HALF X HOTSPOT

;----------------------------------------------------------

;JUMP HERE TO FINISH WITH THE CORRECT SOUND FOR THE CURRENT HERO FLAG OR
;GOSUB TO MAKE THE SOUND AND RETURN.

HEROSOUND:
	JSR	STOP_HSOUND
	LDA	FLAGBYTE
	AND	#$7F
	ASL	A		;MAKE WORD INDEX TO THE SOUND
	TAX
	LDY	SND_TAB+1,X
	LDA	SND_TAB,X
	TAX		 	;GET THE POINTERS TO THE SOUND

PLAY_HSOUND:			;CALL HERE TO PLAY IN THE HERO SOUND SLOT
	LDA	#HSOUNDSLOT
	JMP	PLAY		;MAKE THE SOUND

STOP_HSOUND:			;CALL HERE TO SILENCE THE HERO SOUND SLOT
	LDA	#HSOUNDSLOT
	JMP	SILENCE

;THIS ROUTINE WILL TAKE A BYTELOC IN A AND CONVERT INTO AN X COLUMN
;IN A:X AND A Y ROW IN Y.  IT USES WORLDCOL TO DO THAT.  THE VALUE IN A IS
;THE SIGNED NIBBLE BYTELOC VALUE DESCRIBED AT THE TOP OF THIS DOCUMENT.
;THE RETURNED A:X,Y IS FOR A PLACE WITHIN THE ACTUAL BACKGROUND.  A:X
;IS NEEDED BECAUSE SOME BACKGROUNDS ARE > 256 (CONTINUOUS SCROLLERS
;SPECIFIED WHEN HORZWORLD IS TRUE).

NIBBLES:	.byte 	0,2,4,6,8,10,12,14,-16,-14,-12,-10,-8,-6,-4,-2

MAKELOC:
	TAX
	AND	#$F
	ASL	A
	TAY		;MAKE Y
	TXA
	JSR	DIV16	;MAKE HIGH SIGNED NIBBLE INTO INDEX
	TAX
	LDA	NIBBLES,X
	CLC
	ADC	WORLDCOL
;;	TAX
;;	LDA	WORLDCOL+1
;;	ADC	#0		;MAKE FULL WORD IN A:X
;;	PHA
;;	TXA
	CLC
	ADC	BACKFIX
	TAX
;;	PLA
;;	ADC	#0
	RTS

;THIS ROUTINE WILL DISPLAY AN EXPLOSION ANIMATION OVER THE TOP OF A
;TARGET SHOT OR TOUCHED BY THE HERO.  IT USES COLIDESLOT WHICH MUST BE 
;FREE.  THE ANIMATION WILL BE PEGGED FOR AUTOKILL. 

SHOW_EXPLODE:
	LDA	#COLIDESLOT
	JSR	KILLSPRT
	LDX	#EXPLODES & $FF
	LDY	#EXPLODES >> 8
	LDA	#COLIDESLOT
	JSR	INITSPRT	;INITIALIZE THE SPRITE ANIMATION
	LDA	#COLIDESLOT
	JSR	AUTOKILL	;MAKE IT AUTOKILL

	JSR	POINT_TARGET
	JSR	VISUAL_POINT	;POINT TO THE TARGET ON SCREEN USING SPRITES
	TXA
	SEC
	SBC	#4		;FIX X TO ACCOUNT FOR 2 WIDE
	BCS	SEP10
	LDA	#0
SEP10:	TAX

	TYA
	SEC
	SBC	#4		;FIX Y TO ACCOUNT FOR 2 WIDE
	BCS	SEP20
	LDA	#0
SEP20:	TAY

	LDA	#COLIDESLOT
	JMP	PUTSPRT		;POSITION THE SPRITE AND START IT

;THIS ROUTINE WILL TAKE AN A:X TEXT POSITION WITHIN THE BACKGROUND AND 
;A Y ROW POSITION AND WILL CONVERT INTO SPRITE COORDINATES WITHIN THE
;VISUAL SCREEN.  IT CAN BE USED LAUNCHING ENEMIES OR FOR EXPLOSION 
;ANIMATIONS OVER TARGETS.  IF THE POSITION IS OFF SCREEN, THE Y LOCATION
;IS MOVED TO 0F8H.  SOMETIMES OFFSCREEN POSITIONS ARE CORRECTED (IF ONLY
;OFF BY A LITTLE).  X WILL BE MOVED TO SCREEN START OR END IF ONLY OFF BY
;7 PIXELS OR LESS.    YOU CAN DETECT THIS ON RETURN BY CHECKING CARRY,
;IF ADJUSTED THE CARRY IS SET, IF NOT ADJUSTED OR OFF SCREEN (Y=$F8) THE 
;CARRY IS CLEAR.

;ITS OK TO CALL THIS ROUTINE FROM BOTH NMI AND NON-NMI LEVELS.

VISUAL_POINT:
	STX	TEMPCONV
	LDA	#0
	STA	TEMPCONV+1	;SAVE A:X LOCATION
;;	LDA	#0
	STA	TEMPCONV+2	;AND NEED 3 BYTES
	TYA
	JSR	TIMES8		;MAKE ROW INTO PIXEL LOCATION
	CMP	#$F8		;MAKE SURE NOT PAST F8
	BCC	VP20
	LDA	#$F8		;SPRITES SHOULDN'T PLACE BELOW F8.
VP20:	TAY			;AND RETURN FOR CALLER

	ASL	TEMPCONV
	ROL	TEMPCONV+1
	ROL	TEMPCONV+2
	ASL	TEMPCONV
	ROL	TEMPCONV+1
	ROL	TEMPCONV+2
	ASL	TEMPCONV
	ROL	TEMPCONV+1
	ROL	TEMPCONV+2	;MAKE *8 LOCATION

	SEC
	LDA	TEMPCONV
	SBC	XBACK
	STA	TEMPCONV
	LDA	TEMPCONV+1
	SBC	XBACK+1		;MAKE POSITION RELATIVE TO CURRENT SCROLL
	STA	TEMPCONV+1
	LDA	TEMPCONV+2
	SBC	XBACK+2
	STA	TEMPCONV+2
	BCS	VP25

;THE POINT IS PAST THE LEFT.  BUT IF ONLY BY 8 PIXELS, WE JUST MOVE TO 
;COLUMN 0.  WE MUST HOWEVER REPORT THIS FACT FOR CASES WHERE ITS UNDESIRABLE
;TO LAUNCH OFF FROM THE EXACT POSITION.


	LDA	TEMPCONV+2	
	CMP	#-1		;JUST A LITTLE BIT LEFT?
	BNE	VP27
	LDA	TEMPCONV+1	
	CMP	#-1		;JUST A LITTLE BIT LEFT?
	BNE	VP27
	LDX	TEMPCONV
	CPX	#-8		;JUST -8 TO THE LEFT?
	BCC	VP27

	LDX	#0
	SEC
	RTS

;NOT PAST LEFT. SEE IF PAST RIGHT.
	
VP25:	LDX	TEMPCONV	
	LDA	TEMPCONV+1	;SEE IF PAST RIGHT OF SCREEN 
	ORA	TEMPCONV+2
	BEQ	VP30

;THE POINT IS PAST THE RIGHT OF THE SCREEN BUT IF ONLY BY 8 PIXELS, WE
;JUST MOVE TO THE FAR RIGHT.

	LDA	TEMPCONV+2
	BNE	VP27
	LDA	TEMPCONV+1
	CMP	#1
	BNE	VP27
	CPX	#9
	BCS	VP27
	LDX	#255		;IF IT WRAPPED, SET TO END
	SEC
	RTS
VP27:	LDY	#$F8		;IF SO, MOVE OFF VISUALLY
VP30:	CLC
 	RTS

;THIS ROUTINE WILL ERASE A TARGET IN WORLDRAM.  IT USES TESTINDX AND JUST
;PUTS A NULL THERE.  IT CAN BE USED FOR BULLET OR HERO.  IT SHOULD NOT
;BE USED TO ERASE ENEMY COMMANDS BECAUSE OF COMMAND 22.

CLEAR_TARGET:
	LDX	TESTINDX	;GET THE CURRENT COLUMN FOR THE FLAG TO CHECK
	LDA	#0
	STA	WORLDRAM,X	;SEE IF THERE IS SOMETHING TO CHECK
	RTS

;;;THIS ROUTINE CLEARS A TARGET ONLY IF IT WAS TO BE ERASED.
;;
;;CLEAR_IF:
;;	LDA	ROWBYTE
;;	AND	#$20
;;	BNE	CI10
;;	JSR	CLEAR_TARGET
;;CI10:	RTS

;THIS ROUTINE WILL POINT A:X TO THE COLUMN OF A TARGET IN THE CURRENT BACKGROUND
;(ASSUMED TO BE WORLDCOL) AND POINT Y TO THE ROW (GOTTEN FROM THE TARGET
;FLAGS).  THIS INFO CAN BE USED TO ERASE IT.  ON RETURN, IF NC THEN
;WE SHOULD ERASE.  IF CY, THEN THE ROWBYTE SAYS WE SHOULD NOT ERASE.

POINT_TARGET:
	LDA	ROWBYTE		;GET THE ROW ITS ON
	AND	#$1F
	TAY
	LDA	WORLDCOL	;GET THE COLUMN 
	CLC
	ADC	BACKFIX		;MAKE ROW WITHIN VISUAL BACKGROUND
	TAX
;;	LDA	WORLDCOL+1
;;	ADC	#0		;MAKE A:X
;;	PHA
	LDA	ROWBYTE
	ASL	A
	ASL	A
	ASL	A		;SET C IF DONT ERASE
;;	PLA
	RTS

;THIS ROUTINE WILL CALCULATE THE FIRST BACKGROUND COLUMN CURRENTLY DISPLAYED
;ON SCREEN.  THE VALUE IS THE VIRTUAL BACKGROUND COLUMN,
;ADJUSTED FOR BACKFIX.    THIS ROUTINE ALSO WORKS FOR CONTINUOUS SCROLL
;MODE.

;IT USES ONLY XBACK AND IS OK TO CALL EVEN IF SCRLBACK HAS NOT BEEN CALLED
;FOR THE NEW VALUE.

MAKE_STCOL:
	LDA	XBACK
	STA	STARTCOL
	LDA	XBACK+1
	STA	STARTCOL+1
	LDA	XBACK+2
	LSR	A
	ROR	STARTCOL+1
	ROR	STARTCOL
	LSR	A
	ROR	STARTCOL+1
	ROR	STARTCOL
	LSR	A
	ROR	STARTCOL+1
	ROR	STARTCOL

	LDA	STARTCOL
	SEC
	SBC	BACKFIX		;CORRECT IT TO MAKE A VIRTUAL BACKGROUND LOC
	STA	STARTCOL
;;	LDA	STARTCOL+1
;;	SBC	#0
;;	STA	STARTCOL+1
	RTS

;********************* ENEMY FUNCTIONS ******************************

;ENEMIES ARE REFFERRED TO BY INDEXES OF 0-4.  BULLETS ARE ALSO REFFERED
;TO BY INDEXES OF 0-4.  WHEN THE SPRITE SLOT NUMBER FOR EITHER IS RETURNED
;BY THE SUBS, THEY ARE CONTIGUOUS AND NEED TO BE SEPERATED BEFORE CALLING
;THESE ROUTINES.

;THIS SUB WILL TAKE AN ENEMY INDEX 0-4 AND WILL LOWER ITS HEALTH BY THE
;AMOUNT IN A AND MAKE A THUD SOUND.  IF THE HEALTH GOES TO ZERO
;THE ENEMY WILL BE KILLED.  THIS ROUTINE SHOULD BE CALLED WHENEVER 
;AN ENEMY IS SHOT. NOTE THAT GETTING RID OF THE ENEMY TAKES PLACE LATER AT 
;THE NON-NMI LEVEL.  SOUND IS MADE HERE THOUGH.  ON ENTRY A HAS THE AMOUNT
;TO LOWER ITS HEALTH BY.  THE CORRECT BIT IN ENEMYSTATE IS SET TO INDICATE
;HE HAS BEEN SHOT.

;THIS ROUTINE IS NMI LEVEL ONLY BECAUSE OF THE SOUND CALLS!!

LOWER_ENEMY:

	STX	SAFEBYTE		;SAVE THE INDEX WE WERE PASSED
	STA	SAFEWORD		;AND SAVE THE AMOUNT OF DAMAGE WE DID

;SEE IF THE ENEMY WAS A PRIZE.  IF SO, WE JUST SET THE KILL FLAG.

	LDA	ENEMYFLGS,X
	AND	#2
	BEQ	LE155

	LDA	ENEMYFLGS,X
	ORA	#$10
	STA	ENEMYFLGS,X	;SET THE KILL BIT
	RTS

;NOT A PRIZE.  LOWER ITS HEALTH.

LE155:	LDA	FREEZESHOT
	STA	ENEMYFREEZE,X	;FREEZE ENEMY FOR A BIT IF HIT

	LDA	ENEMYSTATE,X
	ORA	#1
	STA	ENEMYSTATE,X

;---------------------------------------------- JGT 05/11/90 ------------
; check to see if enemy type is 10, 12, or 13 (big bugs in swamp), since
; these enemy types are changed (not killed) when hit...

        LDA     ENEMY0,X
	CMP	#12
	BEQ	ECHG1
        CMP     #13
        BEQ     ECHG2
        CMP     #10
        BNE     ECHGXIT

;change enemy type 10 to 3

        JSR     ENEMYGONE
        LDA     #3
        JMP     ECHG3

;change enemy type 12 to 36

ECHG1:	JSR	ENEMYGONE
	LDA	#36
	JMP	ECHG3

;change enemy type 13 to 2

ECHG2:  JSR     ENEMYGONE
        LDA     #2

ECHG3:  LDX     SAFEBYTE
        STA     ENEMY0,X       ;new enemy type
        LDA     #0
        STA     ENEMYFREEZE,X
        LDA     ENEMYFLGS,X
        ORA     #8              ;set "need to create" bit
        STA     ENEMYFLGS,X
        LDA     TIMETICK
        AND     #$0F
        ASL     A
        CLC
        ADC     #$10
        STA     BOUNCECT,X
        RTS

ECHGXIT:

;------------------------------------------------------------------------

	LDA	ENEMYHEALTH,X	;GET HEALTH
	BEQ	MAKETHUD	;UNKILLABLE IF HEALTH=0
	SEC
	SBC	SAFEWORD	;LOWER BY REQUESTED AMOUNT
	BCS	LE156
	LDA	#0		;IF BELOW 0, JUST 0 IT
LE156:	STA	ENEMYHEALTH,X	;LOWER ENEMIES HEALTH
	BNE	MAKETHUD	;IF NOT DEAD YET, DON'T KILL THE ENEMY

	LDA	ENEMYFLGS,X	;GET THE FLAGS
	ORA	#$10		;SET THE KILL BIT
	STA	ENEMYFLGS,X	;AND START THE KILL
	RTS	

;DONE DEALING WITH THIS ENEMY.  MAKE A SOUND BECAUSE THERE WAS A COLLISION.

MAKETHUD:			;CALL HERE TO MAKE THUD SOUND WITH HSOUNDSLOT

;------------------------------------------- JGT 05/15/90 -----------
; Make the enemy bounce when hit...

        LDA     CURWORLD
        CMP     #7              ;don't bounce on water level
        BEQ     MKNT
        CMP     #8              ;...or on the moon!
        BEQ     MKNT
        LDA     ENEMY0,X        ;Get enemy index
        CMP     #68             ;NEST?
        BEQ     MKNT
        CMP     #75             ;BEE HIVE?
        BNE     MKGB
MKNT:   JMP     NOTHUD

;check to see if type is 34 (GBUG): this type is changed to 81 (GBUGROLL)

MKGB:   CMP     #34             ;GBUG?
        BNE     MAKEBOUNCE
 
        JSR     ENEMYGONE
        LDX     SAFEBYTE
        LDA     #81
        STA     ENEMY0,X        ;new enemy type
        LDA     #0
        STA     ENEMYFREEZE,X
        LDA     ENEMYFLGS,X
        ORA     #8
        STA     ENEMYFLGS,X
        LDA     TIMETICK
        LSR     A
        LSR     A
        LSR     A
        CLC
        ADC     #64
        STA     ENEMYCTR,X
        LDA     ENEMY0,X        ;enemy type for "MAKEBOUNCE"

MAKEBOUNCE:
        LDY     #14             ;default "bounce time"
        TAX                     ;enemy index to X-reg
        LDA     BEHAVIOR,X      ;Get "bounce" bit for current enemy
        AND     #$08
        BNE     MAKETH2

        LDY     #20             ;larger bounce for smaller enemies
MAKETH2:
        TYA
        LDX     SAFEBYTE
        STA     BOUNCECT,X      ;set to bounce

        LDA     #8
        STA     BOUNCEX,X
        STA     BOUNCEY,X

        TXA                     ;slot #
        JSR     SPRTCTR         ;get center loc. of enemy
        LDA     HEROX
        CLC
        ADC     #8
        CMP     TEMP_JX
        BCC     MAKETH3
        LDX     SAFEBYTE
        LDA     #-8
        STA     BOUNCEX,X
MAKETH3:
        LDX     SAFEBYTE
        LDA     #0
        STA     ENEMYFREEZE,X

;now set lowest limit on screen...assume its the value in SCREENLIMITS table

        LDY     WORLD_INDX
        LDA     SCREENLIMITS+1,Y	;get bottom of screen
	SEC
	SBC	#8			;clip it a little bit...
        STA     BOUNCE3D,X

        LDA     ENEMYY,X                ;get enemy's pos. (y-top)
        CLC
        ADC     ENEMYHIGH,X             ;add height
        BCS     IN3D                    ;we wrapped! assume cur. pos. is max.
        CMP     NOGRAVITY,Y
        BCC     NOTHUD                  ;not in 3-D region...

IN3D:   LDA     ENEMYY,X                ;enemy's pos. is lowest allowed if
        STA     BOUNCE3D,X              ;in 3-D region
        
NOTHUD:
;--------------------------------------------------------------------

	JSR	STOP_HSOUND
	LDX	#ENEMYTHUD & $FF
	LDY	#ENEMYTHUD >> 8
LE150:	JMP	PLAY_HSOUND	;MAKE A SOUND FOR THE COLLISION

;THIS ROUTINE WILL REMOVE ALL ENEMIES CURRENTLY ACTIVE BUT WILL NOT 
;MAKE AN EXPLOSION OR FREE UP THE WORLDRAM FLAG.  IT SHOULD BE CALLED
;WHENEVER THE SCREEN SCROLLS AND YOU WANT TO HIDE THE ENEMIES CURRENTLY 
;VISIBLE.  IT ALSO HIDES THEIR BULLETS.  THERE IS ONE SPECIAL CASE WHERE
;THIS ROUTINE WILL RESET THE WORLDRAM FLAG.  IF THE ENEMY IS TURNED INTO
;A PRIZE AND IS NOT A PERMA LAUNCH ENEMY ITS WORLDRAM FLAG WILL BE RESET.

HIDEENEMIES:
        LDA     #5
	STA	SAFEBYTE
HEE10: 	LDX	SAFEBYTE
	LDA	ENEMY0,X	;SEE IF VALID ENEMY
	CMP	#-1
	BEQ	HEE20
	LDX	SAFEBYTE
	LDA	ENEMYFLGS,X	;NOW SEE IF PRIZE
	AND	#$42
	CMP	#2		;SEE IF PRIZE AND NOT PERMA LAUNCH
	BNE	HEE20
	JSR	FREERAM		;IF SO, FREE UP THE WORLDRAM FLAG.
HEE20:	JSR	ENEMYGONE	;REMOVE THIS ONE
	JSR	EBULLETGONE
	DEC	SAFEBYTE
	BPL	HEE10		;DO ALL OF THEM.
	RTS

;THIS SUB WILL GET RID OF THE ENEMY SAFEBYTE (INDEX) AND FREE UP ITS SLOT
;WITHOUT MAKING AN EXPLOSION OR GETTING RID OF ITS WORLDRAM FLAG.

ENEMYGONE:
	LDX	SAFEBYTE
        LDA     #-1
        STA     ENEMY0,X
        LDA     #0
        STA     BOUNCECT,X
	LDA	SAFEBYTE
	JMP	KILLSPRT	;GET RID OF IT IF SO

;THIS ROUTINE IS INTENDED TO BE CALLED BY MOVEENEMY ONLY.  IT TAKES
;CARE OF KILLING AN ENEMY AND SHOWING THE EXPLOSION.  IT MUST NOT
;BE CALLED BY ANYONE OTHER THAN MOVEENEMY, OTHER USER'S SHOULD SIMPLY
;SET BIT $10 IN THE ENEMY FLAG.  ON ENTRY, SAFEBYTE SHOULD HAVE THE ENEMY 
;INDEX. IF THE ENEMY CONTAINS A PRIZE OR HEALTH
;IT WILL BE PUT INTO THAT MODE.  IF THE ENEMY IS A PRIZE OR HEALTH, IT
;WILL BE GOTTEN RID OF WITHOUT A SOUND OR SIGHT.  YOU CAN MAKE A PRIZE
;BE AWARDED

EX_ENEMY:
	LDX	SAFEBYTE
	LDA	ENEMYX,X
	STA	SAFEX
	LDA	ENEMYY,X
	STA	SAFEY		;SAVE LOCATION OF ENEMY IN CASE OF REGENERATE

	LDA	ENEMYHIGH,X
	SEC
	SBC	#8
	ADC	ENEMYY,X
	STA	SAFEY2		;SAVE PLACE FOR PRIZES TO GO

;IF ITS A PRIZE WE JUST GET RID OF IT WHEN CALLED.	

	LDA	ENEMYFLGS,X
	AND	#2
	BEQ	EXE10
EXE9:	LDA	SAFEBYTE
	JSR	KILLSPRT	;GET RID OF THE ENEMY VISUALLY
	JMP	EXE70		;AND GO SEE IF WE WANT TO REMOVE IT FROM FLAGS

;IF ITS AN IMMEDIATE PRIZE AWARD WE ALSO JUST GET RID OF IT.

EXE10:	LDY	ENEMY0,X
	LDA	SPECENEMY,Y	;SEE IF ITS AN IMMEDIATE POINTS OR PRIZE
	AND	#$10
	BNE	EXE9		;IF SO, TREAT IT LIKE A PRIZE.

;WE NEED TO MAKE A NOISE CAUSE WE GOT RID OF IT.

EXE11:	JSR	STOP_HSOUND
	LDX	SAFEBYTE
	LDA	ENEMYFLGS,X	;SEE IF EXPLODING REPLICATING ENEMY
	AND	#4		
	BNE	EXE11B
	
	LDY	ENEMY0,X	;GET ENEMY TYPE
	LDA	BEHAVIOR,Y	;SEE IF EXPLODING ENEMY THAT KILLS HERO
	BMI	EXE11B

	LDX	#EXPLODE & $FF
	LDY	#EXPLODE >> 8	;IF NOT SPECIAL, MAKE NORMAL NOISE
	JMP	EXE11A

EXE11B:	LDX	#BOOM & $FF
	LDY	#BOOM >> 8	;BUT IF EXPLODES ON CONTACT, USE THIS SOUND.
EXE11A:	JSR	PLAY_HSOUND

;IF ITS AN EXPLODING ENEMY WE WANT TO REGENERATE LOTS OF THEM!

	LDX	SAFEBYTE
	LDA	ENEMYFLGS,X
	AND	#4		;EXPLODING ENEMY?
	BNE	EXE52
	JMP	EXE60

EXE52:	LDA	ENEMY0,X	;GET ENEMY ENTRY IT WAS
	STA	SAFEX2		;SAVE IT FOR NOW
	INC	SAFEX2		;EXPLODER'S GENERATE ENEMY+1

	LDA	ENEMYFLGS,X
	AND	#$40		;PERMA LAUNCH?
	BEQ	EXE53
	JSR	FREEZEPERMA	;IF SO, FREEZE IT, DON'T LAUNCH ANOTHER HERE.
     	JMP	EXE54

EXE53:	JSR	FREERAM		;IF NOT, FREE UP ITS LAUNCH COMMAND.
	JSR	ENEMYGONE
	LDX	SAFEBYTE	

EXE54:	LDA	ENEMYFLGS,X	;GET THE ENEMIES FLAGS
	AND	#$80		;KEEP THE FAST BIT
	ORA	#$28		;AND ADD IN NEED GENERATION AND EXPLODED FLAG
	STA	SAFEWORD+1	;SAVE IT HERE

	LDX	#0		;NOW MAKE AS MANY AS POSSIBLE
EXE55:	STX	SAFEBYTE
	LDA	ENEMY0,X	;AVAILABLE?
	CMP	#-1
	BNE	EXE58
	LDA	SAFEX2
	STA	ENEMY0,X   	;SET ENEMY TYPE
	LDA	SAFEWORD+1	
	STA	ENEMYFLGS,X	;SET FLAG 
	LDA	#0
	STA	ENEMYFREEZE,X	;MAKE SURE ITS NOT FROZEN
	LDA	#-1
	STA	ENEMYRAM,X	;RESET WHAT ENEMY TO ERASE WHEN DONE
	LDA	#4
	STA	ENEMYINDX,X	;LOCK OUT ALL MOTIONS OTHER THAN EXPLOSION.

	LDA	EXPLODEX,X	;GET THE X MOMENTUM TO PUT INITIALLY
	STA	ENEMYXMOM,X
	LDA	EXPLODEY,X
	STA	ENEMYYMOM,X	;SET MOMENTUMS TO MAKE EXPLOSION

	LDA	ENEMYX,X
	JSR	DIV8		;MAKE SCREEN COLUMN POSITION
	CLC
	ADC	STARTCOL	;GET LEFTMOST BACKGROUND COLUMN
	STA	LAUNCHXL,X
;;	LDA	STARTCOL+1
;;	ADC	#0
;;	STA	LAUNCHXH,X	;MAKE BACKGROUND POSITION OF LAUNCH POINT
	LDA	ENEMYY,X
	LDA	SAFEY
	JSR	DIV8		;MAKE ROW WITHIN BACKGROUND.
	STA	LAUNCHY,X	;SET WHERE TO GENERATE FROM
EXE58:	INX
	CPX	#5		;TRIED ALL ENEMIES?
	BNE	EXE55
	RTS

;THESE 2 TABLES ARE USED TO MAKE EXPLODING ENEMIES MOVE AWAY FROM THE 
;BLAST.  THEY ARE MOMENTUM VALUES LOADED AT GENERATION TIME.

EXPLODEX:	.byte 	48,-48,48,-48,16
EXPLODEY:	.byte 	48,48,-48,-48,-8

;SHOW THE ENEMY DEATH AND AWARD POINTS OR PRIZE

EXE60:	LDA	SAFEBYTE
	JSR	KILLSPRT	;GET RID OF THE ENEMY

	LDA	#COLIDESLOT	;GET SLOT FOR EXPLOSIONS
	JSR	KILLSPRT	;MAKE SURE ITS FREE

	LDA	#COLIDESLOT
	LDX	#ENMYDIE & $FF
	LDY	#ENMYDIE >> 8
	JSR	INITSPRT   	;NOW INITIALIZE IT WITH AN EXPLOSION

	LDA	#COLIDESLOT	;MAKE IT AUTOKILL
	JSR	AUTOKILL

	LDX	SAFEBYTE
	LDY	ENEMYY,X
	LDA	ENEMYX,X
	TAX
	LDA	#COLIDESLOT
	JSR	PUTSPRT		;PUT IT DOWN

;SEE IF THE ENEMY CONTAINS A PRIZE INSTEAD OF POINTS.

EXE61:	LDX	SAFEBYTE	;GET BACK THE ENEMY #
	LDY	ENEMY0,X	;GET ENEMY # INDEX
	LDA	ENEMYPNTS,Y	;GET ITS POINT INDEX
	BPL	EXE65		;SKIP IF NO HIDDEN PRIZE
	
;IT CONTAINS A HEALTH.

	CMP	#-1
	BNE	EXE62
	LDA	#8*15		;SET 8 SECOND DELAY
	STA	ENEMYFREEZE,X
	LDX	#HEALTHPRIZE & $FF
	LDY	#HEALTHPRIZE >> 8
	JMP	EXE64		;GO SHARE ENDINGS

;IT CONTAINS A PRIZE

EXE62:	AND	#$7F		;MAKE PRIZE INDEX
	STA	SAFEWORD+1	;SAVE IT
	TAY
	LDA	PRIZE_TIME,Y
	STA	ENEMYFREEZE,X	;SET DELAY FOR PRIZE TO DISPLAY
	TYA
	ASL	A		;MAKE *2 POINTER FOR PRIZE PICTURE
	TAY
	LDA	PRIZE_PTR,Y
	TAX
	LDA	PRIZE_PTR+1,Y
	TAY
	BNE	EXE64		;IF PRIZE IS VALID, CONTINUE
	LDX	SAFEWORD+1	;IF NULL POINTER, MEANS AWARD IT NOW
	JSR	INCPRIZE	;WE SHOULD UP THE PRIZE FOR INDEX X
	JMP	EXE80

EXE64:	LDA	SAFEBYTE
	JSR	INITSPRT	;INIT THE HEALTH OR PRIZE

	LDX	SAFEBYTE
	LDA	ENEMYX,X
	TAX
	LDY	SAFEY2
	LDA	SAFEBYTE
	JSR	PUTSPRT		;PUT DOWN THE PRIZE
	
	LDX	SAFEBYTE

	LDA	SAFEY2
	STA	ENEMYY,X	;SET NEW LOCATION OF PRIZE INTO ENEMY LOC
	LDA	ENEMYFLGS,X	;GET THE FLAG
	AND	#$EF		;GET RID OF THE KILL BIT
	ORA	#2		;ADD IN A PRIZE BIT
	STA	ENEMYFLGS,X
	RTS

;IT CONTAINS POINTS

EXE65:	JSR	SHOWPOINTS

;NOW SEE IF WE WANT TO COMPLETELY KILL THE ENEMY.  IF ITS A PERMA LAUNCH
;WE DON'T, WE JUST WANT TO FREEZE IT LONG ENOUGH TO LET THE POINTS DISPLAY.

EXE70:	LDX	SAFEBYTE
	LDA	ENEMYFLGS,X
	AND	#$40		;PERMA LAUNCH?
	BEQ	EXE80

FREEZEPERMA:			;SHARED WITH EXPLODING ENEMY TO FREEZE PERMA
	LDA	ENEMYFLGS,X
	AND	#$EF		;CAN THE KILL BIT
	STA	ENEMYFLGS,X
	LDA	#PERMADELAY
	STA	ENEMYFREEZE,X	;IF SO, FREEZE IT FOR POINTS DISPLAY USAGE
	LDA	ENEMYFLGS,X	;AND TO GIVE THE PLAYER A BREAK
	ORA	#8
	STA	ENEMYFLGS,X	;AND JUST SET TO RE-GENERATE
	RTS

;THIS LITTLE SUB CAN BE CALLED TO FREE THE WORLD RAM FLAG FOR ENEMY SAFEBYTE
;AND SET THE ENEMY AS UNUSED.

EXE80: 	LDX	SAFEBYTE
	JSR	FREERAM
	LDA	#-1
	LDX	SAFEBYTE
	STA	ENEMY0,X	;IF NOT PERMA LAUNCH, KILL IT NOW
	RTS

;THIS ROUTINE WILL AWARD THE POINTS AND SHOW THEM AS CONTAINED IN ENEMY
;SPECIFIED BY SAFEBYTE.  THE ENEMY MUST CONTAIN POINTS (0-6 IN ENEMYPNTS).

SHOWPOINTS:
	LDX	SAFEBYTE	;GET BACK THE ENEMY #
	LDY	ENEMY0,X	;GET ENEMY # INDEX
	LDA	ENEMYPNTS,Y	;GET ITS POINT INDEX
	BEQ	SWPT10		;SKIP IF NO POINTS
	ASL	A		;MAKE WORD INDEX
	TAX
	JSR	ADD_SCORE	;ADD THE POINTS TO THE SCORE
	
	LDX	SAFEBYTE		;GET BACK THE ENEMY #
	LDY	ENEMY0,X	;GET ENEMY # INDEX
	LDA	ENEMYPNTS,Y	;GET ITS POINT INDEX
	ASL	A		;MAKE WORD INDEX
	TAX
	LDY	PNTS_PTR+1,X	;GET HIGH OFFSET
	LDA	PNTS_PTR,X	;GET LOW
	TAX
	STY	SAFEWORD+1
	ORA	SAFEWORD+1	;SEE IF NULL POINTER
	BEQ	SWPT10		;IF SO, NO POINTS DISPLAY.

	LDA	SAFEBYTE		;INITIALIZE THE POINTS WITH OUR IMAGE
	JSR	INITSPRT
	LDA	SAFEBYTE
	JSR	AUTOKILL	;AND MAKE IT AUTOKILL

	LDX	SAFEBYTE
	LDA	ENEMYY,X
	SBC	#10		;MOVE THE POINTS ABOVE IT A BIT
	TAY
	LDA	ENEMYX,X
	TAX
	LDA	SAFEBYTE
	JSR	PUTSPRT		;POSITION THE POINTS SPRITE AND START IT

SWPT10:	RTS

;THIS ROUTINE WILL FREE UP THE WORLDRAM FLAG FOR ENEMY SPECIFIED IN X.
;IT ALSO CHECKS TO SEE IF THAT ENEMY IS A BOSS AND IF SO IT WILL RESET THE
;APPROPRIATE BOSS BIT.  BE SURE THAT ENEMY0 STILL HAS THE ENEMY NUMBER IN IT.
;IF THE ENEMY IS ONE THAT IS NOT ERASED (BIT $20 IN BEHAVIOR) THEN IT 
;WILL NOT BE DONE.

FREERAM:			;CALL HERE TO FREE ENEMY Xs WORLDRAM FLAG.
	LDA	ENEMYRAM,X	;GET ITS LAUNCH FLAG ORIGIN
	CMP	#-1
	BEQ	FREM10

	LDY	ENEMY0,X

        LDA     SPECENEMY,Y
        AND     #%00010000     ;SEE IF IT WAS JUST A PRIZE
        BNE     FREM5
        DEC     BUGS_LEFT       ;Decrement bugs left to clear level.
        BNE     FREM5           ;still on level!

;finished with level...

        JSR     REMHAM          ;REMOVE HAMMER MAN?

        LDA     CURWORLD
        CLC
        ADC     #1
        STA     FOLLOW_WORLD    ;IF DISAPPEAR AND WAIT, SET NEXT WORLD

	JSR	ALLSILENCE
	LDX	#EMUSIC1 & $FF
	LDY	#EMUSIC1 >> 8
	LDA	#MSLOT1
	JSR	PLAY			;PLAY MELODY
	LDX	#EMUSIC2 & $FF
	LDY	#EMUSIC2 >> 8
	LDA	#MSLOT2
	JSR	PLAY			;PLAY BASE

        LDA     #30
        STA     WORLD_DONE      ;Set to wait 1/2 second.
;;      JSR     ALLSILENCE
        LDX     #ENDLEVEL & $FF
        LDY     #ENDLEVEL >> 8
        JMP     SET_NMI

FREM5:  LDA     BEHAVIOR,Y
	AND	#$20		
	BNE	FREM10		;IF ENEMY DOESN'T RESET, SKIP THE REQUEST
	
	LDA	ENEMYRAM,X	;GET BACK ORIGIN OF LAUNCH
	TAY
	LDA	#0
	STA	WORLDRAM,Y	;KILL THIS LAUNCH COMMAND	
	TYA
;;	JSR	MAINCHECK	;SEE IF IT WAS A MAIN ENEMY
FREM10:	RTS

;THIS ROUTINE WILL TAKE A POINTER INTO USE_PNTS IN X (WORD INDEX) AND
;ADD THE POINTS TO OUR SCORE.

ADD_SCORE:
	LDA	USE_PNTS,X
	CLC
	ADC	SCORE0
	STA	SCORE0
	LDA	USE_PNTS+1,X
	ADC	SCORE0+1
	STA	SCORE0+1	;ADD IN THE 2 DECIMAL DIGITS
	LDX	#0		;GET NUMBER OF DIGITS TO CORRECT

ADS10:	LDA	SCORE0,X	;GET NEXT DIGIT
	CMP	#10
	BCC	ADS20
	SBC	#10
	STA	SCORE0,X
	INC	SCORE0+1,X	;AND UP THE NEXT
ADS20:	INX
	CPX	#6
	BNE	ADS10
	RTS	

;THIS ROUTINE SHOULD BE CALLED TO GET RID OF AN ENEMIES BULLET IF IT IS SHOT 
;OR IT COLIDES WITH THE HERO.  THE CALLER SHOULD TAKE CARE OF HERO DAMAGE IF
;ANY.  THIS ROUTINE AS A CONVENIENCE WILL RETURN THE AMOUNT OF INTENDED
;HERO DAMAGE IN A (4 OR 1).

;THIS  ROUTINE MAY BE CALLED FROM ANY LEVEL, IT ONLY SETS A FLAG TO
;MAKE THE CORRECT LEVEL GET RID OF THE BULLET.  ON ENTRY, X SHOULD HAVE
;THE BULLET INDEX.

KILLEBULLET:

	LDA	BULLETFLG,X
	ORA	#$10		;SET THE KILL FLAG
	STA	BULLETFLG,X

	ROL	A
	ROL	A		;GET STRENGTH BIT
	LDA	#1
	BCC	KBT10
	LDA	#4		;IF STRONG, RETURN 4, ELSE 1.
KBT10:	RTS

;THIS ROUTINE WILL MOVE AN ENEMY'S BULLET.  IT ONLY MOVES THE DIRECTION
;IT WAS FIRED.  ON ENTRY, X HAS THE BULLET INDEX 0-5.  THE INDEX IS RETURNED
;IN SAFEBYTE.  

;THIS ROUTINE IS CALLED FROM THE NON-NMI LEVEL AND THIS IS OK.  THINK
;CAREFULLY BEFORE MOVING BACK TO NMI LEVEL AND DON'T TRY TO MIX!

MOVEBULLETS:
	STX	SAFEBYTE		;SAVE INDEX
	TXA
	CLC
	ADC	#ENEMYSHOT	;MAKE SPRITE # TO CONTROL IT WITH
	STA	SAFEWORD		;SAVE THAT HERE.

;MAKE SURE THE BULLET IS VALID.

	LDA	BULLETRANGE,X
	BNE	ENB1
	RTS

;SEE IF WE ARE TO KILL THE BULLET

ENB1:	LDA	BULLETFLG,X
	AND	#$10
	BNE	ENB40		;IF KILL NEEDED, GET RID OF IT.

;SEE IF THE BULLET RAN OUT OF RANGE.

ENB2:	DEC	BULLETRANGE,X	;LOWER RANGE IF NOT DONE YET
	BEQ	ENB40		;IF OUT OF RANGE, END BULLET

;FIND OUT WHAT KIND OF MOVEMENT TO MAKE.

	LDA	#0
	STA	SAFEX
	STA	SAFEY		;ZERO MOVEMENTS

	LDA	BULLETFLG,X	;GET THE BULLET FLAG
	ROR	A		;GOING RIGHT?
	BCC	ENB5
	LDY	#BULSPEED
	STY	SAFEX
ENB5:	ROR	A		;GOING LEFT?	
	BCC	ENB10
	LDY	#-BULSPEED
	STY	SAFEX
ENB10:	ROR	A		;GOING DOWN?	
	BCC	ENB15
	LDY	#BULSPEED
	STY	SAFEY
ENB15:	ROR	A		;GOING UP?
	BCC	ENB20
	LDY	#-BULSPEED
	STY	SAFEY

ENB20:	LDA	BULLETFLG,X	;FAST BULLET?
	BPL	ENB25
	ASL	SAFEX
	ASL	SAFEY		;IF SO, DOUBLE SPEED.

ENB25:	LDA	SAFEX
	CLC
	ADC	GLOBAL_SCROLL	;MOVE BULLET AND CORRECT FOR SCROLL TOO.
	TAX
	LDY	SAFEY
	LDA	SAFEWORD
	JSR	MOVESPRT	;MOVE THE BULLET
	
;SEE IF BULLET IS OFF SCREEN. IF SO, KILL IT.

	LDX	RESULTX
	LDY	RESULTY
	JSR	OFFSCREEN	;OFF SCREEN?
	BEQ	ENB40
	RTS

;BULLET HAS REACHED ITS RANGE LIMIT.

EBULLETGONE:			;CALL HERE AS SUBE TO MAKE IT GO AWAY

ENB40:	LDA	#0
	LDX	SAFEBYTE
	STA	BULLETRANGE,X
	TXA
	CLC
	ADC	#ENEMYSHOT	;MAKE SPRITE # TO CONTROL IT WITH
	JMP	KILLSPRT	;GET RID OF IT

;THIS ROUTINE WILL LAUNCH AN ENEMIES BULLET.  ON ENTRY, SAFEBYTE HAS THE ENEMY
;INDEX.  BULLETFLG HAS ALREADY BEEN SET.  SAFEWORD IS 
;NOT USED BUT SAFEWORD+1 IS USED.  SAFEBYTE, SAFEX AND SAFEY ARE NOT CHANGED.

;THE BULLET MUST NOT BE ALREADY LAUNCHED.  IF THE BULLET IMAGE IS 0, THIS
;ROUTINE ASSUMES IT WAS A DUD AND IGNORES THE CALL.  THIS IS USED TO
;MAKE A SOUND INSTEAD OF FIRE.

;THIS ROUTINE ALSO SUPPORTS FORCING USE OF THE WALLSHOT IMAGE.  SEE THE
;FIRE WALL GUN COMMAND.

LAUNCH_BULLET:

	LDA	SAFEBYTE
	AND	#$7F		;GET RID OF POSSIBLE FORCED IMAGE BIT
	CLC
	ADC	#ENEMYSHOT	;MAKE SLOT TO USE FOR SPRITE.
	STA	SAFEWORD+1


	LDX	SAFEBYTE
	BPL	LB10
	TXA
	AND	#$7F		;MAKE A CORRECT INDEX
      	STA	SAFEBYTE
	LDX	#WALLSHOT & $FF
	LDY	#WALLSHOT >> 8
	JMP	LB15

LB7:	RTS

LB10:	LDA	ENEMY0,X
	ASL	A		;MAKE *2 INDEX
	TAY			;MAKE INDEX TO THE BULLET FLAGS.
	LDA	BULLETLIST,Y
	TAX
	LDA	BULLETLIST+1,Y
	TAY
	BEQ	LB7		;IGNORE CALL IF DUMMY BULLET
	
LB15:	LDA	SAFEWORD+1
	JSR	INITSPRT	;INITIALIZE THE SPRITE

;MIRROR IT IF TRAVELING LEFT

	LDX	SAFEBYTE
	LDA	BULLETFLG,X
	AND	#2
	TAX
	LDA	SAFEWORD+1
	JSR	MIRROR		;MAKE THE BULLET FACE LEFT

;PUT IT UP FOR THE FIRST TIME. 

	LDX	SAFEBYTE		;GET INDEX
	LDY	ENEMY0,X	;GET ENEMY #
	LDA	BULLET_DOWN,Y	;GET AMOUNT DOWN FROM ENEMY Y
	CLC
	ADC	ENEMYY,X
	TAY			;SAVE THE LAUNCHING Y VALUE

	LDA	ENEMYX,X	;GET ENEMY X TO SAVE IT OUT
	STA	SAFEX2

	LDA	BULLETFLG,X	;SEE IF HORIZONTAL TRAVEL
	AND	#%11
	BEQ	LB50
	AND	#1		;RIGHT?
	BNE	LB30
	LDA	SAFEX2
	SEC
	SBC	#8		;JUST BACK UP TO LEFT IF NOT
	BCS	LB60
	JMP	LB40		;KILL BULLET IF WRAPPED

LB30:	LDA	ENEMYWIDE,X	;ITS VERTICAL TRAVEL.  GET ENEMY WIDTH.
	CLC
	ADC	SAFEX2
	BCC	LB60
LB40:	JSR	EBULLETGONE	;IF WRAP AT SCREEN END, KILL IT.
	RTS

LB50: 	LDA	ENEMYWIDE,X
	LSR	A		;MAKE HALF WIDTH OF ENEMY
	ADC	SAFEX2		;JUST CENTER IF VERTICAL
	SBC	#3		;AND SUBTRACT 4 TO MOVE IT LEFT FOR BULLET
				;WIDTH
LB60:	TAX
	LDA	SAFEWORD+1
	JSR	PUTSPRT		;PUT IT DOWN FOR THE FIRST TIME.

;SET RANGE

	LDX	SAFEBYTE		;GET BACK THE INDEX TO USE
	LDA	BULLETFLG,X	;GET DOUBLE RANGE BIT
	AND	#$20
	ORA	#$1F
	LSR	A
	STA	BULLETRANGE,X	;SET RANGE TO TRAVEL
	RTS

;THIS ROUTINE WILL CHECK X AND Y COORDINATES FOR THE UPPER LEFT OF A SPRITE
;AND SEE IF THE SPRITE SHOULD BE CONSIDERED OFF SCREEN.  X HAS X, Y HAS
;Y.  ON RETURN, A=0 AND Z IF OFFSCREEN.

OFFSCREEN:
	CPX	#0
	BEQ	OFS10
	CPX	#255
	BEQ	OFS10
	TYA
	BEQ	OFS10
	LDY	WORLD_INDX
	CMP	SCREENLIMITS,Y	;IS IT ABOVE THE TOPMOST LIMIT?
	BCC	OFS10
	CMP	SCREENLIMITS+1,Y
	BEQ	OFS5
	BCS	OFS10		;OR BELOW THE BOTTOM?
OFS5:	LDA	#-1
	RTS

;OFF SCREEN.

OFS10:	LDA	#0
	RTS

;THIS ROUTINE WILL MOVE AN ENEMY.  THE ENEMY INDEX SHOULD BE IN X ON
;ENTRY, 0-5.  THIS ROUTINE IS INTENDED TO BE CALLED EVERY 4TH NMI.  
;THE INDEX IS RETURNED IN SAFEBYTE.

MOVEENEMY:

	STX	SAFEBYTE		;SAVE THE INDEX

;MAKE SURE THE ENEMY IS VALID
	
	LDA	ENEMY0,X
	CMP	#-1		;INVALID?
	BNE	ME01
     	RTS

;SEE IF THE ENEMY NEEDS TO BE KILLED.

ME01:	LDA	ENEMYFLGS,X
	AND	#$10
	BEQ	ME02
	JMP	EX_ENEMY	;IF NEEDS KILL, GET RID OF IT
	RTS			;AND MUST RETURN AFTER THAT CAUSE SAFEBYTE
				;CAN CHANGE.

;SEE IF THE ENEMY IS FROZEN.  WE HAVE TO DO THAT BEFORE WE CHECK THE
;GENERATION FLAG BECAUSE IT MIGHT BE AN OLD ENEMY THAT IS EXPLODING.

;IF THE BIT IN BEHAVIOR IS SET TO DISABLE BEING FROZEN, WE CANCEL IT.

ME02: 	LDA	ENEMYFREEZE,X	;SEE IF FROZEN ENEMY
	BEQ	ME02J
	CMP	#-1
	BEQ	ME02A		;CAN'T UNFREEZE IF -1 (ITS A PRIZE)
	LDY	ENEMY0,X
	LDA	BEHAVIOR,Y	;SEE IF IT CAN'T BE FROZEN
	AND	#$40
	BEQ	ME02G
	LDA	ENEMYFLGS,X
	AND	#2		;PRIZE?  IF SO, WE MUST IT FROZEN
	BNE	ME02G
      	LDA	#0
	STA	ENEMYFREEZE,X	;IF FREEZE PROOF, RESET FREEZE
ME02J:	JMP	ME10		;AND CONTINUE AS IF IT DIDN'T EVER HAPPEN

ME02G:	DEC	ENEMYFREEZE,X	;IF FROZEN, JUST LOWER FREEZE COUNT.
	BNE	ME02A

;ENEMY JUST UNFROZE.  SEE IF IT WAS A PRIZE.

	LDA	ENEMYFLGS,X
	AND	#2		;PRIZE?
	BEQ	ME02A
	JMP	EX_ENEMY	;IF SO, JUST MAKE IT GO AWAY

;ENEMY IS FROZEN BUT IF IT EXISTS WE HAVE TO MOVE IT WITH THE GLOBAL
;SCROLL ANYWAY.

ME02A:	LDA	ENEMYFLGS,X
	AND	#8
	BNE	ME03

;CALL HERE TO ADJUST THE ENEMY FOR SCREEN SCROLL.  IF HE SCROLLS OFF EITHER
;SIDE HE WILL BE REMOVED UNLESS HE IS A DON'T REMOVE ENEMY IN SPECENEMY.

SCROLLENEMY:			;THIS SUB WILL ADJUST THE ENEMY FOR SCROLL.

	LDX	SAFEBYTE

	LDA	GLOBAL_SCROLL	
	BEQ	ME03		;SKIP IF NO ADJUSTMENT NEEDED.
	CLC
	BPL	ME02B
	ADC	ENEMYX,X
	BCS	ME02C
	LDY	ENEMY0,X
        CPY     #76             ;DAN 5/17 IF CRATE ENEMY, CAN'T REMOVE IF LEFT=118
        BNE     SLE10           ;DAN 5/17
        LDA     STARTCOL        ;DAN 5/17
        CMP     #118            ;DAN 5/17
        BEQ     SLE20           ;DAN 5/17
SLE10:  LDA     SPECENEMY,Y
	AND	#%100		;DON'T REMOVE?
	BEQ	ME03A
SLE20:  LDA     #0
	JMP	ME02C		;IF SO, PUT AGAINST LEFT

ME02B:	ADC	ENEMYX,X
	BCC	ME02C		

	LDY	ENEMY0,X	;OFF SCREEN TO RIGHT
	LDA	SPECENEMY,Y
	AND	#%100		;DON'T REMOVE?
	BEQ	ME03A		;IF NOT, JUST GET RID OF IT
	LDA	#$FF		;IF SO, PUT AGAINST RIGHT

ME02C:	STA	ENEMYX,X	
	LDY	ENEMYY,X	;GET CURRENT REAL Y
	TAX
	LDA	SAFEBYTE
	JSR	PUTSPRT		;MOVE THE ENEMY TO MATCH THE BACKGROUND
ME03:	RTS	

ME03A:	LDA	ENEMYFREEZE,X	;SEE IF A FROZEN PRIZE SCROLLED OFF SCREEN
	BEQ	ME03B
      	LDA	ENEMYFLGS,X
	AND	#2		;PRIZE?
	BEQ	ME03B
	JMP	EX_ENEMY	;IF SO, JUST MAKE IT GO AWAY
ME03B:	JMP	ME39

;NEXT SEE IF THE ENEMY NEEDS TO BE GENERATED.

ME10:	LDA	ENEMYFLGS,X
	AND	#8
	BNE	ME12
	JMP	ME36

;---------GENERATE NEW ENEMY------------------

ME12: 	EOR	ENEMYFLGS,X	;RESET NEED GENERATION BIT
	STA	ENEMYFLGS,X
	AND	#$20		;SEE IF EXPLODED ENEMY
	BNE	ME15A		;IF SO, SKIP ZEROING

	LDA	#0

	STA	ENEMYINDX,X	;RESET ENEMY'S STATE INDEX
	STA	ENEMYFREEZE,X	;AND UNFREEZE THE ENEMY 
	STA	ENEMYXMOM,X
	STA	ENEMYYMOM,X	;RESET MOMENTUM FOR ENEMY
	STA	ENEMYJUMP,X	;ZERO THE JUMPING FLAG
	STA	ENEMYSTATE,X	;RESET FLAGS OF CONDITION OF ENEMY
	
ME15A:  JSR     CHECKKRAT       ;SEE IF KRAT
        BNE     ME15B
        LDA     #0
        STA     KRATSTATE       ;IF KRAT, ZERO STATE.

ME15B:  LDA     ENEMYHITS,Y     ;GET NUMBER OF HITS IT CAN TAKE (HEALTH)
        STA     ENEMYHEALTH,X

        LDA     #0
        STA     ENEMYCTR,X
	
;------------------------------------------ JGT 05/11/90 ---------------
;If enemy type is 2, 3, or 36 then the enemy is a "mosquito" that
;has been hit and is now falling upside down...use old X & Y pos.

        CPY     #2
        BEQ     ME20
        CPY     #3
        BEQ     ME20
        CPY     #36
        BEQ     ME20

;If enemy type is 81, then the enemy is a "GBUGROLL" (?!?)...use old
;X & Y pos.

        CPY     #81
        BEQ     ME20

;If enemy type is 10, 12, or 13, then the enemy is a "reviving" mosquito
;or if enemy type is is 34 then the enemy is a "reviving" GBUG, but only
;if BOUNCECT = -1...otherwise, it is a mosquito/gbug being activated
;normally.

        LDA     BOUNCECT,X
        CMP     #-1
        BNE     ME15AJT

;"revived" mosquito or GBUG.

        LDA     #0
        STA     BOUNCECT,X
   	LDA     ENEMYFLGS,X
        ORA     #$80           ;make into a "fast" enemy
        STA     ENEMYFLGS,X
        JMP     ME20

ME15AJT:        ;nope!
;-----------------------------------------------------------------------
        LDA     #0
     	STA     BOUNCECT,X             ;JGT 05/14/90
        STA     BOUNCEX,X
        STA     BOUNCEY,X

	LDA	LAUNCHY,X	;GET Y LOCATION TO LAUNCH FROM
	TAY
;;	LDA	LAUNCHXH,X	;GET HIGH X
;;	PHA
	LDA	LAUNCHXL,X	;GET LOW
	TAX
;;	PLA			;MAKE A:X LOCATION
	JSR	VISUAL_POINT	;TRY TO CORRECT THE VALUES
	BCC	ME16		;IF NOT CORRECTED, GO FOR IT

	LDX	SAFEBYTE
	LDA	ENEMYFLGS,X
	ORA	#8
	STA	ENEMYFLGS,X	;DON'T LAUNCH ENEMY IF IT HAD TO BE CORRECTED,
	RTS			;LET IT COME ON SCREEN OR GO COMPLETELY OFF.

ME16:	TXA
	LDX	SAFEBYTE		;GET BACK INDEX
	STA	ENEMYX,X
	TYA
	STA	ENEMYY,X	;SAVE LOCATIONS
	CPY	#$F8		;OFF SCREEN?
	BCC	ME20
	LDA	#-1
	STA	ENEMY0,X	;IF OFFSCREEN LAUNCH POINT, END IT.
	RTS	

ME20:	LDA	SAFEBYTE
	JSR	KILLSPRT
	LDX	SAFEBYTE 
	LDA	ENEMY0,X	;GET BACK ENEMY #
	ASL	A		;MAKE WORD INDEX FROM IT
	TAX
	LDA	ENEMYTAB+1,X	;GET THE HIGH OFFSET
	STA	SUBSVAR2
	STA	SUBSVAR4
	LDA	ENEMYTAB,X	;GET LOW
	STA	SUBSVAR1	;SET A POINTER TO GET SIZES
	STA	SUBSVAR3	;SAVE ORIGINAL IN CASE OF CORRECTION
	LDY	#0
	LDA	(SUBSVAR1),Y	;GET THE FLAG BYTE
	CMP	#83		;ASCII "S" = SPRITE ANIMATION
	BNE	ME26		;IF IT IS, WE HAVE SIZE POINTER NOW

	LDY	#3
	LDA	(SUBSVAR1),Y
	PHA
	INY
	LDA	(SUBSVAR1),Y	;GET FIRST ENTRY'S POINTER
	STA	SUBSVAR2	;SO WE CAN GET THE SIZE OF THE ENEMY
	PLA
	STA	SUBSVAR1

ME26: 	LDX	SAFEBYTE
	LDY	#1
	LDA	(SUBSVAR1),Y	;GET WIDTH OF THE ENEMY
	JSR	TIMES8		;MAKE PIXEL WIDTH
	STA	ENEMYWIDE,X
	INY

	LDA	(SUBSVAR1),Y	;GET HEIGHT OF THE ENEMY
	JSR	TIMES8		;MAKE PIXEL HEIGHT
	STA	ENEMYHIGH,X

	LDX	SUBSVAR3
	LDY	SUBSVAR4	;GET BACK INIT PTRS
	LDA	SAFEBYTE
	JSR	INITSPRT	;INITIALIZE THE SPRITE FOR THIS ENEMY
	LDX	SAFEBYTE
	CMP	#0
	BEQ	ME27	
	LDA	#-1
      	STA	ENEMY0,X	;IF CAN'T INIT, KILL ENEMY AND DONE.
	RTS

ME27: 	LDX	SAFEBYTE	;GET BACK ENEMY INDEX.
	LDY	ENEMY0,X	;GET ENEMY NUMBER
	LDA	ENEMYOPTS,Y	;GET ENEMIES ACTIVATION OPTIONS
	STA	SAFEWORD+1	;PUT IN A GOOD ROR PLACE

	ROR	SAFEWORD+1	;SEE IF RESPONDS TO SOLID
	BCC	ME30
	LDY	CURWORLD
	LDX	USE_SOLID,Y	;GET WORLD SOLID VALUE FOR ENEMIES
	BEQ	ME30
	LDA	SAFEBYTE
	JSR	SOLID
		
ME30:	ROR	SAFEWORD+1	;SEE IF ALIGNS TO BACKGROUND.
	BCC	ME35

	LDX	#$20			;FLAG OF ALIGN HORIZONTALLY
	LDY	#2			;AND WE CHANGE HERO ANIMATION EVERY 4
	LDA	SAFEBYTE
	JSR	ALIGNANIM		;MAKE ENEMY ALIGN TO BACKGROUND

ME35: 	LDX	SAFEBYTE	;NOW POSITION THE SPRITE AT THE LAUNCH POINT
	LDY	ENEMYY,X
	LDA	ENEMYX,X
	TAX
	LDA	SAFEBYTE
	JSR	PUTSPRT		;PUT THE SPRITE DOWN

;IF THE ENEMY IS A SPECIAL ENEMY WE MAY WANT TO SET INITIAL MOMENTUM.

	JSR	STRAIGHTER	;SEE IF SPECIAL ENEMY TYPE
	BEQ	ME75		;SKIP IF NOT

	PHA			;SAVE TYPE
	LDY	#SLOWSTRAIGHT	;ASSUME SLOW ENEMY
	LDA	ENEMYFLGS,X
	BPL	ME71
	LDY	#FASTSTRAIGHT 	;USE THIS SPEED IF FAST ENEMY
ME71: 	PLA			;GET BACK DIRECTION OF SPECIAL ENEMY
	BMI	ME73
	TYA
	STA	ENEMYYMOM,X	;SET Y MOMENTUM TO CORRECT SPEED
	LDA	ENEMYY,X	;SEE IF NEED NEGATIVE DIRECTION
	CMP	HEROSHEAD	;SEE IF ABOVE OR BELOW THE HERO
	BCC	ME75		;IF ABOVE ON SCREEN, + IS OK
	TYA
	JSR	NEGATE
	STA	ENEMYYMOM,X
	JMP	ME75	

ME73:	STY	ENEMYXMOM,X	;SET X MOMENTUM TO CORRECT SPEED
	LDA	ENEMYX,X	;SEE IF NEED NEGATIVE DIRECTION
	CMP	HEROX		;SEE IF LEFT OR RIGHT OF HERO
	BCC	ME75		;IF LEFT ON SCREEN, + IS OK
	TYA
	JSR	NEGATE
	STA	ENEMYXMOM,X

ME75:	LDX	#0
	LDY	#0
	JSR	MOVESET		;SEE IF IT WAS GENERATED ON TOP OF SOLID
	BEQ	ME39A

	JSR	MAKEDING

;JUMP HERE TO MAKE THE ENEMY JUST DISAPPEAR AND FREE UP ITS SLOT.  IT WILL
;NOT ERASE THE LAUNCH FLAG IN WORLDTAB.

ME39: 	JSR	ENEMYGONE
ME39A:	RTS

;THE ENEMY SPRITE ALREADY EXISTS.  GET ITS LOCATION FOR COMMON USAGE 
;AND SAVE THE OPPOSITE BORDER IN SAFEX, SAFEY.
;THE ENEMIES X AND Y LOCATION ARE ALWAYS IN ENEMYX AND ENEMYY.

ME36: 	LDX	SAFEBYTE

	LDA	ENEMYWIDE,X	;GET WIDTH OF ENEMY IN PIXELS
	CLC
	ADC	ENEMYX,X
	BCC	ME57

ME56:	LDA	#0
ME57:	STA	SAFEX		;MAKE A RIGHT SIDE LOCATION
	DEC	SAFEX

	LDA	ENEMYHIGH,X
	CLC
	ADC	ENEMYY,X
	BCC	ME58
	LDA	#0
ME58:	STA	SAFEY
	DEC	SAFEY

;SEE IF THE ENEMY CAN LAUNCH OTHER ENEMIES.

	LDA	TIMETICK
	AND	#LAUNCHMASK	;ONLY EVERY 4 SECONDS
	BNE	MDR5
	LDX	SAFEBYTE
	LDY	ENEMY0,X
	LDA	SPECENEMY,Y	;GET SPECIAL ENEMY FLAG
	AND	#%11		;CAN LAUNCH OTHERS?
	BEQ	MDR5
	
;THIS ENEMY CAN LAUNCH OTHER ENEMIES AND IT IS TIME TO TRY IT OUT.

	STA	SAFEX2		;SAVE NUMBER IT CAN LAUNCH
	LDA	TIMETICK
	AND	#%1100
	LSR	A
	LSR	A		;MAKE ENEMY TO LAUNCH FROM THE TIME
LEE9:	CMP	SAFEX2		
	BCC	LEE10
	SBC	SAFEX2
	JMP	LEE9
LEE10:	SEC
	ADC	ENEMY0,X	;MAKE ENEMY NUMBER IN ENEMYTAB TO LAUNCH
	STA	SAFEX2		;SAVE ONE TO LAUNCH HERE
	JSR	FINDENEMY	;FIND AN AVAILABLE ENEMY SLOT	
	BNE	MDR5		;IF NONE, CAN'T DO IT.
	LDY	SAFEBYTE	;AND GET OURS

	LDA	SAFEX2
	STA	ENEMY0,X   	;SET ENEMY TYPE
	LDA	ENEMYFLGS,Y	;GET OUR FLAG
	AND	#$80		;KEEP FAST BIT
	ORA	#8		;SET LAUNCH BIT
	STA	ENEMYFLGS,X	;SET FLAG 
	LDA	#0
	STA	ENEMYFREEZE,X	;MAKE SURE ITS NOT FROZEN
	LDA	#-1
	STA	ENEMYRAM,X	;RESET WHAT ENEMY TO ERASE WHEN DONE
	LDA	ENEMYX,Y
	JSR	DIV8		;MAKE COLUMN OF THIS ENEMY
	ADC	STARTCOL
	STA	LAUNCHXL,X	;SET LAUNCH COLUMN
;;	LDA	STARTCOL+1
;;	ADC	#0
;;	STA	LAUNCHXH,X
	LDA	ENEMYY,Y
	JSR	DIV8		;MAKE ROW WITHIN BACKGROUND.
	STA	LAUNCHY,X	;SET WHERE TO GENERATE FROM

;SEE IF THE ENEMY SHOULD FIRE A BULLET.   WE PUT A DELAY CHECK IN HERE SO
;HE WON'T SHOOT UNFAIRLY FAST.

MDR5:	LDX	SAFEBYTE    	;RESTORE ENEMY INDEX.
	LDA	TIMETICK 
	AND	#%111100	;CAN ONLY FIRE EVERY 1 SECOND
	BNE	MDR9
	LDA	BULLETRANGE,X	;ALREADY FIRED ONE?
	BNE	MDR9

	LDA	STUCK    	;SEE IF HERO'S STUCK TO AN ENEMY
	BEQ	MDR10
      	CPX	STICKENEMY
	BNE	MDR10
MDR9:	JMP	MDR50		;IF WE ARE STUCK TO THIS ONE, CAN'T FIRE
	
;FIRST MAKE A FLAG THAT REPRESENTS THE DIRECTION ON BOTH AXIS TOWARDS THE
;HERO.   THE BITS WILL BE UP, DOWN, LEFT, RIGHT

MDR10:	LDY	#%0001		;ASSUME RIGHT
	LDA	HEROX
	SEC
	SBC	ENEMYX,X	;SEE IF THAT'S TRUE
	BCS	MDR11
	LDY	#%0010		;IF NOT TRUE, SET GOING LEFT
	JSR	NEGATE		;MAKE ABSOLUTE VALUE OF DISTANCE
MDR11:	STA	SAFEX2		;SAVE DISTANCE TO HERO
	STY	SAFEWORD	;SAVE HORIZONTAL DIRECTION TO HIT HERO
	LDY	#%11111101	;MAKE MASK THAT DISABLES GOING LEFT
	LDA	ENEMYXMOM,X	;GET MOMENTUM
	BEQ	MDR13		;IF ZERO, ALWAYS FACES HERO
	BPL	MDR12
	LDY	#%11111110	;IF NEGATIVE MOMENTUM, DISABLE GOING RIGHT
MDR12:	TYA
	AND	SAFEWORD
	STA	SAFEWORD	;THIS ASSURES WE ONLY SHOOT THE WAY WE FACE	

MDR13:	LDY	#%0100		;NOW MAKE UP AND DOWN BITS.  ASSUME DOWN
	LDA	HEROSHEAD
	SEC
	SBC	ENEMYY,X	;SEE IF THAT'S TRUE
	BCS	MDR14
	LDY	#%1000		;IF NOT TRUE, SET GOING UP
	JSR	NEGATE
MDR14:	STA	SAFEY2		;SAVE DISTANCE TO HERO ON Y
	TYA
	ORA	SAFEWORD
	STA	SAFEWORD	;ADD TO HORIZONTAL INFO

;WE HAVE THE DIRECTION TO HERO TO FIRE IN BITS IN SAFEWORD.  COMBINE TO
;SEE IF WE CAN FIRE AT ALL.

	LDY	ENEMY0,X	;GET ENEMY TYPE 
	LDA	BULLETTYPE,Y	;GET TYPE OF BULLET
	AND	SAFEWORD	;GET ALLOWED DIRECTIONS
	BEQ	MDR50		;CANT FIRE IF NO DIRECTIONS ALLOWED
	STA	SAFEWORD	;SAVE FIXED ALLOWED DIRECTION BITS

;MAKE A SMARTER ADJUSTMENT OF WHICH DIRECTION WE SHOULD SHOOT.  

	AND	#%1100		;MAKE SURE WE HAVE SOME VERTICAL
	BEQ	MDR20		;IF NOT, NO ADJUSTMENT POSSIBLE
	LDA	SAFEWORD
	AND	#%11		;AND MUST ALSO HAVE SOME HORZ
	BEQ	MDR30		;OR ELSE THERE IS JUST 1 LINE OF FIRING.
	LDY	#%0011		;MAKE MASK THAT REMOVES Y COMPONENT
	LDA	SAFEX2		;GET X DISTANCE
	SEC
	SBC	SAFEY2		;MAKE DIFFERENCE COMPARED TO Y
	BCS	MDR20
	JSR	NEGATE
	LDY	#%1100		;IF Y IS BIGGER, WILL WANT TO REMOVE X 
MDR20:	CMP	#32		;IF WITHIN 32 WE CONSIDER IT CLOSE ENOUGH
	BCC	MDR30
	TYA
	AND	SAFEWORD
	STA	SAFEWORD	;REMOVE THE LARGEST DISTANCE COMPONENT.

;SEE IF WE NEED TO BE WITHIN A CERTAIN RANGE TO SHOOT OR IF ITS CONTINUOUS

MDR30:	LDY	ENEMY0,X
	LDA	BULLETTYPE,Y	
	AND	#$10		;SEE IF CONTINUOUS SHOOTING
	BNE	MDR40		;IF CONTINUOUS, USE WHAT WE HAVE

;NOT CONTINUOUS SHOOTING.  WE FIRE IF ONE OF THE AXIS WAS WITHIN 
;THE ALLOWED DISTANCE.

 	LDY	SAFEX2		;ASSUME CHECKING THIS ONE
	LDA	SAFEWORD	;GET DIRECTION
	AND	#%11		;SEE IF HORIZONTAL WE NEED TO CHECK
	BEQ	MDR35
	LDY	SAFEY2
MDR35:	CPY	#17		;WITHIN 16?
	BCS	MDR50

;TIME TO FIRE.  THE DIRECTION BITS ARE IN SAFEWORD.  WE NEED TO ADD IN
;THE OPTIONS.

MDR40: 	LDY	ENEMY0,X
	LDA	BULLETTYPE,Y
	AND	#$E0		;GET OPTIONS BITS
	ORA	SAFEWORD
	STA	BULLETFLG,X	;SET IN DIRECTION BIT

	TYA			;GET INDEX WHILE WE STILL HAVE IT
	ASL	A		;MAKE WORD INDEX FOR THIS ENEMY
	TAY
	LDA	ENEMYSND,Y
	STA	SAFEX
	LDA	ENEMYSND+1,Y
	STA	SAFEY		;SAVE THE SOUND THIS ONE MAKES

	JSR	LAUNCH_BULLET	;SEND THE ENEMIES BULLET ON ITS WAY

	LDA	SAFEY		;SEE IF THERE WAS A SOUND
	BEQ	MDR50		;SKIP IF NOT
	LDA	#ENEMYNOISE
	JSR	SILENCE
	LDX	SAFEX
	LDY	SAFEY	
	LDA	#ENEMYNOISE
	JSR	PLAY		;IF THERE WAS, STOP OLD ONE, START THIS ONE

;MOVE THE ENEMY TO KEEP UP WITH THE GLOBAL BACKGROUND SCROLL VARIABLE.

MDR50:	LDX	SAFEBYTE
	JSR	SCROLLENEMY	;MOVE THE ENEMY TO MATCH THE BACKGROUND

;NOW APPLY GRAVITY TO THE ENEMY IF HE REQUIRES IT.  IF BIT $40 IS SET ALONG
;WITH THE GRAVITY BIT WE SKIP ALL OTHER SPECIAL MOTIONS TILL HE IS OUT
;OF THE GRAVITY REGION.

	LDX	SAFEBYTE
	LDY	ENEMY0,X
	LDA	ENEMYOPTS,Y
	BPL	ME201

;BUT NOT IF HIS FEET ARE IN THE NO GRAVITY RANGE.  

	LDA	SAFEY		;GET FEET OF ENEMY
	CMP	TOPGRAV
	BCC	ME200A
      	CMP	BOTGRAV
	BCC	ME201

ME200A:	LDY	CURWORLD	;GET WORD INDEX FOR THIS WORLD
	LDA	GRAVITY,Y
	CLC
	ADC	ENEMYYMOM,X
	BVS	ME201
	STA	ENEMYYMOM,X

	LDY	ENEMY0,X
	LDA	ENEMYOPTS,Y
	AND	#$40		;SEE IF WE SKIP OTHERS TILL OUT OF GRAVITY
	BEQ	ME201
	JMP	ME271

;DONE WITH SPECIAL FUNCTIONS.  GO TO THE LOGIC FOR EACH ENEMY BEHAVIOR TYPE.

ME201:  JSR     CHECKKRAT       ;GET INDEX, SEE IF KRAT
        BEQ     KRA5
        JMP     KRA500

;ITS KRAT (THE BIG RAT BOSS)!   KRATSTATE HAS WHAT HE IS DOING RIGHT NOW:
;0=WALKING TOWARDS HERO
;1=LUNGING AT HERO
;2=HURT (FLINGING BACK).

KRA5:   INC     ENEMYINDX,X     ;MOVE ENEMY'S INDEX FOR NEXT PASS
        LDA     ENEMYINDX,X
        AND     #$0F
        STA     ENEMYINDX,X
        BNE     KRA10
KRA7:   LDA     #0
        STA     KRATSTATE       ;IF WE GO TO INDEX 0, RESET STATE TO WALKING
        LDA     SAFEBYTE
        LDY     #KRAT >> 8
        LDX     #KRAT & $FF
        JSR     SWAPSPRT
        LDX     SAFEBYTE
        JMP     ME290A

KRA10:  LDA     HEROX
        SEC
        SBC     ENEMYX,X                ;MAKE DIRECTION TO HERO
        STA     SAFEX2                  ;KEEP DISTANCE HERE
        LDA     #0
        BCS     KRA15
        LDA     SAFEX2
        JSR     NEGATE
        STA     SAFEX2                  ;FIX DISTANCE TO HERO TO MAKE ABS VAL
        LDA     #1
KRA15:  STA     SAFEX                   ;MAKE DIRECTION TO HERO

        LDA     KRATSTATE               ;HE'S WALKING.
        BNE     KRA50
        LDA     #16             ;ASSUME NEED + MOVEMENT
        LDY     SAFEX
        BEQ     KRA20
        LDA     #-16
KRA20:  STA     ENEMYXMOM,X

KRA30:  LDA     SAFEX2          ;NOW SEE IF WE SHOULD LUNGE.
        CMP     #64             ;LUNGE IF WITHIN 64
        BCS     KRA45
        LDA     #1
        STA     KRATSTATE               ;SET STATE TO JUMPING TOWARDS HERO
        LDA     SAFEBYTE
        LDY     #KRATJUMP >> 8
        LDX     #KRATJUMP & $FF
        JSR     SWAPSPRT
        LDX     SAFEBYTE
KRA45:  JMP     ME290A

KRA50:  CMP     #1              ;***LUNGING AT HERO
        BNE     KRA100
	LDY	ENEMYINDX,X	;GET THE INDEX TO USE FOR MOTION TABLES
	LDA	HOPPING,Y
        ASL     A
        ASL     A
        ASL     A
        STA     ENEMYYMOM,X
        LDA     #64             ;ASSUME NEED + MOVEMENT
        LDY     SAFEX
        BEQ     KRA70
        LDA     #-64
KRA70:  STA     ENEMYXMOM,X     
KRA71:  JMP     ME290A

KRA100: LDA     #-64            ;KRAT HURT.
        LDY     SAFEX
        BEQ     KRA110
        LDA     #64
KRA110: STA     ENEMYXMOM,X     
        LDA     ENEMYINDX,X
        CMP     #8
        BCC     KRA71
        JMP     KRA7

;ITS NOT KRAT.

KRA500:

        LDA     MOTION,Y        ;GET THIS ENEMIES MOTION
        STA     SAFEWORD+1      ;PUT WHERE WE CAN ROR IT.

;BIT %00000001 = APPLY CIRCULAR MOTION TO ENEMY.

        ROR     SAFEWORD+1
        BCC     ME210
        LDA     ENEMYINDX,X     ;GET THE INDEX TO USE FOR MOTION TABLES
        ASL     A
        TAY                     ;MAKE *2 INDEX FOR CIRCLE TABLE
        LDA     CIRCLING,Y
	CLC
	ADC	ENEMYXMOM,X
        BVS     ME205
        STA     ENEMYXMOM,X             
ME205:  LDA     CIRCLING+1,Y
        CLC
        ADC     ENEMYYMOM,X
        BVS     ME210
        STA     ENEMYYMOM,X     ;CHANGE X AND Y MOMENTUM ACCORDING TO TABLE

;BIT %00000010 = APPLY HOPPING (VERTICALLY) MOTION TO ENEMY.

ME210:  ROR     SAFEWORD+1
        BCC     ME220
        LDY     ENEMYINDX,X     ;GET THE INDEX TO USE FOR MOTION TABLES
        LDA     HOPPING,Y
        CLC
        ADC     ENEMYYMOM,X
        BVS     ME220
        STA     ENEMYYMOM,X     ;APPLY HOPPING MOTION TO ENEMY'S Y

;BIT %00000100 = APPLY SWERVING (HORIZONTAL) MOTION TO ENEMY.

ME220:  ROR     SAFEWORD+1
        BCC     ME230
        LDY     ENEMYINDX,X     ;GET THE INDEX TO USE FOR MOTION TABLES
        LDA     SWERVING,Y
	CLC
	ADC	ENEMYXMOM,X
        BVS     ME230
        STA     ENEMYXMOM,X     ;APPLY HOPPING MOTION TO ENEMY'S Y

;BIT %00001000 = ENEMY WILL TRACK HERO ON THE X AXIS.  

ME230:  ROR     SAFEWORD+1
        BCC     ME240
        LDA     INDOOR          ;SEE IF HERO IS INSIDE A DOOR
        BNE     ME240
        LDY     #TRACKSPEED     ;ASSUME NEED + MOVEMENT
        LDA     HEROSCENTER     ;GET HERO'S LOCATION
        SEC
        SBC     ENEMYX,X        ;MAKE DISTANCE TO ENEMY
        BCS     ME231
	JSR	NEGATE
	LDY	#-TRACKSPEED	;AND WE NEED A - MOVEMENT
ME231:  CMP     #CLOSEST
        BCC     ME240           ;IF WITHIN RANGE, DONT INCREASE MOMENTUM
        TYA
        CLC
        ADC     ENEMYXMOM,X
        BVS     ME240
        STA     ENEMYXMOM,X     
        
;BIT %00010000 = ENEMY WILL TRACK HERO ON THE Y AXIS.  

ME240:  ROR     SAFEWORD+1
        BCC     ME250
        LDA     INDOOR          ;SEE IF HERO IS INSIDE A DOOR
        BNE     ME250

        LDY     #TRACKSPEED     ;ASSUME + NEEDED.
        LDA     HEROSHEAD
        SEC
        SBC     ENEMYY,X        ;FIND OUT DIRECTION TO ENEMY FROM HERO
        BCS     ME241
        JSR     NEGATE
        LDY     #-TRACKSPEED    ;AND WE NEED A - MOVEMENT
ME241:	CMP	#YTRACK
	BCC	ME250		;IF WITHIN RANGE, DONT INCREASE MOMENTUM
 	TYA			;GET CORRECTION WE DECIDE ON
	CLC
	ADC	ENEMYYMOM,X
	BVS	ME250
	STA	ENEMYYMOM,X	
		
;BIT %00100000 = ENEMY WILL GUARD THE AREA AROUND HIS LAUNCH POINT.  THAT
;MEANS HE WON'T STRAY BY MORE THAN GUARDDISTANCE PIXELS.

ME250:	ROR	SAFEWORD+1
	BCC	ME260
	
	LDA	LAUNCHY,X
	TAY
;;	LDA	LAUNCHXH,X	;GET LAUNCH POINT HIGH
;;	PHA
	LDA	LAUNCHXL,X	;GET LAUNCH POINT LOW
	TAX
;;	PLA
	JSR	VISUAL_POINT	;MAKE VISUAL POINT
	STX	SUBSVAR1
	STY	SUBSVAR2	;OUT OF GOOD SAVE PLACES.   SHARE WITH SUBS.
	LDX	SAFEBYTE     	;RESTORE ENEMY INDEX
	CPY	#$F8		;OFF SCREEN?
	BCC	ME252

	LDY	ENEMY0,X	
	LDA	SPECENEMY,Y
	AND	#%100		;DON'T REMOVE TYPE ENEMY?
	BNE	ME252		;IF SO, WE CANT GET RID OF IT.
	JMP	ME39		;IF OFF SCREEN ORIGINAL LOCATION, KILL IT

ME252:	LDA	ENEMYX,X	;GET CURRENT LOCATION
	LDY	#-GUARDSPEED	;ASSUME NEED NEGATIVE MOVEMENT
	SEC
	SBC	SUBSVAR1	;MAKE DISTANCE TO WHERE HE OUGHT TO BE
	BCS	ME253
	LDY	#GUARDSPEED	;MAKE A POSITIVE MOVEMENT TO FIX THIS
	JSR	NEGATE
ME253:	CMP	#GUARDDISTANCE
	BCC	ME255
	TYA
	CLC
	ADC	ENEMYXMOM,X
	BVS	ME255
	STA	ENEMYXMOM,X	;FIX HIS MOMENTUM
	
ME255:	LDA	ENEMYY,X	;GET CURRENT LOCATION ON Y
	LDY	#-GUARDSPEED	;ASSUME NEED NEGATIVE MOVEMENT
	SEC
	SBC	SUBSVAR2	;MAKE DISTANCE TO WHERE HE OUGHT TO BE
	BCS	ME258
	LDY	#GUARDSPEED	;MAKE A POSITIVE MOVEMENT TO FIX THIS
	JSR	NEGATE
ME258:	CMP	#GUARDDISTANCE
	BCC	ME260
	TYA
	CLC
	ADC	ENEMYYMOM,X
	BVS	ME260
	STA	ENEMYYMOM,X	;FIX HIS MOMENTUM IN Y DIRECTION TOO.

;BIT %01000000 = ENEMY WILL NEVER GET TOO CLOSE TO HERO.  HE WON'T ALLOW
;CLOSER THAN CLOSEST.

ME260:	ROR	SAFEWORD+1
	BCC	ME271

	LDA	ENEMYX,X	;GET CURRENT LOCATION
	LDY	#TRACKSPEED	;ASSUME NEED + MOVEMENT TO GET AWAY.
	SEC
	SBC	HEROSCENTER	;MAKE DISTANCE TO WHERE HERO IS
	BCS	ME263
	LDY	#-TRACKSPEED	;MAKE A NEGATIVE MOVEMENT
	JSR	NEGATE
ME263:	CMP	#CLOSEST
	BCS	ME271
	TYA
	ADC	ENEMYXMOM,X
	BVS	ME271
	STA	ENEMYXMOM,X	;FIX HIS MOMENTUM

;SEE IF THE ENEMY IS OUT OF HIS RANGE.  MOST ENEMIES ZERO THEIR X MOMENTUM
;IF FARTHER AWAY FROM LAUNCH COLUMN THAN 16 COLUMNS.  BUT NOT IF SPECIAL
;HORIZONTAL WORLD MODE OR IF SPECIAL ENEMY THAT GOES HORIZONTALLY OR
;IF ENEMY THAT WAS EXPLODED OR LAUNCHED FROM ANOTHER ENEMY.

ME271:

;	LDA	HORZWORLD
;	BNE	ME288

;	JSR	STRAIGHTER	;SEE IF SPECIAL STRAIGHT TRAVELING ENEMY
;	BNE	ME288

;	LDA	ENEMYRAM,X	
;	CMP	#-1  		;THIS FLAGS NOT NORMAL LAUNCHED ENEMY.
;	BEQ	ME288

;	LDA	ENEMYX,X	;GET ENEMIES X LOCATION ON SCREEN
;	JSR	FIND_COL	;MAKE Y:X=COLUMN WITHIN BACKGROUND
;	TXA
;	LDX	SAFEBYTE
;	SEC
;	SBC	LAUNCHXL,X	;MAKE DISTANCE FROM LAUNCH POINT
;	STA	SUBSVAR1
;	TYA
;	SBC	LAUNCHXH,X
;	BCC	ME287A
;	LDA	ENEMYXMOM,X	;IF WE ARE + FROM LAUNCH, NEGATIVE MOM OK.
;	BMI	ME288
;	LDA	SUBSVAR1
;	JMP	ME287B		;IF MOMENTUM OK, CHECK OUT DISTANCE.	

;ME287A:CMP	#-1		;IF NEGATIVE VALUE, MUST BE LESS THAN -16
;	BNE	ME287C
;	LDA	ENEMYXMOM,X	;IF ITS - TO LAUNCH POINT, + MOMENTUM OK
;	BPL	ME288
;	LDA	SUBSVAR1
;	JSR	NEGATE		;IF LESS THAN -256, SEE IF <-16.
;ME287B:	CMP	#STRAYDIST
;	BCC	ME288
;ME287C:	LDA	#0
;	STA	ENEMYXMOM,X

;CHECK THE BEHAVIOR BITS FOR PERSONALITY QUIRKS THAT OVERRIDE THE REST

ME288:	LDX	SAFEBYTE
	LDY	ENEMY0,X
	LDA	BEHAVIOR,Y	;GET BEHAVIOR BITS
	STA	SAFEWORD+1	;SAVE WHERE WE CAN USE IT
	BNE	BHV10
	JMP	ME289

;THE ENEMY JUMPS OVER BULLETS.

BHV10:	ROR	SAFEWORD+1	;ENEMY CAN JUMP OVER BULLETS?
	BCS	BHV12
	JMP	BHV100

BHV12:	LDA	ENEMYJUMP,X	;SEE IF ENEMY ALREADY JUMPING
	BNE	BHV20

;ENEMY IS NOT ALREADY JUMPING.  SEE IF A BULLET COULD HIT HIM.

	LDA	HAVEBULLET
	BNE	BHVJGT0		;Continue if bullet.
	JMP	BHV100		;NO BULLET IF 0

;------------------------------------------------- JGT 05/11/90 ----
; patch to cause enemies with the "jump" bit set to jump if the
; hero is hammering, regardless of whether or not the "shot"
; would actually hit...

BHVJGT0:
	LDA	CURWORLD
	CMP	#8
	BNE	BHVJGT	;NOPE.
	LDA	ENEMY0,X
	CMP	#18		;BLOB?
	BEQ	BHVJUMP		;force the jump
	

BHVJGT:

;-------------------------------------------------------------------

	LDA	ENEMYX,X
	SEC
	SBC	BULLETX		;MAKE DIRECTION BULLET WOULD HAVE TO BE GOING
	STA	SAFEX		;SAVE FOR DISTANCE CHECK
	EOR	BULTDIR		;AND SEE IF IT MATCHES
	BMI	BHV100		;IF NOT, IT COULDN'T POSSIBLY HIT US

	LDA	SAFEX
	BPL	BHV15
	JSR	NEGATE

BHV15:	CMP	#64		;DON'T JUMP TILL BULLET IS 64 AWAY OR LESS
	BCS	BHV100

	LDA	ENEMYY,X
	SBC	#8
	CMP	BULLETY		;SEE IF BULLET IS ABOVE US
	BCS	BHV100		;IF IT IS ABOVE US, IT CAN'T HIT
	LDA	ENEMYY,X
	ADC	ENEMYHIGH,X	;MAKE BOTTOM OF ENEMY
	CMP	BULLETY		;IS THE BULLET BELOW?
	BCC	BHV100		;SKIP IF IT IS

BHVJUMP:		;JGT 05/11/90

	LDA	ENEMYHIGH,X
	ADC	#16		;LET ENEMY JUMP QUITE HIGH
	JSR	NEGATE
	STA	ENEMYJUMP,X	;IF WE NEED TO JUMP, SET IT UP NOW

;ENEMY IS ALREADY IN JUMP MODE.  WE START WITH A NEGATIVE VALUE LOADED
;AND JUMP UP IN HALVES TILL ITS EXHAUSTED.  THEN WE LOAD A PLUS VALUE 
;AND FALL BACK TILL THAT'S EXHAUSTED.  THEN WE ZERO THE Y MOMENTUM.

BHV20:	LDA	ENEMYJUMP,X	
	BPL	BHV40
	CMP	#-1
	BNE	BHV30
	LDA	ENEMYHIGH,X
	ADC	#16		;LET ENEMY JUMP QUITE HIGH
	JMP	BHV40		;WHEN DONE WITH -, LOAD A + 

BHV30:	SEC
	ROR	A		;DIVIDE NEGATIVE VALUE IN HALF
	STA	ENEMYJUMP,X
	BCC	BHV60
	INC	ENEMYJUMP,X
	JMP	BHV60

BHV40:	SEC
	SBC	#JUMPFALL	;IF GOING DOWN NOW, GO AT FIXED RATE
	BCS	BHV50
	LDY	ENEMYJUMP,X	;IF NOT ENOUGH LEFT, USE REST
	LDA	#0
	STA	ENEMYJUMP,X
	JMP	BHV65		;AND USE REST UP

BHV50:	STA	ENEMYJUMP,X
	LDA	#JUMPFALL

BHV60:	TAY
BHV65:	LDX	#0
	JSR	MOVESET
	LDX	SAFEBYTE
	LDA	#0
	STA	ENEMYYMOM,X	;ZERO Y MOMENTUM WHEN DONE

;THE ENEMY RUNS AWAY AS SOON AS HE IS SHOT

BHV100:	ROR	SAFEWORD+1	;ENEMY RUNS AS SOON AS SHOT?
	BCC	ME289
	LDA	ENEMYSTATE,X
	AND	#1
	BEQ	BHV200		;IF SO, HAS HE BEEN SHOT?

	LDY	#FASTSPEED	;GET SPEED WE WANT
	LDA	ENEMYX,X	;WE NEED TO RUN
	SEC
	SBC	HEROX		;MAKE DIRECTION TO GET AWAY FROM HERO
	BPL	BHV110
	LDY	#-FASTSPEED	;IF NEGATIVE, USE THIS ONE
BHV110:	TYA
	STA	ENEMYXMOM,X	;SET THIS AS HIS MOMENTUM

BHV200:
ME289:		;---JGT

;------------------------------------------------- JGT 05/12/90 ---------
; Entry point for "stunned" bugs in swamp level.
; ...check enemy types 2, 3, and 36 and see if they should
;    revive and revert back to their original (flying) counterparts.
;

	LDA	ENEMY0,X	;get enemy type
	CMP	#2
	BEQ	UNSTUN
	CMP	#3
	BEQ	UNSTUN
	CMP	#36
        BNE     DOGBUG

UNSTUN:         DEC     BOUNCECT,X     ;timer to stay stunned
                BNE     KEEPSTUN
         
		LDA	ENEMY0,X
		CMP	#2
		BEQ	UNST1
		CMP	#3
		BEQ	UNST2
;type 36 
                JSR     ENEMYGONE
                LDA     #12             ;36 becomes 12
                JMP     UNST3
         
UNST1:          JSR     ENEMYGONE
                LDA     #13             ;2 becomes 13
                JMP     UNST3
         
UNST2:          JSR     ENEMYGONE
                LDA     #10             ;3 becomes 10
         
UNST3:		LDX	SAFEBYTE
		STA	ENEMY0,X	;put new enemy no.
		LDA	#0
		STA	ENEMYFREEZE,X	;no freeze
		LDA	ENEMYFLGS,X
		ORA	#8		;set "need to create" bit
		STA	ENEMYFLGS,X
                LDA     #-1             ;set special flag...
                STA     BOUNCECT,X     
                RTS                     

KEEPSTUN:       JMP	NOBOUNCE

;------------------------------------------------- JGT 05/23/90 ---------
; Check for "GBUGROLL" (81) and see if we should change back to GBUG (34)

DOGBUG:         CMP     #81
                BNE     DOBOUNCE        ;not a GBUGROLL

                LDA     BOUNCECT,X
                BNE     DOGBX           ;if still bouncing, don't change

                DEC     ENEMYCTR,X              
                BNE     DOGBX           ;don't change
;got one!
                JSR     ENEMYGONE
                LDX     SAFEBYTE
                LDA     #34
                STA     ENEMY0,X        ;put new enemy no.
                LDA     #0
                STA     ENEMYFREEZE,X   ;no freeze
                LDA     ENEMYFLGS,X
                ORA     #8              ;set "need to create" bit
                STA     ENEMYFLGS,X
                LDA     #-1             ;set special flag...
                STA     BOUNCECT,X
                RTS

DOGBX:

;------------------------------------------------- JGT 05/16/90 ---------
; Check for bouncing enemies...

DOBOUNCE:	LDA	BOUNCECT,X
		BEQ	DB1
		BPL	DBOUNCE
DB1:		JMP	NOBOUNCE

DBOUNCE:    	DEC	BOUNCECT,X

;do Y dir. 1st

		LDY	BOUNCEY,X	;y vel.
		TXA			;slot number
		LDX	#0
		JSR	MOVESPRT
		CMP	#0
		BNE	DBY1
	     	LDA	LOSTY
	     	BNE	DBY3
                LDX     SAFEBYTE
                LDA     RESULTY
                CMP     BOUNCE3D,X
                BCS     DBY1            ;bad.
		JMP	DBX0		;Y move was OK...

;Y move was bad, try halving it.

DBY1:		LDX	SAFEBYTE
		LDA	BOUNCEY,X
		AND	#$80
		STA	SUBSVAR1	;save sign bit
		LDA	BOUNCEY,X
		LSR	A
		ORA	SUBSVAR1
		TAY
		TXA
		LDX	#0
		JSR	MOVESPRT
		CMP	#0
                BNE     DBY3
	     	LDA	LOSTY
	     	BNE	DBY3
                LDX     SAFEBYTE
                LDA     RESULTY
                CMP     BOUNCE3D,X
                BCS     DBY3            ;bad.
		JMP	DBYREV		;1/2 Y move was OK...

;1/2 move not good...assume we're close to a wall
;reverse the Y direction

DBY3:           LDA     SAFEBYTE
                LDX     #0
                LDY     #0
                JSR     MOVESPRT

DBYREV:		LDX	SAFEBYTE
		LDA	BOUNCEY,X
		JSR	NEGATE
		STA	BOUNCEY,X

;Done with any Y movement...do the X

DBX0:	  	LDY	SAFEBYTE
		LDX	BOUNCEX,Y	;x vel.
		TYA			;slot number
		LDY	#0
		JSR	MOVESPRT
		CMP	#0
		BNE	DBX1
	  	LDA	LOSTX
	  	BNE	DBX3
		JMP	DBMOVE		;X move was OK...

;X move was bad, try halving it.

DBX1:		LDY	SAFEBYTE
		LDA	BOUNCEX,Y
		AND	#$80
		STA	SUBSVAR1	;save sign bit
		LDA	BOUNCEX,Y
		LSR	A
		ORA	SUBSVAR1
		TAX
		TYA
		LDY	#0
		JSR	MOVESPRT
		CMP	#0
                BNE     DBX3
	  	LDA	LOSTX
	  	BNE	DBX3
		JMP	DBXREV		;1/2 X move was OK...

;1/2 move still not good...assume we're close to a wall
;reverse the X direction

DBX3:           LDA     SAFEBYTE
                LDX     #0
                LDY     #0
                JSR     MOVESPRT        

DBXREV:		LDX	SAFEBYTE
		LDA	BOUNCEX,X
		JSR	NEGATE
		STA	BOUNCEX,X

;move the sprite!

DBMOVE:	     	LDX	SAFEBYTE
	     	LDA	RESULTX
	     	STA	ENEMYX,X
                LDA     RESULTY
                CMP     BOUNCE3D,X
                BCC     DBMOK
                LDA     BOUNCE3D,X      ;clip.
DBMOK:          CMP     #190
                BCC     DBMO2
                LDA     #190
DBMO2:          STA     ENEMYY,X

                TAY
                LDA     ENEMYX,X
                TAX
                LDA     SAFEBYTE
                JMP     PUTSPRT
                
NOBOUNCE:

;---------------------------------------------- JGT -------------------

	
;NOW KEEP THE MOMENTUM VALUE IN A LIMITED RANGE.  WE LIMIT SLOW ENEMIES
;TO ONE SPEED AND FAST ONES TO ANOTHER.  BUT IF EXPLODED ENEMY WE DON'T
;IMPOSE THE LIMITS TILL THE COUNTER RUNS OUT.

;;;ME289:	
	LDX	SAFEBYTE		;GET BACK ENEMY INDEX.
 	LDA	ENEMYFLGS,X	;SEE IF EXPLODED ENEMY
	AND	#$20
	BNE	ME290

	LDY	ENEMY0,X	;GET ENEMY NUMBER
	LDA	ENEMYOPTS,Y	;GET ENEMIES ACTIVATION OPTIONS
	AND	#$20		;SEE IF NO SPEED LIMIT
	BNE	ME290

 	LDA	#SLOWSPEED	;ASSUME SLOW ENEMY. 
	STA	SAFEWORD+1
	LDA	ENEMYFLGS,X	;SEE IF FAST ENEMY
	BPL	ME272
	LDA	#FASTSPEED
	STA	SAFEWORD+1	;IF FAST, DOUBLE ALLOWED SPEED.

ME272:	LDA	ENEMYXMOM,X
	BPL	ME275
	LDA	SAFEWORD+1
	JSR	NEGATE
      	CMP	ENEMYXMOM,X	;SEE IF TOO NEGATIVE
	BCC	ME280
	STA	ENEMYXMOM,X
	JMP	ME280

ME275:	CMP	SAFEWORD+1
	BCC	ME280
	LDA	SAFEWORD+1
	STA	ENEMYXMOM,X

ME280: 	LDA	ENEMYYMOM,X
	BPL	ME285
	LDA	SAFEWORD+1
	JSR	NEGATE
      	CMP	ENEMYYMOM,X	;SEE IF TOO NEGATIVE
	BCC	ME290
	STA	ENEMYYMOM,X
	JMP	ME290

ME285:	LDY	ENEMY0,X	;5/25/90
	LDA	ENEMYOPTS,Y	;SEE IF ENEMY HONORS GRAVITY.
	BPL	ME286
	LDY	#FALLSPEED	;IF FALLING AND GRAVITY, USE FALL SPEED
	STY	SAFEWORD+1
ME286:	LDA	ENEMYYMOM,X	;OTHERWISE WE USE NORMAL SPEED LIMIT FOR DOWN
	CMP	SAFEWORD+1
	BCC	ME290
	LDA	SAFEWORD+1
	STA	ENEMYYMOM,X

;ALL DONE WITH ENEMY MOMENTUM ADJUSTMENT.  MOVE THE ENEMY NOW.

ME290:	LDA	TIMETICK	;SEE IF ITS EVERY 4TH CALL
	AND	#%00001000
	BNE	ME290A
 	INC	ENEMYINDX,X	;MOVE ENEMY'S INDEX FOR NEXT PASS
	LDA	ENEMYINDX,X
	AND	#$0F
	STA	ENEMYINDX,X
	BNE	ME290A

	LDA	ENEMYFLGS,X
	AND	#$DF
	STA	ENEMYFLGS,X	;IF INDEX GOES TO ZERO, EXPLODED ONES RESET

ME290A:	LDA	ENEMYYMOM,X
	BPL	ME291
	LDY	#0
	CMP	#-7		;IT MUST BE ABOVE -7 OR ITS NOT GOOD ENOUGH
	BCS	ME293		;USE 0 INSTEAD OF -1.

		CLC
		ADC	#7	;Adjust for negative values.	-KHB
	LSR	A
	LSR	A
	LSR	A		
	ORA	#%11100000	;DIVIDE BY 8, PRESERVE SIGN
	JMP	ME292

ME291:	LSR	A
	LSR	A
	LSR	A	;MAKE /8 VALUE
ME292:	TAY

ME293:	LDA	ENEMYXMOM,X
	BPL	ME294
	LDX	#0
	CMP	#-7		;IT MUST BE ABOVE -7 OR ITS NOT GOOD ENOUGH
	BCS	ME295

		CLC
		ADC	#7	;Adjust for negative values.	-KHB
	LSR	A
	LSR	A
	LSR	A		
	ORA	#%11100000	;DIVIDE BY 8, PRESERVE SIGN
	JMP	ME292A

ME294:	LSR	A
	LSR	A
	LSR	A	;MAKE /8 VALUE
ME292A:	TAX

ME295: 	STX	SAFEX
	STY	SAFEY

	JSR	MOVESET
	BEQ	MEY20

;ENEMY WOULD NOT MOVE.  TRY TO MOVE EITHER OF THE COMPONENTS INDIVIDUALLY.
;FIRST, IF THE ENEMY WAS A SPECIAL STRAIGHT TRAVELER WE REVERSE DIRECTIONS.

	JSR	STRAIGHTER	;STRAIGHT TRAVELER?
	BEQ	MEY4
	LDA	ENEMYXMOM,X
	JSR	NEGATE
	STA	ENEMYXMOM,X
	LDA	ENEMYYMOM,X
	JSR	NEGATE		;REVERSE BOTH MOMENTUMS
	STA	ENEMYYMOM,X
	JMP	MEY20		

;TRY TO MOVE X.  IF X IS 0, SKIP TO TRY MOVING Y.

MEY4:	LDX	SAFEX
	BEQ	MEY10
	LDY	#0
	JSR	MOVESET		;TRY TO MOVE JUST THE X
	BEQ	MEY10

;COULDN'T MOVE X OR X IS 0.  MOVE Y.

MEY5:	LDX	#0
	LDY	SAFEY
	BEQ	MEY7		;IF X WON'T MOVE AND Y IS 0, HALVE X.
	JSR	MOVESET		;TRY TO MOVE JUST THE Y COMPONENT
	BNE	MEY10		;IF FAILURE, HALF Y COMPONENT TO HELP GRAVITY

;Y IS OK, X WOULD NOT MOVE ALONE.  CUT IT INTO HALF.

MEY7:	LDX	SAFEBYTE		;NEED TO DIVIDE X BY 2.
	LDA	ENEMYXMOM,X
	AND	#$80		;GET SIGN BIT
	LSR	ENEMYXMOM,X
	ORA	ENEMYXMOM,X
	STA	ENEMYXMOM,X	;DIVIDE BY 2, PRESERVING SIGN.
	JMP	MEY20		;AND JUST LEAVE NOW.

;WE EITHER MOVED ON X OK OR X WAS 0.  HALVE THE Y COMPONENT BECAUSE IT
;OBVIOUSLY IS THE PROBLEM.

MEY10:	LDX	SAFEBYTE		;NEED TO HALVE Y.  Y IS CRITICAL.
	LDA	ENEMYYMOM,X
	AND	#$80		;GET SIGN BIT
	LSR	ENEMYYMOM,X
	ORA	ENEMYYMOM,X
	STA	ENEMYYMOM,X	;DIVIDE BY 2, PRESERVING SIGN.
	CMP	#-7		;SEE IF NOTHING LEFT TO TRY
	BCS	MEY20		;BECAUSE THIS IS ABOVE -1.
	LDA	SAFEY		;AND GET Y MOVEMENT
	AND	#$80
	LSR	SAFEY
	ORA	SAFEY
	STA	SAFEY
	JMP	MEY20

;ENEMY MOVED. MAKE SURE ITS NOT OFF LEGAL SCREEN LIMITS.

MEY20:	JSR	STRAIGHTER	;IF STRAIGHT ENEMY, CAN'T HAVE LOSTX OR LOSTY
	BEQ	MEY22
        JMP     MEY22           ;DAN 5/17
	LDA	LOSTX
	ORA	LOSTY		;GET RESULT OF MOVESPRT CALL. TRUE=OFFSCREEN
	BEQ	MEY22
MEY21:	JMP	ME39		;IF SO, KILL WHEN AGAINST SCREEN.

MEY22: 	LDX	SAFEBYTE
	LDA	ENEMYX,X
	STA	SAFEX		;SAVE THE X IN CASE OF Y WRAP
	CMP	#0
	BNE	ME296		;SKIP IF NOT AGAINST SCREEN LEFT

	LDA	ENEMYXMOM,X	;SEE IF FACING RIGHT NOW
	BPL	ME296

        JSR     STRAIGHTER      ;DAN 5/17.  IF AGAINST LEFT GOING LEFT, 
	BEQ	MEY24
        LDA	STARTCOL	;WE REVERSE IF <124.  STOP IF >=124
	CMP	#124
	BCS     ME296           
	LDA	ENEMYXMOM,X
	JSR	NEGATE
	STA	ENEMYXMOM,X
	JMP	ME296

MEY24:	LDA	#1
	STA	ENEMYXMOM,X	;SET ENEMY TO FACE RIGHT IF AGAINST LEFT.

ME296:	LDA	ENEMYY,X
	STA	SAFEY		;THIS HAS TOP OF ENEMY
	LDA	ENEMYHIGH,X	;GET HEIGHT
	CLC
	ADC	SAFEY
	STA	SAFEY2		;THIS HAS BOTTOM	
	CMP	SAFEY		;SEE IF TOP WRAPPED TO SCREEN BOTTOM
	BCS	ME296A

ME297:	LDY	WORLD_INDX	;WE NEED TO MOVE THE HERO TO THE TOP LIMIT.
	LDA	SCREENLIMITS,Y	
	JMP	ME297A

ME296A:	LDY	WORLD_INDX	;AND GET WORLD INDEX FOR SCREEN LIMIT CHECK
	LDA	SCREENLIMITS,Y	;GET TOPMOST LIMIT
	SEC
	SBC	SAFEY		;MAKE SURE WE ARE NOT ABOVE IT
	BEQ	ME298
      	BCS	ME297

	LDA	SCREENLIMITS+1,Y	;GET BOTTOM
	SEC
	SBC	SAFEY2
	BCS	ME298		;MAKE SURE WE ARE NOT BELOW IT
	ADC	ENEMYY,X	;IF WE ARE, MAKE A NEW LOCATION AT BOTTOM

ME297A:	STA	ENEMYY,X	;SET NEW Y POSITION
	TAY	
	LDX	SAFEX
	LDA	SAFEBYTE
	JSR	PUTSPRT		;AND MOVE THE SPRITE ABSOLUTELY TO THE TOP	

	JSR	STRAIGHTER	;IF WE HAD TO DO THAT, STRAIGHT ONES NOT ALLOWED
	BNE	MEY21

;SET THE DIRECTION THE ENEMY FACES TO BE THE DIRECTION IT IS MOVING.
;IF X MOMENTUM IS ZERO, SET TO FACE ENEMY WITH +1 OR -1 SO GUN LOGIC
;WILL BE ABLE TO FIRE AT HIM.

ME298:  LDY     #0              ;ASSUME GOING RIGHT
	LDA	ENEMYXMOM,X	;GET MOMENTUM FOR HORIZONTAL TRAVEL
	BNE	ME310
	LDA	HEROX
	CMP	ENEMYX,X	;IF NO MOMENTUM, WHERE IS HERO?
	BCS	ME299
	LDY	#1		;IF TO LEFT, SET LEFT BIT
ME310:	BPL	ME299
	LDY	#1		;IF GOING LEFT, USE 1 FLAG
ME299: 	STY	SAFEWORD+1	;PUT BIT HERE
	LDA	ENEMYFLGS,X	;GET CURRENT DIRECTION BIT
	AND	#$FE		;REMOVE DIRECTION BIT
	ORA	SAFEWORD+1	;PUT NEW DIRECTION BIT IN
	STA	ENEMYFLGS,X	

	LDY	ENEMY0,X
	LDA	ENEMYOPTS,Y	;GET CAN'T MIRROR BIT
	AND	#4
	BEQ	ME299A
	LDA	#0
	STA	SAFEWORD+1	;RESET THE MIRROR BIT IF NOT SUPPORTED.

ME299A:	LDA	ENEMYOPTS,Y	;NOW SEE IF ENEMY FACES LEFT INSTEAD OF RIGHT
	AND	#8
	LSR	A
	LSR	A
	LSR	A
	EOR	SAFEWORD+1

ME299B: TAX
	LDA	SAFEBYTE
	JSR	MIRROR		;AND MIRROR HIM THE OPPOSITE OF WHAT HE WAS

ME300:	RTS

;THIS ROUTINE WILL USE THE ENEMY INDEX IN SAFEBYTE TO DETERMINE IF THAT
;ENEMY IS A SPECIAL STRAIGHT TRAVELING ENEMY.  THE BITS ARE RETURNED IN A AND
;NZ IF IT IS.	X HAS THE INDEX AND Y HAS THE ENEMY INDEX.

STRAIGHTER:
	LDX	SAFEBYTE
	LDY	ENEMY0,X
	LDA	SPECENEMY,Y
	AND	#$C0
	RTS

;THIS ROUTINE WILL DO A MOVESPRT FOR SLOT SAFEWORD (ENEMY INDEX SAFEBYTE)
;AND IF SUCCESSFULL WILL SET THE NEW X AND Y INTO ENEMYX AND ENEMYY.
;X ALWAYS RETURNS THE ENEMY INDEX.  A HAS THE RESULT CODE, BUT Z IS ALSO SET.

MOVESET:
	LDA	SAFEBYTE
	JSR	MOVESPRT	;TRY TO MOVE JUST THE X
	LDX	SAFEBYTE
	CMP	#0
	BNE	MST5
	LDA	RESULTX
	STA	ENEMYX,X	;SET RESULTING POSITION TO SAVE TIME ON GET
	LDA	RESULTY
	STA	ENEMYY,X
	LDA	#0
MST5:	RTS

;******************* HERO MOVEMENT FUNCTIONS ***********************

;THIS ROUTINE WILL MOVE THE HERO ACCORDING TO THE MOMENTUM VARIABLES
;XMOMENTUM AND YMOMENTUM.  IT TAKES CARE OF LIMITING THEM AND APPLYING
;GRAVITY TOO.

;SINCE THE HERO CAN CAUSE SCREEN SCROLL, THIS IS ALSO HANDLED HERE.  ANY
;SPRITES AFFECTED BY THE MOVEMENT OF THE BACKGROUND ARE CORRECTED SO
;THAT VISUALLY THEY STAY AGAINST THE BACKGROUND WHERE THEY WERE. 

;NOTICE THAT BEFORE THE HERO IS ACTUALLY MOVED BY THIS ROUTINE ALL
;CHANGES TO HIS MOTION ARE MADE.  THIS WAS DONE BECAUSE THE JOYSTICK
;CHANGES TO HIS MOMENTUM ARE "ASYNCRONOUS" TO THIS ROUTINE.  BUT
;THEY HAPPEN AT THE SAME FREQUENCY.  WE WANT THE HERO'S UPWARDS MOVEMENTS
;TO BE CANCELED OUT BY HIS GRAVITY FOR NON-FLYING HEROS.  THUS UNLESS
;WE APPLY THE GRAVITY, FRICTION, AND LIMITING BEFORE WE APPLY MOVEMENT
;WE WILL GET OSCILLATION WHEN THE HERO IS AT THE VERY TOP OF THE NO GRAVITY
;REGION.  THIS MUST BE PRESERVED IF CHANGES ARE MADE TO THIS ROUTINE. IN
;GENERAL, MAKE ALL CHANGES FIRST, THEN MOVE THE HERO, THEN SCROLL THE
;BACKGROUND FIX THE SPRITES.  

;UPDATE THE MOMENTUM VALUES BY EXERTING FRICTION AND GRAVITY ON THE
;OLD VALUES. FIRST GRAVITY.  BUT NOT IF HIS FEET ARE IN THE NO GRAVITY RANGE.

MOVEHERO:


;--------------------------------------------------------JGT 05/09/90--------
; IF "HITFLAG" IS NON-ZERO, PLAYER SHOULD USE THE HIT SPRITE.
;     & BE UNDER CONTROL OF "BUMPX", "BUMPY" VARS.

		LDA	HITFLAG	
                BEQ     JIM0A                   ;was "JIM0", 05/27/90

		;NON-ZERO IF SHOWING "HIT" SPRITE

		DEC	HITFLAG
		BNE	JIM1		;restore at 0

JIM0A:          LDA     #HEROSLOT               ;label added 05/27/90
		LDX	CUR_HERO
		LDY	CUR_HERO+1
		JSR	SWAPSPRT
		JMP	JIM1N

JIM1:		LDA	CURWORLD
		CMP	#5		;SWAMP?
		BEQ	JIM1A
		CMP	#7		;WATER?
		BEQ	JIM1B

		LDX	#HERO_HIT &$FF		;NORMAL HERO
		LDY	#HERO_HIT >> 8
		JMP	JIM1M

JIM1A:		LDX	#HERO_HHIT &$FF	;HELICOPTER
		LDY	#HERO_HHIT >> 8
		JMP	JIM1M

JIM1B:		LDX	#HERO_WHIT &$FF	;WATER HERO
		LDY	#HERO_WHIT >> 8

JIM1M:		LDA	#HEROSLOT
		JSR	SWAPSPRT

JIM1N:	  	LDA	#HEROSLOT
		LDX	HEROX
		LDY	HEROY
		JSR	PUTSPRT

JIM0:		LDA	INVULN
		BEQ	JIMRMIN
		DEC	INVULN
JIMRMIN:
;----------------------------------------------------------------------------


	LDA	HERODELAY
	BEQ	MH0
    	DEC	HERODELAY
	RTS

;IS THE HERO STUCK TO AN ENEMY?  HE GETS STUCK WHEN WE CHECK FOR COLLISIONS
;IN THE REAL_WORLD LOOP.

MH0:
;;-------------------- DO NEXT LEVEL?   RTB 4/25/90
;;	LDA 	WORLD_INDX
;;	LSR	A		;DIVIDE BY 2
;;	TAX
;;
;;	LDY	DNLTABL,X	;GET LENGTH
;;DNLRTBD:
;;	LDA	WORLDRAM,Y
;;	CMP	#$20
;;	BEQ	MH0RTBZ
;;	CMP	#$38
;;	BEQ	MH0RTBZ
;;	CMP	#$39
;;	BEQ	MH0RTBZ
;;	DEY
;;	CPY	#$FF
;;	BNE	DNLRTBD	
;;DNLRTBA:
;;	JSR	REMHAM		;REMOVE HAMMER MAN?
;;	LDA	WORLD_INDX
;;	BEQ	MH0RTBZ
;;	LDA	#120
;;	STA	WORLD_DONE
;;	LDA	DNLNXTL,X
;;	STA	FOLLOW_WORLD	;IF DISAPEAR AND WAIT, SET NEXT WORLD
;;	JSR	ALLSILENCE
;;	LDX	#DIS0CWAIT & $FF
;;	LDY	#DIS0CWAIT >> 8
;;	JMP	SET_NMI		;SET TO WAIT 2 SECONDS
;;
;;DNLNXTL:
;;	.byte 	0,2,3,4,5,6,7,8,9,1
;;DNLTABL:
;;	.byte 	0,124,95,124,124,95,124,63,63,127 ;TABLE LENGTH		
;;
;;MH0RTBZ:
;-------------------------------------------------
	LDA	STUCK    
	BEQ	MH1
	
;--------- IF WE ARE STUCK, MAKE SURE WE ARE NOT HAMMERING RTB 5/6/90
;;      JSR     HBULRTA         ;REMOVE HAMMER MAN?
	LDA	#0		;A124
	STA	GLOBAL_SCROLL
	STA	XMOMENTUM
;--------------------------------------------------------------------

	LDX	STICKENEMY	;GET THE ONE WE ARE STUCK TO
	LDA	ENEMY0,X	;MAKE SURE HE STILL EXISTS
	CMP	#-1
	BEQ	MH0A

	LDA	ENEMYY,X	;GET HIS Y
	SEC
	SBC	HEROSFEET	;MAKE DIFFERENCE TO MAKE OUR Y MATCH HIS
	CLC
	ADC	#RIDEDEEP	;BUT MAKE HIM RIDE ON THE SHOULDERS
	TAY
	BPL	MH0B
     	LDA	HEROY		;IF Y NEEDED UP BUT ALREADY AT 0, UNSTICK HIM
	BEQ	MH0A
MH0B:	LDA	ENEMYX,X	;GET HIS X
	SEC
	SBC	HEROX		;MAKE OUR X MATCH HIS
	TAX
	JSR	MOVE_HERO	;TRY TO MOVE HIM IF WE CAN
	BNE	MH0A
	JMP	MH100		;AND CONTINUE WITH FINISH UP STUFF

MH0A: 	JSR	STICKJUMP	;JUMP OFF WHEN DONE
	
;HERO IS NOT STUCK TO AN ENEMY.

MH1: 	LDA	GRAVROW		;IN THE GRAVITY REGION?
	BEQ	MH330
	LDA	JUMPSTART	;IF NOT IN GRAVITY REGION, WERE WE FALLING
	BNE	MH330		;AFTER A JUMP?  IF SO, NEED GRAVITY.
	JSR	REARM		;REARM JUMPING, WE HAVE GONE INTO NO GRAVITY
	JMP	MH301

;IN GRAVITY REGION.

MH330:	LDA	JUMPING		;JUMPING?
	BNE	MH301		;IF SO, NO NEED FOR GRAVITY.
      	LDA	#0
	STA	JUMPLEFT	;IF FALLING AND NOT JUMPING, DISARM B.

MH331:	LDA	GRAV
	ORA	NOXFRICTION	;ADD THIS MOMENTUM CHANGE TO FRICTION DISABLE
	STA	NOXFRICTION
	LDA	GRAV
	CLC
	ADC	XMOMENTUM
	BVS	MH332		;IF SIGNED OVERFLOW, DON'T DO IT!
	STA	XMOMENTUM
MH332:	LDA	GRAV+1
	ORA	NOYFRICTION	;ADD THIS MOMENTUM CHANGE TO FRICTION DISABLE
	STA	NOYFRICTION
	LDA	GRAV+1
	CLC
	ADC	YMOMENTUM
	BVS	MH301
	STA	YMOMENTUM

;NOW EXERT FRICTION IF WE HAVE NOT ADDED OR SUBTRACTED ANY MOMENTUM
;FROM EACH AXIS.  ALSO, WE DON'T HAVE FRICTION IN THE GRAVITY REGION IF 
;GDIS IS TRUE AND WE ARE NOT STANDING ON SOLID.

MH301:	LDA	GDIS
	BEQ	MH301A		;IF NO GRAVITY DISABLE OF FRICTION,  SKIP.
	LDA	HITSOLID
	BNE	MH301A		;BUT IF WE FELL INTO SOLID, WE DO HAVE X
	LDA	GRAVROW		;IF DISABLE POSSIBLE, IN GRAVITY REGION?
	BNE	MH301A		;Continue if not.
	JMP	MH320		;WE DON'T DO FRICTION IF SO.

MH301A:	LDA	NOXFRICTION	;NO FRICTION ON X?
	BNE	MH310

	LDA	CURWORLD	;Check for sewer.
	CMP	#3
	BEQ	MH301B		;Go if warehouse 1.
	CMP	#6
	BNE	MH301C		;Continue if not warehouse 1 or 2.

MH301B:	LDA	HEROSFEET	;Get hero's feet scan line location.
	CMP	#182
	BCS	MH310		;Skip X friction code if at bottom of screen.

MH301C:	LDA	XMOMENTUM
	BEQ	MH310
	BMI	MH305
	SEC
	SBC	XFRICTION
	BCS	MH302
	LDA	#0
MH302:	STA	XMOMENTUM	;IF PLUS NOW, MAKE MORE NEGATIVE DOWN TO 0.
	JMP	MH310
MH305:	CLC
 	ADC	XFRICTION
	BCC	MH307
	LDA	#0
MH307:	STA	XMOMENTUM	;IF NEGATIVE, MAKE MORE POSITIVE

MH310: 	LDA	NOYFRICTION	;NO FRICTION ON Y?
	BNE	MH320

	LDA	YMOMENTUM
	BEQ	MH320
	BMI	MH315
	SEC
	SBC	YFRICTION
	BCS	MH312
	LDA	#0
MH312:	STA	YMOMENTUM	;IF PLUS NOW, MAKE MORE NEGATIVE DOWN TO 0.
	JMP	MH320
MH315: 	CLC
	ADC	YFRICTION
	BCC	MH317
	LDA	#0
MH317:	STA	YMOMENTUM	;IF NEGATIVE, MAKE MORE POSITIVE

;RESET THE NO FRICTION VARIABLES.

MH320:	LDA	#0
	STA	NOXFRICTION
	STA	NOYFRICTION

;NOW KEEP ALL MOMENTUM VALUES IN RANGE.  WE HAVE A TABLE OF WHAT
;THE LIMIT IS FOR EACH WORLD.  THERE IS A TABLE FOR WHEN IN THE GRAVITY
;REGION, AND A TABLE FOR WHEN NOT.

MH340:
	LDA	CURWORLD	;Check for conveyor belt.	-KHB
	CMP	#3
	BEQ	MH340Z		;Go if warehouse 1.
	CMP	#6
	BNE	MH340C		;Continue if not warehouse 1 or 2.

MH340Z:	LDA	HEROCOL
	CMP	#165
	BCC	MH340CNT	;Continue if column < 165.
	CMP	#185
	BCS	MH340CNT	;Continue if column > 184.
	LDA	HEROSFEET	;Get hero's feet scan line location.
	CMP	#126
	BCC	MH340CNT	;Continue if above scan line 126.
	CMP	#130
	BCS	MH340CNT	;Continue if below scan line 129.
	LDA	J1FLAGS
	ORA	J2FLAGS		;Get current key state.
	AND	#3
	TAX
	LDA	CONVEY_MOM,X	;Set momentum depending on key state.
	STA	XMOMENTUM

MH340CNT:
	LDA	#HEROSLOT
	JSR	ANIMINDX
	LDA	HERONUM		;Check for hammering hero.
	CMP	#6
	BEQ	MH340B		;Skip if so.
	CMP	#7
	BEQ	MH340B		;Skip if so.
	LDA	ANIM_RAM+FB,X
	ORA	#$20		;Set X align bit.
	STA	ANIM_RAM+FB,X

MH340B:	LDA	HEROSFEET	;Get hero's feet scan line location.
	CMP	#182
	BCC	MH340C		;Continue if not in sewer.
	LDA	ANIM_RAM+FB,X
	AND	#$CF		;Mask off align bits.
	STA	ANIM_RAM+FB,X
	LDA	#124
	JMP	MH340D

MH340C:	LDA	MOML
MH340D:	STA	SAFEX		;ASSUME ITS THE NO GRAVITY REGION
	LDA	MOML+1
	STA	SAFEY
	LDA	JUMPING
	ORA	JUMPSTART	;SEE IF FALLING FROM JUMP OR JUMPING UP
	BNE	MH340A
	LDA	GRAVROW		;IN THE GRAVITY REGION?
	BNE	MH341
MH340A:
	LDA	GMOML
	STA	SAFEX		;ITS THE GRAVITY REGION. USE DIFFERENT LIMITS.
	LDA	GMOML+1
	STA	SAFEY

MH341:	LDA	SAFEX
	JSR	NEGATE
	STA	SAFEX2
	LDA	SAFEY
	JSR	NEGATE
	STA	SAFEY2		;NEGATE BOTH

	LDA	XMOMENTUM
	BMI	MH10
	CMP	SAFEX
	BCC	MH27		
	LDA	SAFEX
	JMP	MH25		

MH10: 	CMP	SAFEX2		
	BCS	MH27
	LDA	SAFEX2
MH25:	STA	XMOMENTUM	;KEEP X IN RANGE

MH27:  	LDA	YMOMENTUM
	BMI	MH30
	CMP	SAFEY
	BCC	MH50
	LDA	SAFEY
	JMP	MH45		

MH30: 	CMP	SAFEY2		
	BCS	MH50
	LDA	SAFEY2
MH45:	STA	YMOMENTUM	;KEEP Y IN RANGE

;NOW SEE IF THE HERO IS IN JUMP MODE.  THIS CHANGES THE Y TRAVEL.  FRICTION
;HAS NO EFFECT ON THIS, THE JUMP IS FORCED AT THE PIXEL MOVEMENT LEVEL.

MH50:	LDA	JUMPING		;FLAG SET TO JUMP?
	BEQ	MH55
	LDA	#0
	STA	YMOMENTUM
	LDA	JUMPLEFT
	BEQ	MH55A		;IF NO JUMP CAPABILITY LEFT ANYWAY, RESET FLAG

	LDA	JUMPLEFT	;WE GO UP THIS MUCH IN PIXELS
	ROR	A
	BNE	JMH10
	LDA	JUMPLEFT	;IF NOT, GET WHATS LEFT
JMH10: 	STA	SAFEY		;SAVE AMOUNT TO JUMP HERE
	LDA	JUMPLEFT
	SEC
	SBC	SAFEY 		;UPDATE JUMP WE HAVE LEFT
	STA	JUMPLEFT

	LDA	#0
	SEC
	SBC	SAFEY		;MAKE NEGATIVE MOVEMENT
	TAY
	LDX	#0
	JSR	MOVE_HERO	;AND MOVE THE HERO UP
	BEQ	MH55		;IF WE MOVED, ITS OK
	LDA	SAFEY
	LSR	A
	STA	JUMPLEFT	;IF HIT SOLID, RESET HEIGHT LEFT TO HIT AMT.
	JSR	NEGATE
	TAY
	LDX	#0
	JSR	MOVE_HERO	;IF WE HIT TOP, TRY TO MOVE HALF AGAIN
	JMP	MH55

MH55A:	LDA	#0
	STA	JUMPING		;IF CAN'T, RESET JUMP MOMENTUM
	STA	JUMPLEFT	;AND THIS TOO
	JSR	MOVEAGAIN

;NOW MOVE THE HERO SPRITE ACCORDING TO THE MOMENTUM.

;--------------------------------------------------------- JGT 05/11/90 ---
; set XMOMENTUM to BUMPX if HITFLAG is non-zero
;

MH55:	LDA	HITFLAG
        BEQ     MH55JGT		;non-zero if in "HIT" mode

        LDA     BUMPX
        STA     XMOMENTUM
        LDA     BUMPY
        STA     YMOMENTUM
	
MH55JGT:

;--------------------------------------------------------------------------

 	LDA	#0
	STA	HITSOLID	;RESET FLAG OF WE HAVE FALLEN DOWN ONTO SOLID.
	LDA	YMOMENTUM
	BPL	MH56
	LDY	#0
	CMP	#-7		;IT MUST BE ABOVE -7 OR ITS NOT GOOD ENOUGH
	BCS	MH58		;USE 0 INSTEAD OF -1.

		CLC
		ADC	#7	;Adjust for negative values.	-KHB
	LSR	A
	LSR	A
	LSR	A		
	ORA	#%11100000	;DIVIDE BY 8, PRESERVE SIGN
	JMP	MH57

MH56:	LSR	A
	LSR	A
	LSR	A	;MAKE /8 VALUE
MH57:	TAY

MH58:	LDA	XMOMENTUM
	BPL	MH59
	LDX	#0
	CMP	#-7		;IT MUST BE ABOVE -7 OR ITS NOT GOOD ENOUGH
	BCS	MH60

		CLC
		ADC	#7	;Adjust for negative values.	-KHB
	LSR	A
	LSR	A
	LSR	A		
	ORA	#%11100000	;DIVIDE BY 8, PRESERVE SIGN
	JMP	MH61

MH59:	LSR	A
	LSR	A
	LSR	A	;MAKE /8 VALUE
MH61:	TAX

MH60: 	STY	SAFEWORD+1
	TXA
	ORA	SAFEWORD+1
	BEQ	MH100		;IF NO MOVEMENT, DON'T WASTE TIME
	STX	SAFEX2
	STY	SAFEY2		;SAVE AMOUNTS TO MOVE
	JSR	MOVE_HERO	
	BEQ	MH100

;WE HIT SOLID.  TRY MOVING ONE AXIS ONLY, THEN IF IT DOESN'T WORK
;CUT BOTH MOVEMENTS IN HALF AND TRY AGAIN TILL WE REACH ZERO.

	LDX	#0
	LDY	SAFEY2		;TRY MOVING JUST Y
	JSR	MOVE_HERO
	BEQ	CMV60		;IF WE COULD, GO HALF X

CMV10:	LDA	YMOMENTUM	;IF COULDN'T MOVE Y, CUT IT IN HALF
 	ROL	A
	LDA	YMOMENTUM
	ROR	A		;DIVIDE BY 2 WITH SIGN
	STA	YMOMENTUM			      
	BMI	CMV20		;IF GOING UP, NO NEED TO ARM JUMP
	
	LDA	SAFEY2
	ROL	A
	LDA	SAFEY2
	ROR	A		;DIVIDE BY 2 WITH SIGN FOR Y
	TAY
	LDX	#0
	JSR	MOVE_HERO	;MOVE Y HALF RIGHT NOW
	LDX	#0
	LDY	#1		;AND THEN MOVE JUST 1 TOO.
	JSR	MOVE_HERO

	LDA	#-1
	STA	HITSOLID	;SET FLAG THAT WE ARE STANDING ON SOMETHING.

	LDA	#0
	STA	JUMPING
	STA	JUMPSTART	;IF WE LAND ON SOLID, WE DISARM ALL JUMPS
	STA	YMOMENTUM
	JSR	REARM		;THEN REARM THE JUMP ABILITY
	JSR	MOVEAGAIN	;AND LET HIS FEET MOVE TOO
	LDA	#-1
	STA	NEWHCOL		;AND CAUSE A FLAGS TEST FOR WHERE WE LANDED.

CMV20:	LDY	#0
	LDX	SAFEX2		;IF COULDN'T MOVE Y, TRY TO MOVE JUST X
	JSR	MOVE_HERO
	BEQ	MH100		;IF WE COULD, LEAVE IT ALONE

CMV60:	LDA	XMOMENTUM	;COULDN'T MOVE X.  CUT IT IN HALF
 	ROL	A
	LDA	XMOMENTUM
	ROR	A		;DIVIDE BY 2 WITH SIGN
	STA	XMOMENTUM

;WE MOVED THE HERO. SEE IF WE NEED TO SET A NEW HERO POSITION FLAG.  ALSO,
;IF THE HERO MOVED OFF SCREEN, ITS NO GOOD.  

MH100: 	JSR	FIND_HERO
	LDA	#0
	SEC
	SBC	HEROSCENTER	;MAKE LENGTH FROM HERO TO END OF SCREEN
	SEC
	SBC	HEROWIDE	;MUST LEAVE WHOLE HERO VISIBLE
	BCS	MH110
	TAX
	LDY	#0
	JSR	MOVE_HERO	;IF NOT ENOUGH ROOM, BACK UP HERO
	JSR	FIND_HERO	;AND FIND THE HERO AGAIN

	LDA	STUCK		;SEE IF WE WERE STUCK
	BEQ	MH110
 	JSR	STICKJUMP	;JUMP OFF IF TOO FAR RIGHT
	
MH110:	LDX	WORLD_INDX
	LDA	HEROSHEAD
	CMP	HEROSFEET	;SEE IF HEAD WRAPPED AT SCREEN TOP
	BCS	MH113
	CMP	SCREENLIMITS,X	;GET TOPMOST ALLOWED SCAN LINE FOR HERO
	BCS	MH111
MH113:
;;	LDA	UPWORLD
;;	STA	WORLD_REQUEST
	LDA	SCREENLIMITS,X	;IF TOO HIGH, SET DESIRED Y VALUE

	JMP	MH112

MH111:
	LDA	HEROSFEET 	;HEAD OK, CHECK FEET
;;	CMP	CLIFFLEVEL	;BELOW CLIFF LEVEL?
;;	BCC	MH111A
;;
;;	LDY	GRAV+1
;;	BEQ	MH111A		;IF NO GRAVITY, WE DON'T DO IT.
;;
;;	LDX	#CLIFFEND & $FF	;IF SO, HE'S FALLING TO DEATH!
;;	LDY	#CLIFFEND >> 8		
;;	JMP	SET_NMI	 	
;;
;;MH111A:
	SEC
	SBC	SCREENLIMITS+1,X	;HEAD OK. CHECK FEET.
	BCC	MH115
	BEQ	MH115
	EOR	#$FF
	SEC
	ADC	HEROSHEAD	;IF FEET WRONG, BACK UP THE HEAD	
;;	PHA
;;	LDA	DNWORLD
;;	STA	WORLD_REQUEST	;AND GET THE BOTTOM CONNECTION IN CASE ACTIVE
;;	PLA
MH112:	TAY
	LDX	HEROX
	JSR	PUT_HERO 	;FIX HIS Y
	JSR	FIND_HERO	;FIND OUT WHERE HE IS
	LDA	STUCK    
	BEQ	MH115
	JSR	UNSTICK		;IF HE'S STUCK TO AN ENEMY, RESET IT.

MH115:	LDA	HEROCOL
	EOR	LASTHCOL
	ORA	NEWHCOL	
	STA	NEWHCOL		;IF ANY CHANGES, KEEP THEM
;;	LDA	HEROCOL+1
;;	EOR	LASTHCOL+1
;;	ORA	NEWHCOL
;;	STA	NEWHCOL

	LDA	HEROTOP
	EOR	LASTHTOP
	ORA	NEWHCOL
	STA	NEWHCOL
	
	JSR	SETHEROS	;SET CURRENT AS LAST FOR NEXT TIME

;SEE IF THE HERO WAS DOING A SPECIAL FALL AFTER A JUMP FROM THE NO GRAVITY
;REGION.  THE IDEA IS TO LET HIM FALL TO WHERE HE STARTED FROM.  WHILE
;THIS IS HAPPENING WE HAVE TO WATCH THE TRAVEL AND RESET HIM TO HIS 
;STARTING Y WHEN HE GETS PAST IT.

MH120:	LDA	JUMPSTART	;DOING SPECIAL JUMP?
	BEQ	MH210
	LDA	JUMPING		;BUT STILL IN THE JUMP UP?
	BNE	MH210
	
	LDA	HEROSFEET
	SEC
	SBC	JUMPSTART	;SEE IF HE MADE IT SAFELY DOWN
	BCS	SPJ30
	JSR	NEGATE
	CMP	#8		;IF NOT ALL THE WAY, WITHIN 8?
	BCC	SPJ30		;THATS CLOSE ENOUGH TOO.  ALSO CATCHES BUG.
	JMP	MH124		;IF WE DIDN'T JUST SKIP THE BORDER CHECK.

SPJ30:	LDA	JUMPSTART
	SEC
	SBC	HEROHIGH	;MAKE HEAD LOCATION FROM FOOT LOCATION
	LDX	#0
	STX	JUMPSTART	;WHEN DONE, RESET THE FLAG.
	LDX	#2
	STX	GRAVROW		;PUT US BACK INTO THE NO GRAVITY REGION
	STX	NEWHCOL		;AND CAUSE A FLAGS TEST FOR WHERE WE LANDED.
	JMP	MH123B		;GO SHARE Y ADJUSTMENT LOGIC.

;SEE IF THE HERO MOVED INTO THE GRAVITY REGION FROM THE NO GRAVITY REGION.
;IF HE DID, HE MUST BE PUT AT THE TOP WITH 0 VERTICAL MOMENTUM.

MH210: 	LDA	STUCK    	;SEE IF STUCK TO ENEMY
	BNE	MH210A		;IF SO,  SET AS IF AT BORDER.
	LDA	JUMPING		;ARE WE JUMPING?
	BNE	MH210A		;IF SO, SET AS IF AT BORDER
	LDX	GRAVROW		;GET STATE OF LAST TEST FOR THE BRANCHES
	LDA	HEROSFEET
	CMP	TOPGRAV	
	BNE	MH121		;IF EXACTLY AT BORDER, SET STATE=1	
MH210A:	LDA	#1		;AT BORDER WE SET FLAG
	STA	GRAVROW
      	JMP	MH123A

MH121:	BCS	MH122		;SKIP IF BELOW GRAVITY REGION
	LDA	#0
	STA	GRAVROW		;SIGNAL WE ARE IN THE GRAVITY REGION
	CPX	#2		;SEE IF WE CROSSED THE BOUNDRY
	BEQ	MH123		;IF SO, WE MUST STOP TEMPORARILY AT BORDER
	JMP	MH124

MH122:	LDA	#2
	STA	GRAVROW		;SET FLAG OF IN THE NON-GRAVITY REGION
	CPX	#0		;WERE WE IN GRAVITY BEFORE?
	BNE	MH124

;WE CROSSED A BORDER. ZERO THE MOMENTUM AND MOVE THE HERO TO
;THE EXACT BORDER.  THIS IS DONE TO PREVENT THE HERO FROM OSCILLATING
;AT THE GRAVITY BORDER.

MH123:	LDA	HEROHIGH
	STA	SAFEWORD+1	;SAVE PIXEL HEIGHT OF HERO

	LDA	TOPGRAV
	SEC
	SBC	SAFEWORD+1	;BACK UP FROM GRAVITY REGION TO GET HEAD

;SHARED ENTRY POINT TO ZERO THE Y MOMENTUM AND MOVE THE HERO TO A GIVEN
;Y WITH THE CURRENT X.

MH123B:	TAY

	LDA	HEROSCENTER
	SEC
	SBC	HEROWIDE
	TAX			;MAKE CURRENT X HERO LOCATION
	JSR	PUT_HERO
	JSR	FIND_HERO	;AND FIX THE HERO

MH123A:	LDA	#0
	STA	YMOMENTUM	;ZERO Y MOMENTUM IF CHANGE IN CONDITION

;DONE MOVING THE HERO AND SETTING THE FLAG FOR NEW COLUMN.  ADJUST 
;THE BACKGROUND SCROLL.  THEN IF WE SCROLL THE BACKGROUND, SET A VARIABLE
;TO ADJUST ALL SPRITES' X VALUE.  THIS VARIABLE IS PICKED UP WITHIN THE
;NEXT 1/15 SECOND INTERVAL BY ALL SPRITES.  THIS PROGRAM ONLY SUPPORTS X 
;SCROLLING WHICH IS AN IMPORTANT LIMITATION OF THIS STATE MACHINE.

MH124:	LDA	STARTCOL	;GET THE LEFTMOST BACKGROUND COLUMN AS OF NOW
	STA	SAFEBYTE	;SAVE IT HERE.		

;FIRST SEE IF WE ARE IN A SPECIAL MODE WHERE THE SCROLL IS FORCED AND
;CONTINUOUS.

	LDX	CURWORLD
	LDA	BACKSCROLL,X	;SEE IF WE HAVE FORCED RIGHT SCROLL
	STA	GLOBAL_SCROLL	;ASSUME WE ARE IN SPECIAL MODE
	BNE	MH160
	JMP	MH125

;ITS SPECIAL CONTINUOUS SCROLL MODE.  WE JUST MOVE THE WORLD RIGHT
;BY THE VALUE WE STORED IN GLOBAL_SCROLL.  IF THE HERO TRIES TO
;MOVE LEFT OR RIGHT PAST THE LIMIT SPECIFIED IN THE WORLD TABLE WE STOP
;HIM THERE.

MH160:	LDA	LEFTSCROLL
	SEC
	SBC	HEROSCENTER	;MAKE AMOUNT TO SCROLL LEFT
	BCC	MH161		;SKIP IF WE DON'T NEED TO
	TAX			;KEEP THE SCROLL AMOUNT HERE
	JMP	MH162
MH161:	LDA	HEROSCENTER
	SEC
	SBC	RIGHTSCROLL	;MAKE AMOUNT TO SCROLL RIGHT
	BCC	MH163
	BEQ	MH163		;SKIP IF DON'T NEED RIGHT SCROLL.
	JSR	NEGATE
	TAX
MH162:	LDY	#0
	JSR	MOVE_HERO	;MOVE THE HERO TO KEEP INSIDE WINDOW.

MH163:	JSR	GET_RIGHT	;GET AMOUNT WE CAN SCROLL RIGHT
	CPX	GLOBAL_SCROLL	;GET AMOUNT WE WANT TO SCROLL
	BCC	MH165		;IF AMOUNT LEFT IS SMALLER, USE IT
	LDX	GLOBAL_SCROLL
MH165:	TXA
	PHA			;SAVE A COPY OF IT
	JSR	NEGATE		;MAKE AMOUNT FOR SPRITES TO MOVE LEFT FROM IT
	STA	GLOBAL_SCROLL
	PLA
	JSR	ADDBACK
	JMP	MH200

;ORDINARY SCROLL LOGIC. WE NEED TO SCROLL LEFT IF WE CAN.  

MH125:	LDA	LEFTSCROLL
	SEC
	SBC	HEROSCENTER	;MAKE AMOUNT TO SCROLL LEFT
	BCC	MH150		;SKIP IF WE DON'T NEED TO
	CMP	#8		;LIMIT IT TO 8 AT A TIME TO PREVENT JUMPS
	BCC	MH126
	LDA	#8
MH126: 	STA	GLOBAL_SCROLL	;SAVE HERE FOR SPRITE FIX.

	LDA	CURWORLD
	CMP	#3
	BNE	MH126C		;Go if not warehouse 1.
	LDA	STARTCOL
	CMP	#96
	BEQ	MH126D		;Stop scroll!	-KHB
	CMP	#192
	BEQ	MH126D		;Stop scroll!

MH126C:	LDX	STARTCOL
;;	JSR	STARTRAM	;SEE IF WE HAVE SCROLLED ONTO A LEFT LIMIT
	LDA	WORLDRAM,X
	CMP	#$23		;LEFT LIMIT COMMAND?
	BNE	MH127		;IF NOT, ITS OK TO SCROLL	
MH126D:	LDA	XBACK
	AND	#7
	CMP	GLOBAL_SCROLL	;SEE IF LEFT OVER PIXELS ARE LESS
	BCS	MH127
	STA	GLOBAL_SCROLL	;IF LESS, JUST TRY TO SCROLL THAT MUCH
	BEQ	MH150

MH127:	LDA	XBACK		;NOW UPDATE OUR SCROLL LOCATION IN BACKGROUND
	SEC
	SBC	GLOBAL_SCROLL
	STA	XBACK
	LDA	XBACK+1
	SBC	#0
	STA	XBACK+1
	LDA	XBACK+2
	SBC	#0
	STA	XBACK+2
	BCS	MH128		;IF WE HAD ENOUGH, ITS GOOD NOW.
	LDA	XBACK		;IF NOT ENOUGH, GET AMOUNT WE WERE OFF
	PHA
	JSR	ZEROSCROLLS	;IF NOT ENOUGH, ZERO IT
	PLA
	CLC
	ADC	GLOBAL_SCROLL
	STA	GLOBAL_SCROLL	;AND FIX THE AMOUNT WE CAN SCROLL
MH128:	JMP	MH195

;WE NEED TO SCROLL RIGHT IF WE CAN.		
	
MH150:	LDA	HEROSCENTER
	SEC
	SBC	RIGHTSCROLL	;MAKE AMOUNT TO SCROLL RIGHT
	BCC	MH201
	CMP	#8		;LIMIT IT TO 8 AT A TIME TO PREVENT JUMPS
	BCC	MH154
	LDA	#8
MH154:	STA	GLOBAL_SCROLL	;SET AMOUNT TO SCROLL

	JSR	GET_RIGHT	;GET AMOUNT WE CAN SCROLL RIGHT
	CPX	GLOBAL_SCROLL	;SEE IF AMOUNT LEFT IS MORE THAN WHAT WE WANT
	BCS	MH153
	STX	GLOBAL_SCROLL	;IF NOT, SET DESIRED AMOUNT AS WHATS LEFT

;WE ARE SCROLLING RIGHT AND THE VALUE HAS BEEN CORRECTED.  

MH153:	LDA	GLOBAL_SCROLL
	JSR	ADDBACK		;MAKE NEW POSITION

	LDA	GLOBAL_SCROLL
	JSR	NEGATE
	STA	GLOBAL_SCROLL	;NEGATE IT FOR SPRITE FIXES.

;MOVE THE HERO SPRITE ACCORDING TO THE AMOUNT.

MH195:	LDX	GLOBAL_SCROLL
	BEQ	MH300
	LDY	#0
	JSR	MOVE_HERO

;DO THE SCROLL.  XBACK HAS BEEN CORRECTED.  GLOBAL_SCROLL IS 0 IF NONE.

MH200: 	LDA	GLOBAL_SCROLL
	BEQ	MH300

	LDA	STARTCOL
	STA	SAFEWORD
;;	LDA	STARTCOL+1
;;	STA	SAFEWORD+1	;SAVE COLUMN BEFORE SCROLL

 	JSR	SCROLLWORLD	;DO THE SCROLL WITH SUPPORT FOR SPECIAL MODES
	JSR	MAKE_STCOL	;MAKE THE RESULTING BACKGROUND COLUMN

	LDA	SAFEWORD
	SEC
	SBC	STARTCOL	;SEE IF LEFTMOST COL HAS CHANGED NOW
	STA	SAFEWORD
;;	LDA	SAFEWORD+1
;;	SBC	STARTCOL+1
	BCC	MH196		;IF NEGATIVE, WE SCROLLED RIGHT ONTO NEW COL
	LDA	SAFEWORD	;GET BACK POSSIBLE NEW LEFT COLUMN
	BNE	MH197		;AND IF LEFT, DO IT
MH201:	JMP	MH300		;IF NONE, CAN THE FLAG SCAN.

MH196:	LDA	STARTCOL
	ADC	#31		;IF RIGHT, POINT TO LAST COL VISIBLE
	TAX
;;	LDA	STARTCOL+1
;;	ADC	#0
;;	TAY
	JMP	MH198
MH197: 	LDX	STARTCOL
;;	LDY	STARTCOL+1
MH198:	JSR	SCREENFLAGS	;SCAN WHAT TO DO FOR THIS COLUMN.

;SEE IF THE HERO SHOULD FACE THE OTHER DIRECTION.

MH300:	LDA	HERODIR		;SHOULD BE RIGHT FACING.  SEE IF LEFT.
	BPL	MH420
	JSR	MIRROR_HERO

;DONE.  AS A LAST THING TO DO, IF THE UP OR DOWN ARROW KEYS ARE DEPRESSED
;WE NEED TO SET NEWHCOL SO THAT THE DOOR AND ENTRANCE COMMANDS CAN WORK.

MH420:	LDA	J1FLAGS
	ORA	J2FLAGS
	AND	#$0C
	BEQ	MH410
	LDA	#-1
	STA	NEWHCOL		;SET NEW HERO COLUMN FOR CHECK OF DOORS

MH410:	RTS

CONVEY_MOM:
	.byte 	25,40,10,0	;Momentum values for conveyor belt.	-KHB

;THIS SUB WILL TAKE THE VALUE IN A AND ADD IT TO 3 BYTE XBACK 

ADDBACK:CLC
	ADC	XBACK
	STA	XBACK
	LDA	XBACK+1
	ADC	#0
	STA	XBACK+1
	LDA	XBACK+2
	ADC	#0
	STA	XBACK+2		;MAKE NEW POSITION
	RTS

;THIS ROUTINE WILL RETURN AN AMOUNT IN X IN PIXELS THAT IT IS OK TO SCROLL
;RIGHT WITHIN THE CURRENT BACKGROUND.  IT ALSO CHECKS FOR HITTING A RIGHT
;SCROLL LIMIT.  IF THE AMOUNT IS OVER 255, 255 IS RETURNED.

GET_RIGHT:
	LDA	CURWORLD
	CMP	#3
	BNE	GR06		;Go if not warehouse 1.
	LDA	STARTCOL
	CLC
	ADC	#31
	CMP	#95
	BEQ	GR08		;Stop scroll!	-KHB
	CMP	#191
	BEQ	GR08		;Stop scroll!

GR06:	LDA	STARTCOL
	CLC
	ADC	#31
	TAX
;;	JSR	LASTRAM		;MAKE POINTER TO THE LAST FLAG ON SCREEN.
	LDA	WORLDRAM,X
	CMP	#$24		;RIGHT LIMIT COMMAND?
	BNE	GR10		;IF NOT, ITS OK TO SCROLL

GR08:	LDX	#0		;Abort scroll.
	RTS	

GR10:	LDA	RIGHTLIMIT
	SEC
	SBC	XBACK
	STA	SAFEWORD
	LDA	RIGHTLIMIT+1
	SBC	XBACK+1
	STA	SAFEWORD+1
	LDA	RIGHTLIMIT+2
	SBC	XBACK+2		;MAKE AMOUNT WE CAN STILL SCROLL, 3 BYTES
	LDX	SAFEWORD	;ASSUME LOW BYTE IS AMOUNT LEFT
	ORA	SAFEWORD+1
	BEQ	GR20
	LDX	#255		;IF HIGH BYTES NON-ZERO, SET MAX AS SCROLLABLE
GR20:	RTS

;THIS ROUTINE WILL CALL SCRLBACK BUT WILL ALSO HONOR SPECIAL SCREEN MODES
;SUCH AS THE CONTINUOUS BACKGROUND.

SCROLLWORLD:

	LDA	HORZWORLD
	BEQ	SWD10
	LDA	XBACK
	STA	XSCROLL		;USE THE ACTUAL SCROLL AS THE X SCROLL LOW 8

	LDA	XBACK+1		;AND GET THE HIGH BITS STATE
	ROR	A		;SET WHERE WE CAN TEST IT
	LDA	VIDEOREQ
	ORA	#$40		;ASSUME TURNING OFF PAGE SELECT
	BCC	SWD5
	EOR	#$40
	ORA	#$80		;IF NOT TURNING OFF, NEED TO TURN IT ON.
SWD5:	STA	VIDEOREQ	;PUT INTO REQUEST FOR NEXT NMI WHEN THE
	RTS			;NEW SCROLL VALUE WILL GO INTO EFFECT.

SWD10:	JSR	SCRLBACK
      	RTS


;THIS ROUTINE WILL REARM JUMPING IF WE ARE NOT ALREADY DOING SO AND THE
;B BUTTON IS UP.

REARM:
	LDA	JUMPING		;DON'T ARM IF ALREADY JUMPING
	BNE	REA10
	LDA	J1FLAGS
	ORA	J2FLAGS
	AND	#B_BUTTON
	BNE	REA10

REARM2:				;CALL TO FORCE REARMING
	LDA	JPOWER		;GET POWER TO JUMP
	STA	JUMPLEFT	;REARM THE B BUTTON
REA10:	RTS

;THIS ROUTINE WILL MOVE THE HERO'S BULLET IF IT IS ACTIVE.

MOVEHBULLET:
	LDA	HAVEBULLET	;SEE IF WE HAVE A BULLET
	BEQ	REA10

	LDA	GLOBAL_SCROLL
	PHA
	ROL	A
	PLA
	ROR	A
	STA	SAFEWORD+1	;SAVE 1/2 OF THE SCROLL
	LDA	BULFLAGS
	AND	#1		;SEE IF NO CORRECTION FOR SCROLL
	BEQ	MVB4
	LDA	#0
	STA	SAFEWORD+1	;IF SO, ZERO CORRECTION

MVB4:	LDY	PATHINDX	;GET INDEX TO NEXT BULLET
MVB5:	LDA	(BULLETPATH),Y	;GET NEXT X
	BNE	MVB10
	LDY	#0		;IF END OF LIST, START OVER
	JMP	MVB5

MVB10: 	LDX	BULTDIR  	;SEE IF NEED NEGATIVE
	BEQ	MVB12
	JSR	NEGATE

MVB12:	CLC
	ADC	SAFEWORD+1	;CORRECT SPEED FOR SCROLL FACTOR
	TAX

	INY
	LDA	(BULLETPATH),Y	
	INY
	STY	PATHINDX	;PUT BACK NEXT INDEX
	TAY			;GET NEXT Y TO USE
	LDA	#HEROSHOT
	JSR	MOVESPRT	;MOVE THE BULLET
	LDA	RESULTX
	STA	BULLETX
	LDA	RESULTY
	STA	BULLETY

	CMP	#192
	BCS	MVBKL		;Kill bullet if off bottom of screen.	-KHB

	INC	BULLETDIST	;UP THE DISTANCE IT TRAVELED
	LDA	BULLETDIST
	CMP	BDIST		;SEE IF TOO FAR
	BCC	MVB13
MVBKL: 	JSR	KILLBULLET	;IF 255 INCREMENTS, ITS GONE.
	RTS

MVB13:	JSR	FIND_BULLET	;GET WHERE IT WENT
	LDA	HAVEBULLET	;SEE IF IT GOT KILLED
	BEQ	MVB20
	LDA	BULLETCOL	;GET NEW LOCATION
	CMP	LASTBCOL	;SAME AS LAST TIME?
	BNE	MVB15		;MUST SET FLAG IF NOT
;;	LDA	BULLETCOL+1
;;	CMP	LASTBCOL+1
;;	BNE	MVB15
	LDA	BULLETROW
	CMP	LASTBROW
	BEQ	MVB20

MVB15:	LDA	BULLETCOL
	STA	LASTBCOL
;;	LDA	BULLETCOL+1
;;	STA	LASTBCOL+1
	LDA	BULLETROW
	STA	LASTBROW
	LDA	#-1
	STA	NEWBCOL		;IF NOT, ITS A NEW TEST
MVB20:	RTS


;THIS ROUTINE MAKES BULLETCOL FROM THE BULLET'S LOCATION.   SINCE THE
;BULLET CANNOT TRAVEL VERTICALLY, WE ONLY NEED THE COLUMN.  IF THE
;X TRAVEL LOCATION REACHES SCREEN END, THE BULLET IS KILLED.

FIND_BULLET:

	LDA	BULLETY		;GET CURRENT Y
	CLC
	ADC	#4		;ROUND UP FOR HALF ROW
	LSR	A
	LSR	A
	LSR	A
	STA	BULLETROW	;SO WE CAN TEST FLAGS FOR COLLISIONS

	LDA	BULLETX
	BEQ	FBT20
	CMP	#255
	BEQ	FBT20

	CLC
	ADC	#4		
	JSR	FIND_COL	;MAKE COLUMN WITHIN BACKGROUND.
	STX	BULLETCOL
;;	STY	BULLETCOL+1
	RTS

;THE BULLET WENT OFF SCREEN. KILL IT.

KILLBULLET:

FBT20:	LDA	#0
	STA	HAVEBULLET	;KILL THE BULLET
	LDA	#HEROSHOT
	JSR	KILLSPRT
	LDA	#0
	STA	NEWBCOL
	RTS

;***********************JOYSTICK ROUTINES.************************

A1:		;A BUTTON CHANGE ROUTINES.  A IS THE HERO'S SHOT.
A2:		;A+START IS CONTINUE.

	JSR	NOCHANGES	;MAKE SURE NOT PAUSED OR IN PROCESS OF CHANGE.

;SEE IF WE ARE RUNNING.  IF NOT, IT MIGHT BE CONTINUE.

	LDA	CURWORLD	;SEE IF GAME IS RUNNING OR IF WE ARE IN BOOT.
	BNE	A250		;IF RUNNING, ITS A SHOT.
	
;GAME IS NOT RUNNING.  A+START MEANS CONTINUE.  A=$80, START=$10 IN J1FLAGS.
;A+START+DN = CONTINUE WITHOUT LOOSING 1 CONTINUE.

A100: 	LDA	CONTS
	BEQ	A120		;MUST HAVE VALID CONTINUE STATE

	LDA	J1FLAGS
	ORA	J2FLAGS		;GET BOTH START BUTTONS
	CMP	#$94
	BEQ	A110		;IF A+DN+START, PERMANENT CONTINUE

	AND	#$90		;Allow other keys to be down.	-KHB
	CMP	#$90		;MUST HAVE A AND START AND NO OTHERS DOWN
	BNE	A120		;IF A+START, CONTINUE, OTHERWISE IGNORE IT

;CONTINUE WAS REQUESTED.  THE BYTE CONTINUES MUST BE TRUE.  ITS ARMED BY
;FIRST_WORLD.

	DEC	CONTS
A110:	JSR	ZERO_SCORE	;CONTINUE MODE ZEROS THE SCORE
	LDA	#-1
	STA	NEWGAME		;AND RESET POSSESSIONS
	LDX	LASTWORLD		;GET LAST WORLD WE WERE IN
	LDA	CONTINUE_WORLD,X	;SEE WHERE TO CONTINUE
	STA	WORLD_REQUEST	;REQUEST THE SAME WORLD WE ENDED WITH
A120:	RTS

;THE GAME IS RUNNING.  A MEANS SHOOT OR IF INSTRUCTIONS WORLD IT MEANS
;LEAVE THIS WORLD.

A250: 	LDA	CURWORLD
	BPL	A252
	JMP	B120		;GET OUT OF AN INSTRUCTIONS SCREEN.

A252: 	CMP	#WINWORLD
	BEQ	A253		;Abort if END OF GAME screen.	-KHB
	LDA	HAVEBULLET
	BNE	A253		;IF ALREADY HAVE BULLET, SKIP IT.
	LDA	#-1
	STA	NEEDSHOT	;SET FLAG OF NEED TO SHOOT.  USER_MAINLINE.
A253:	RTS

;THIS SUBROUTINE WILL TWICE POP THE STACK AND RETURN IF WORLD_REQUEST OR
;BPAUSE ARE TRUE.  THIS STOPS US FROM DOING SOMETHING WHILE  PAUSED OR
;IN PROCESS OF REBOOTING.

NOCHANGES:
	LDA	WORLD_REQUEST	;MAKE SURE NO REQUEST IN PROGRESS
	ORA	BPAUSE		;AND MAKE SURE NOT PAUSED.
	BEQ	NCH10
	PLA
	PLA			;THROW OUT A RETURN ADDRESS
NCH10:	RTS

;IF A+B+UP ARE ALL PRESSED (BUT NO OTHERS) THEN WE ENABLE 
;THE SELECT WORLD MODE.   IF JUST B, WE JUMP.

B1:		;B BUTTON CHANGE ROUTINES
B2:
	JSR	NOCHANGES	;MAKE SURE NOT PAUSED OR IN PROCESS OF CHANGE.
	JSR	NOTBOOT		;MAKE SURE NOT BOOT WORLD

	LDA	J1FLAGS
	CMP	#%11001000	;A+B+UP?
	BNE	B110
	LDA	J2FLAGS
	CMP	#%00001000	;PLAYER #2 MUST BE UP TOO
	BNE	B110
	LDA	#-1
	STA	ENABLE_SELECT	;IF SO, SET ENABLE SELECT WORLD MODE
B105:	RTS

;ITS JUMP. WE JUST SET A FLAG HERE (ASSUMING ITS IN THE GRAVITY REGION).

;HERE IS THE LOGIC TO ARM AND SET THE JUMPING FLAG:

;1. JUMPLEFT MUST BE TRUE.  IT HAS THE HEIGHT WE ARE ALLOWED TO JUMP.  IF IT
;IS FOUND TRUE AT THIS LEVEL, JUMP FLAG CAN BE SET.  ONCE JUMPFLAG IS SET
;HERE, IT MUST BE HONORED BY THE HEROMOVE LOGIC.

;2.  WE MUST NOT BE ALREADY JUMPING OR FALLING FROM A SPECIAL JUMP.

;3. IF WE JUMP IN THE NON-GRAVITY REGION, WE MUST SET OUR ORIGIN OF JUMP
;INTO JUMPSTART TO SIGNAL WE HAVE TO FALL  BACK TO THAT REGION.

B110:	LDA	CURWORLD
	BMI	B120		;IF INSTRUCTIONS, NO JUMP
	CMP	#WINWORLD
	BEQ	B105		;If END OF GAME world, no jump.	-KHB

	LDA	J1FLAGS
	ORA	J2FLAGS
	AND	#$30		;MAKE SURE START OR SELECT ARE NOT DOWN
	BNE	B119

;WE ARE STUCK TO THE TOP OF AN ENEMY.

	LDA	STUCK    	;SEE IF WE WERE STUCK
	BEQ	B177
	JSR	STICKJUMP
	LDA	#3
	STA	CANTSTICK	;SHORTEN TIME WHEN STICKING IS DISABLED.
	JMP	B115

;WE WEREN'T STUCK TO AN ENEMY.

B177:	LDA	JUMPING		;WE DON'T DO IT AGAIN IF ALREADY JUMPING
	ORA	JUMPSTART	;OR IF FALLING FROM A JUMP 
        BNE     B119
	LDA	JUMPLEFT	;AND JUMP MUST BE ARMED
	BEQ	B119

	LDA	GRAVROW		;IN THE GRAVITY REGION OR AT BORDER?
	CMP	#2
	BNE	B115
	LDA	HEROSFEET
	STA	JUMPSTART	;IF IN NO GRAVITY REGION, NEED SPECIAL JUMP.
	JSR	CHECKSTART	;MAKE SURE ITS NOT SOMEHOW ILLEGAL

;SHARED ENTRY POINT TO SET JUMP FLAG AND MAKE THE JUMP NOISE AND
;FREEZE THE HERO IN THE JUMPING POSITION.

B115:	LDA	#-1
	STA	JUMPING		;SET FLAG OF WE ARE JUMPING
	JSR	JUMPFREEZE

	LDA	#0
	STA	YMOMENTUM
	STA	NOYFRICTION

	LDA	#DINGSLOT
	JSR	SILENCE
	LDX	#HEROJUMP & $FF
	LDY	#HEROJUMP >> 8
	LDA	#DINGSLOT
	JSR	PLAY
B119:	RTS

B120: 	LDA	NOOUT		;MAKE SURE ITS OK FIRST TO LEAVE INSTRUCTIONS
	BNE	B122
	LDA	FOLLOW_WORLD	;GET OUT OF AN INSTRUCTIONS SCREEN.
	STA	WORLD_REQUEST
B122:	RTS

;THIS SUB WILL FREEZE THE HERO ANIMATION IN THE JUMP POSITION.  ITS ALSO
;USED WHEN THE HERO IS STUCK TO AN ENEMY.

JUMPFREEZE:
;	LDA	#HEROSLOT
;	JSR	FREEZE
;	LDA	#HEROSLOT
;	LDX	#0
;	JSR	SELFRAME
	RTS

;CALL HERE TO REVERSE JUMPFREEZE.

MOVEAGAIN:
	LDA	#HEROSLOT
	JSR	UNFREEZE
	RTS

;THIS SUB WILL SET UP TO FALL OR JUMP OFF A STUCK ENEMY.  IT MAKES NO NOISE.
;IT CAN BE CALLED FROM THE B BUTTON WHEN WE WERE STUCK OR IT CAN BE
;CALLED FROM MOVEENEMY WHEN THE STUCK IT TO BE CANCELED.  IT DOESN'T JUMP,
;BUT IT SETS UP IN CASE YOU WANT TO.

STICKJUMP:
	JSR	UNSTICK		;IF STUCK, RESET STUCK MODE
	JSR	REARM2		;FORCE REARMING
	LDA	#0
	STA	JUMPSTART	;ASSUME NOT SPECIAL JUMP
	LDX	STICKENEMY	;GET THE ENEMY WE WERE STUCK TO
	LDA	ENEMYHIGH,X	;GET ITS HEIGHT
	CLC
	ADC	ENEMYY,X	;MAKE LOCATION OF ENEMIES FEET
	SBC	#1		;MOVE UP JUST FOR SAFETY
	CMP	TOPGRAV		;ENEMIES FEET IN GRAVITY REGION?
	BCC	B166		;IF NOT, NORMAL JUMP IN GRAVITY REGION
	STA	JUMPSTART	;MAKE HERO FALL DOWN TO THIS ENEMIES FEET

CHECKSTART:		;CALL HERE TO MAKE SURE JUMPSTART IS NOT BELOW
			;LEGAL SCREEN LIMITS (IT LOCKS THE HERO DOWN!).
	
	LDX	WORLD_INDX
	LDA	SCREENLIMITS+1,X	;GET SCREEN BOTTOM
	CMP	JUMPSTART
	BCS	B166
	STA	JUMPSTART		;SET AT BOTTOM IF TOO MUCH
B166:	RTS

SEL1:			;SEL BUTTON CHANGE ROUTINES
SEL2:			;SEL THROWS BOMB.
			;SEL+B BRINGS NEXT WORLD IF ENABLED.

	JSR	NOCHANGES	;MAKE SURE NOT PAUSED OR IN PROCESS OF CHANGE.
	JSR	NOTBOOT		;MAKE SURE NOT BOOT WORLD

	LDA	ENABLE_SELECT
	BEQ	SEL30
	LDA	J1FLAGS		;BUT B MUST BE DOWN TOO WITH THE SELECT
	CMP	#%01100000	;B+SELECT?
	BEQ	SEL3
	CMP	#%10100000	;A+SELECT?
	BNE	SEL30

;ITS INVULNERABLE MODE

	LDA	#-1
	STA	CANTDIE
	RTS

;ITS SELECT WORLD MODE.  GET THE NEXT WORLD.

SEL3:	LDA	STATSCRF
	BNE	SEL30		;Don't allow if status screen active.

	LDA	CURWORLD
	BMI	SEL5		;Go if instructions world.	-KHB

	CLC
	ADC	#1		;Go to next world.
	CMP	#MAX_WORLD
	BCC	SEL7		;Continue if no wrap.
	LDA	#$81
	JMP	SEL7		;Set to 2nd instructions world.

SEL5:	CMP	#FIRST_WORLD
	BNE	SEL6		;Continue if not FIRST world.	-KHB
	LDA	#1
	JMP	SEL7		;Set new world.

SEL6:	CLC
	ADC	#1		;Go to next world.
     	CMP	#MAX_INST
	BCC	SEL7		;Continue if no wrap.
	LDA	#FIRST_WORLD	;Set to first instructions world.

SEL7:	STA	WORLD_REQUEST	;SET REQUEST FOR THIS NEW WORLD
	LDA	#3
	STA	HEROS		;UP COUNT OF HEROS TO 3
	LDA	#STARTHEALTH
	STA	HEALTH		;AND UP HEALTH
SEL20:	RTS

;BRING UP THE SELECT MENU.

SEL30: 	LDA	CURWORLD
	BPL	SEL32
SEL31:	RTS

SEL32:	CMP	#WINWORLD
	BEQ	SEL31		;Don't allow if END OF GAME screen.	-KHB
 	LDA	#-1
	STA	SELREQUEST
	RTS

;START BUTTON CHANGE ROUTINE.  IF THE GAME IS PLAYING, WE PAUSE.  

STRT1:		
STRT2:	LDA	WORLD_REQUEST	;MAKE SURE NO REQUEST IN PROGRESS
	BNE	SEL20
	LDA	CURWORLD	;SEE IF GAME IS RUNNING OR IF WE ARE IN BOOT.
	BEQ	STRT10		;IF WORLD 0 (BOOT) CONTINUE OK
	CMP	#WINWORLD
	BEQ	STRT12		;If END OF GAME world, continue is OK.
	CMP	#OVER_WORLD	;A+START IS ALSO OK IF GAME OVER WORLD
	BNE	STRT50		;IF GAME RUNNING, GO TO PAUSE
	
;GAME IS NOT RUNNING.  START MEANS START GAME OR  START+A MEANS CONTINUE.

STRT10:	LDA	J1FLAGS
	ORA	J2FLAGS		;GET BOTH A BUTTONS
	BPL	STRT20
	JMP	A100		;IF A+START, CONTINUE WAS REQUESTED.

;END OF GAME WORLD WAS BEING DISPLAYED - GO TO BOOT SCREEN.	-KHB

STRT12:	LDA	J1FLAGS
	ORA	J2FLAGS
	CMP	#$10
	BNE	STRT14		;Exit if START not ONLY button down.

	LDA	#0
	STA	LASTWORLD	;RESET CONTINUE MODE STUFF
	STA	DONTRELOAD	;DISABLE CONTINUING IN SAME WORLD FLAG
	LDA	#-1
	STA	WORLD_REQUEST	;REQUEST WORLD 0

STRT14:	RTS

;ONLY START IS DOWN.  START A NEW GAME.

STRT20:
;;	CMP	#$10		;MUST BE ONLY START TO START A NEW GAME
;;	BNE	STRT55
	LDA	#FIRST_WORLD
	STA	WORLD_REQUEST	;IF NOT RUNNING, REQUEST SPECIFIED FIRST WORLD
	LDA	#-1
	STA	NEWGAME
	JSR	ZERO_SCORE
	RTS

;GAME IS RUNNING.  WE NEED TO PAUSE.

STRT50:	JSR	NOTSPEC	;DON'T PAUSE IF IN SPECIAL WORLD MODE LIKE STAT SCREEN

	LDX	BPAUSE	;SEE IF WE ARE ALREADY PAUSING
	BNE	STR10

;WE NEED TO PAUSE.  STOP ALL SOUNDS.
;----------- MAKE NON-HAMMER MAN IF GOING TO PAUSE!   RTB 5/6/90
	JSR	REMHAM		;REMOVE HAMMER MAN!
;--------------------------------------------------------------
	JSR	ALLSILENCE	
	JSR	MAKEDING  	;MAKE A DING NOISE FOR THE PAUSE

	LDA	#-1
	STA	BPAUSE
STRT55:	RTS

;WE WERE ALREADY PAUSING.  RESET THE PAUSE FLAG AND RESTART WORLD
;MUSIC AND HERO'S ENGINE.  BUT IF INSTRUCTIONS SCREEN, GET OUT OF IT.

STR10: 	LDA	#0
	STA	BPAUSE		;RESET PAUSE MODE
	JSR	MAKEDING  	;MAKE A DING NOISE FOR UNPAUSE
	LDA	CURWORLD
	BPL	STR10A
 	JMP	B120		;GET OUT OF AN INSTRUCTIONS SCREEN.

RESUME_SOUNDS:			;CALL HERE TO RESUME THE WORLD'S SOUNDS.

STR10A:	JSR	ALLSILENCE	
	JSR	PLAY_ENGINE
	JSR	WORLD_MUSIC
STR11:	RTS
	
UP1:				;UP BUTTON CHANGE ROUTINES
UP2:  	LDA	GRAV+1
	BEQ	UP21		;IF NO GRAVITY, WE HONOR UP ALWAYS

 	LDA	HEROSFEET
	CMP	TOPGRAV	
	BEQ	STR11		;IGNORE UP IF AT TOP OF NO GRAVITY REGION

	LDA	JUMPING
	ORA	JUMPSTART
	BNE	STR11		;IGNORE UP IF JUMPING.

UP21:	LDA	#UXMOM		;SET UP FOR SHARED CODE

UP210:
	STA	SAFEBYTE	;FOR NOW, JOYSTICK ROUTINES CAN'T INTERRUPT NMI
				;SO OK TO USE THIS VARIABLE.
	JSR	NOCHANGES	;MAKE SURE NOT PAUSED OR IN PROCESS OF CHANGE.
	JSR	NOTBOOT		;MAKE SURE NOT BOOT WORLD
	JSR	NOTINST		;MAKE SURE NOT INSTRUCTIONS WORLD


;UPDATE X MOMENTUM

	LDY	SAFEBYTE
	LDA	XINERTIA	;SEE IF INERTIA APPLIES
	CMP	#$80
	BEQ	UP213		;IF NOT, SKIP CHECK

	LDA	CURWORLD	;Check for sewer.	-KHB
	CMP	#3
	BEQ	UP210B		;Go if warehouse 1.
	CMP	#6
	BNE	UP210C		;Continue if not warehouse 1 or 2.
UP210B:	LDA	HEROSFEET	;Get hero's feet scan line location.
	CMP	#182
	BCC	UP210C		;Continue if not in sewer.

	LDA	0,Y		;Get X momentum value to use.
	BMI	UP213M
	LDA	#1
	JMP	UP213D
UP213M:	LDA	#$FF
	JMP	UP213D		;Set to 1 or -1 and continue.

UP210C:	LDA	GDIS	
	BEQ	UP213		;BUT DO WE HAVE TO CHECK IF IN GRAVITY REGION?

	LDA	GRAVROW		;SEE IF WE ARE AT BORDER OR IN GRAVITY REGION
	BEQ	UP213		;0=IN GRAVITY REGION.  NO Y CHANGES ALLOWED.

	LDA	XMOMENTUM	;IF AT 0, INERTIA ALWAYS APPLIES
	BEQ	UP200
	EOR	0,Y		;SEE IF SIGN IS SAME OR DIFFERENT
	BPL	UP213
UP200: 	LDA	0,Y		;BUT IS THERE ACTUALLY AN AMOUNT TO CHANGE BY?
	BEQ	UP211

	LDA	#-1
	STA	NOXFRICTION	;IF WE ARE GOING TO USE INERTIA OVERRIDE,
				;SET FLAG TO DISABLE FRICTION.

	LDA	XINERTIA	;GET INERTIA VALUE
	STA	XMOMENTUM	;SWITCH TO THAT VALUE
	LDX	0,Y		;SEE IF WE ARE CHANGING TO +
	BPL	UP213
	JSR	NEGATE
	STA	XMOMENTUM	;IF NOT, WE NEED -

UP213:	LDA	0,Y		;GET VALUE WE ARE GOING TO ADD
	ORA	NOXFRICTION	;OR INTO OUR NO FRICTION FLAG
	STA	NOXFRICTION	;WHEN TRUE, FRICTION IS OFF.

	LDA	0,Y		;GET X MOMENTUM VALUE TO USE
UP213D:	CLC
	ADC	XMOMENTUM	;GET X MOMENTUM VALUE TO USE
	BVS	UP211		;DON'T UPDATE IF SIGNED OVERFLOW
	STA	XMOMENTUM

;NOW UPDATE Y MOMENTUM.  BUT ITS SOMETIMES DISABLED.
;IF WE ARE IN THE GRAVITY REGION, IT CAN BE COMPLETELY DISABLED.  IF WE ARE
;AT THE BORDER, ONLY UPWARDS (-1) MOMENTUM CAN BE DISABLED.

UP211:	

	LDA	JUMPSTART	;ARE WE IN A SPECIAL JUMP?
	ORA	JUMPING		;OR JUMPING AT ALL?
	BNE	UP212		;IF SO, NO Y CHANGES

 	LDA	GRAVROW		;IN GRAVITY REGION?
	CMP	#2		;2=NOT IN IT FOR SURE
	BEQ	UP211A

	LDA	GDIS	
	BEQ	UP211A		;SKIP IF MOMENTUM SUPPRESSION IS OFF

	LDA	GRAVROW		;SEE IF WE ARE AT BORDER OR IN GRAVITY REGION
	BEQ	UP212		;0=IN GRAVITY REGION.  NO Y CHANGES ALLOWED.

	LDX	1,Y		;SEE IF WE ARE CHANGING TO - MOMENTUM
	BMI	UP212		;IF WE ARE, AT BORDER ITS NOT OK

UP211A:	LDA	YINERTIA	;SEE IF INERTIA APPLIES
	CMP	#$80
	BEQ	UP216		;IF NOT, SKIP CHECK
	LDA	YMOMENTUM
	BEQ	UP217		;IF AT 0, INERTIA ALWAYS APPLIES
	EOR	1,Y		;SEE IF SIGN IS SAME OR DIFFERENT
	BPL	UP216		;IF SIGN ALREADY SAME, NO INERTIA KICK IN
UP217:	LDA	1,Y		;BUT IS THERE ACTUALLY AN AMOUNT TO CHANGE BY?
	BEQ	UP212

	LDA	#-1
	STA	NOYFRICTION	;IF WE ARE GOING TO USE INERTIA OVERRIDE,
				;SET FLAG TO DISABLE FRICTION.
	LDA	YINERTIA	;GET INERTIA VALUE
	STA	YMOMENTUM	;SET ASSUMING POSITIVE
	LDX	1,Y		;SEE IF WE ARE CHANGING TO +
	BPL	UP216
	JSR	NEGATE
	STA	YMOMENTUM

UP216:	LDA	1,Y		;GET VALUE WE ARE GOING TO ADD
	ORA	NOYFRICTION	;OR INTO OUR NO FRICTION FLAG
	STA	NOYFRICTION	;WHEN TRUE, FRICTION IS OFF.
	LDA	YMOMENTUM
	CLC
	ADC	1,Y
	BVS	UP212
	STA	YMOMENTUM	;UPDATE ACCORDING TO MOMENTUM TABLE
UP212:	RTS

DOWN1:		;DOWN BUTTON CHANGE ROUTINES
DOWN2:
	LDA	HEROSFEET 	
	LDX	WORLD_INDX
	CMP	SCREENLIMITS+1,X	;FEET = BOTTOM?
	BEQ	UP212			;IF SO, NO DOWN KEY
	LDA	#DXMOM
	JMP	UP210

LEFT1:		;LEFT BUTTON CHANGE ROUTINES
LEFT2:	LDA	HERODIR		;GET DIRECTION FLAG
	CMP	#1
	BEQ	LFT10
	LDA	#$81
	STA	HERODIR		;REQUEST DIRECTION CHANGE TO LEFT IF NEEDED.
LFT10:	LDA	#LXMOM
	JMP	UP210

RIGHT1:		;RIGHT BUTTON CHANGE ROUTINES
RIGHT2:	LDA	HERODIR		;GET DIRECTION FLAG
	CMP	#0
	BEQ	RIT10
	LDA	#$80
	STA	HERODIR		;REQUEST DIRECTION CHANGE TO LEFT IF NEEDED.
RIT10:	LDA	#RXMOM
	JMP	UP210

;THIS ROUTINE MAKES A DING SOUND USING A SLOT THAT IS NOT USED FOR
;ANYTHING ELSE.

MAKEDING:				
	LDA	#DINGSLOT
	JSR	SILENCE
	LDX	#PAUSENOISE & $FF
	LDY	#PAUSENOISE >> 8
	LDA	#DINGSLOT
	JSR	PLAY
	RTS

;THIS ROUTINE WILL POP A RETURN ADDRESS AND RETURN IF WE ARE IN THE BOOT
;WORLD (WORLD 0).  IT CAN BE USED TO SKIP A SUB IF ITS THE BOOT WORLD.

NOTBOOT:
	LDA	CURWORLD
	BEQ	NTBT10
	RTS

;THIS ROUTINE WILL POP A RETURN ADDRESS AND RETURN IF WE ARE IN AN INSTRUCTIONS
;WORLD.  IT CAN BE USED TO SKIP A SUB IF ITS NOT A REAL WORLD.

NOTINST:
	LDA	CURWORLD
	BPL	NTBT15
NTBT10:	PLA
	PLA
NTBT15:	RTS

;THIS ROUTINE CHECKS TO MAKE SURE REAL_WORLD IS ACTIVE.

NOTSPEC:
	LDA	NMI_JMP
	CMP	#REAL_WORLD & $FF
	BNE	NTBT10
	LDA	NMI_JMP+1
	CMP	#REAL_WORLD >> 8
	BNE	NTBT10
	RTS

	;.END
;THIS END OF ASSEMBLY CODE WILL NOT INTERFERE WITH YOUR PROGRAM ORG WHICH
;COMES IMMEDIATLY AFTERWORDS.  IT IS HERE SO THAT YOU DON'T LOOSE TRACK
;OF IT AT THE BOTTOM OF YOUR ASSEMBLY.
;Padding by evenball
.byte	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
.byte	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
.byte	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
.byte	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
.byte	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
.byte	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
.byte	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
.byte	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
.byte	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
.byte	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
.byte	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
.byte	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
.byte	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
.byte	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
.byte	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
.byte	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
.byte	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
.byte	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
.byte	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
.byte	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
.byte	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
.byte	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
.byte	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
.byte	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
.byte	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
.byte	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
.byte	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
.byte	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
.byte	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
.byte	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
.byte	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
.byte	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
.byte	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
.byte	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
.byte	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
.byte	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
.byte	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
.byte	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
.byte	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
.byte	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
.byte	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
.byte	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
.byte	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
;.ORG	$FF70 		;THIS ORG HOLDS WORST CASE WHEN PAGED ROM

;IFDEF( `PAGED', `	;THIS IFDEF NOT NEEDED HERE BUT INCLUDED JUST
			;TO MATCH USERASM FOR DOCUMENTATION PURPOSES.
.ifdef	PAGED
;THIS CODE IS USED TO CALL THE ROUTINE BLD_ROW2 WHICH IS A SUBSTITUTE FOR
;THE ROUTINE BUILD_ROW AND IS USED IF THE OFFSET OF A BACKGROUND IS
;<8000H.  IT HAS A MATCHING CALL IN USERASM IF THIS MODULE IS INCLUDED.

CALL_ROW2:
	LDA	ROMPAGE
	ORA	#1
	JSR	SELPAGE 
	;JSR	BLD_ROW2
        JSR	BR2		;Evenballed
	LDA	ROMPAGE
	JSR	SELPAGE 
	RTS	

;THIS CODE IS USED TO CALL THE ROUTINE BLD_ROW2 WHICH IS A SUBSTITUTE FOR
;THE ROUTINE BUILD_ROW AND IS USED IF THE OFFSET OF A BACKGROUND IS
;<8000H.  IT HAS A MATCHING CALL IN USERASM IF THIS MODULE IS INCLUDED.

CALL_COL2:
	LDA	ROMPAGE
	ORA	#1
	JSR	SELPAGE 
	JSR	BC2	;JSR	BLD_COL2
	LDA	ROMPAGE
	JSR	SELPAGE 
	RTS	

;THIS ROUTINE IS USED TO CALL THE ROUTINE GET_WIDE.

CALL_GETWIDE:
	LDA	ROMPAGE
	ORA	#1
	JSR	SELPAGE
	JSR	GW	;JSR	GET_WIDE
	LDA	ROMPAGE
	JSR	SELPAGE
	RTS	

;THIS ROUTINE WILL CALL CHK_ROW FROM ANY PAGE.

CALL_CHK:
	LDA	ROMPAGE
	ORA	#1
	JSR	SELPAGE 
	JSR 	CKR	;JSR	CHK_ROW
	PHP
	PHA
	LDA	ROMPAGE
	JSR	SELPAGE 
	PLA
	PLP
	RTS	

	;', )
.endif

;IFDEF( `ROMVER', `		;THIS CODE USED WHEN ROM VERSION
.ifdef ROMVER
;ENTER HERE WITH THE DESIRED PAGE COMBO IN A.  HIGH NIBBLE HAS VIDEO
;PAGE AND LOW BIT HAS ROM PAGE.  A IS CHANGED, DONT COUNT ON ITS VALUE.
;THE BITS USED BY THE PAGE CIRCUIT MUST NOT BE ON.  AT THE CURRENT TIME
;THEY ARE BITS 08 AND 04.  THIS ROUTINE ASSUMES A 512 x 512 MAX CARTRIDGE.

;THE TABLE IS NEEDED BECAUSE OUR ROM CARTRIDGE DOES NOT DECODE THE ROM AREA.
;ANY WRITE TO ROM TRIGGERS THE LS377 PAGING PORT.  SINCE A WRITE ALSO 
;TRIGGERS A ROM READ (WR DOES NOT QUALIFY ROM) WE NEED TO WRITE TO AN AREA
;OF ROM THAT RETURNS THE SAME VALUE WE ARE WRITING.

;THIS ROUTINE MUST SAVE THE X AND Y REGISTERS.

SELPAGE:
	STX	PAGETEMP	;SAVE USERS VALUE FOR X
	PHA			;SAVE VALUE TO WRITE OUT
	AND	#3		;SAVE ROM PAGE BITS
	STA	WORKINGPAGE	
	PLA
	PHA			;MAKE ANOTHER COPY, GET ONE BACK
	JSR	DIV8		;MOVE HIGH BITS DOWN TO ADD IN LOWEST.
	ORA	WORKINGPAGE
	TAX			;MAKE IT INTO AN INDEX
	PLA			;GET ORIGINAL VALUE
	ORA	#12		;PUT IN THE KEY CIRCUIT BITS
	STA	PAGETAB,X	;AND SET OUT WITH THE USERS BITS
	LDX	PAGETEMP
	RTS

PAGETAB:
.byte  12,13
.byte  28,29
.byte  44,45
.byte  60,61
.byte  76,77
.byte  92,93
.byte  108,109
.byte  124,125
.endif
	;', `			;THIS CODE USED WHEN NOT ROM VERSION.
.ifndef ROMVER
;ENTER HERE WITH THE DESIRED PAGE COMBO IN A.  HIGH NIBBLE HAS VIDEO
;PAGE AND LOW HAS ROM PAGE.

SELPAGE:	
	STA	-2
	RTS
	;')
.endif

;THIS BOOT VECTOR IS NEEDED TO INSURE THAT WE DON'T CRASH IF WE 
;HAVE A PAGED VERSION.

PBOOT: 	
	LDX	#$FF
	TXS			;SET UP THE STACK
	LDA	#0
	JSR	SELPAGE
	JMP	BOOT

;.ORG	$FFFA

;HERE ARE THE INTERRUPT AND BOOT VECTORS.  
.segment "VECTORS"
	.word 	NMI		;NMI INTERRUPT (VERTICAL RETRACE INT)
	.word 	PBOOT		;BOOT VECTOR
	.word 	PBOOT		;IRQ VECTOR